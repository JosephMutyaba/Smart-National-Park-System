
embedded_pro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000082c  00800200  0000242c  000024c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000242c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  00800a2c  00800a2c  00002cec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00002d88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ed5  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef8  00000000  00000000  00007dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a10  00000000  00000000  00008cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  0000a6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8f  00000000  00000000  0000aacc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019df  00000000  00000000  0000b55b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000cf3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_1>
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__vector_5>
      18:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__vector_6>
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	48 08       	sbc	r4, r8
      e6:	91 08       	sbc	r9, r1
      e8:	c4 08       	sbc	r12, r4
      ea:	18 09       	sbc	r17, r8
      ec:	42 09       	sbc	r20, r2
      ee:	6c 09       	sbc	r22, r12
      f0:	17 0a       	sbc	r1, r23
      f2:	7f 0a       	sbc	r7, r31
      f4:	ad 0a       	sbc	r10, r29
      f6:	e2 0a       	sbc	r14, r18

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	1a e0       	ldi	r17, 0x0A	; 10
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	ec e2       	ldi	r30, 0x2C	; 44
     110:	f4 e2       	ldi	r31, 0x24	; 36
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	ac 32       	cpi	r26, 0x2C	; 44
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	2a e0       	ldi	r18, 0x0A	; 10
     124:	ac e2       	ldi	r26, 0x2C	; 44
     126:	ba e0       	ldi	r27, 0x0A	; 10
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	ac 3b       	cpi	r26, 0xBC	; 188
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <main>
     136:	0c 94 14 12 	jmp	0x2428	; 0x2428 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <write_data_to_eeprom>:
			return 1;
		}
	}

	return 0;
}
     13c:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <eeprom_update_block>
     140:	08 95       	ret

00000142 <read_data_from_eeprom>:
     142:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <eeprom_read_block>
     146:	08 95       	ret

00000148 <set_configurations>:
     148:	44 e0       	ldi	r20, 0x04	; 4
     14a:	50 e0       	ldi	r21, 0x00	; 0
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	81 e2       	ldi	r24, 0x21	; 33
     152:	92 e0       	ldi	r25, 0x02	; 2
     154:	f3 df       	rcall	.-26     	; 0x13c <write_data_to_eeprom>
     156:	44 e0       	ldi	r20, 0x04	; 4
     158:	50 e0       	ldi	r21, 0x00	; 0
     15a:	64 e0       	ldi	r22, 0x04	; 4
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	8d e1       	ldi	r24, 0x1D	; 29
     160:	92 e0       	ldi	r25, 0x02	; 2
     162:	ec df       	rcall	.-40     	; 0x13c <write_data_to_eeprom>
     164:	44 e0       	ldi	r20, 0x04	; 4
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	68 e0       	ldi	r22, 0x08	; 8
     16a:	70 e0       	ldi	r23, 0x00	; 0
     16c:	89 e1       	ldi	r24, 0x19	; 25
     16e:	92 e0       	ldi	r25, 0x02	; 2
     170:	e5 df       	rcall	.-54     	; 0x13c <write_data_to_eeprom>
     172:	42 e0       	ldi	r20, 0x02	; 2
     174:	50 e0       	ldi	r21, 0x00	; 0
     176:	6c e0       	ldi	r22, 0x0C	; 12
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	87 e1       	ldi	r24, 0x17	; 23
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	de df       	rcall	.-68     	; 0x13c <write_data_to_eeprom>
     180:	46 e0       	ldi	r20, 0x06	; 6
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	60 e1       	ldi	r22, 0x10	; 16
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	81 e1       	ldi	r24, 0x11	; 17
     18a:	92 e0       	ldi	r25, 0x02	; 2
     18c:	d7 df       	rcall	.-82     	; 0x13c <write_data_to_eeprom>
     18e:	42 e0       	ldi	r20, 0x02	; 2
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	60 e2       	ldi	r22, 0x20	; 32
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	92 e0       	ldi	r25, 0x02	; 2
     19a:	d0 df       	rcall	.-96     	; 0x13c <write_data_to_eeprom>
     19c:	48 e7       	ldi	r20, 0x78	; 120
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	64 e2       	ldi	r22, 0x24	; 36
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	84 e4       	ldi	r24, 0x44	; 68
     1a6:	9a e0       	ldi	r25, 0x0A	; 10
     1a8:	c9 df       	rcall	.-110    	; 0x13c <write_data_to_eeprom>
     1aa:	42 e0       	ldi	r20, 0x02	; 2
     1ac:	50 e0       	ldi	r21, 0x00	; 0
     1ae:	64 e2       	ldi	r22, 0x24	; 36
     1b0:	71 e0       	ldi	r23, 0x01	; 1
     1b2:	82 e4       	ldi	r24, 0x42	; 66
     1b4:	9a e0       	ldi	r25, 0x0A	; 10
     1b6:	c2 df       	rcall	.-124    	; 0x13c <write_data_to_eeprom>
     1b8:	42 e0       	ldi	r20, 0x02	; 2
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	68 e2       	ldi	r22, 0x28	; 40
     1be:	71 e0       	ldi	r23, 0x01	; 1
     1c0:	80 e4       	ldi	r24, 0x40	; 64
     1c2:	9a e0       	ldi	r25, 0x0A	; 10
     1c4:	bb df       	rcall	.-138    	; 0x13c <write_data_to_eeprom>
     1c6:	42 e0       	ldi	r20, 0x02	; 2
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	6c e2       	ldi	r22, 0x2C	; 44
     1cc:	71 e0       	ldi	r23, 0x01	; 1
     1ce:	8e e3       	ldi	r24, 0x3E	; 62
     1d0:	9a e0       	ldi	r25, 0x0A	; 10
     1d2:	b4 df       	rcall	.-152    	; 0x13c <write_data_to_eeprom>
     1d4:	42 e0       	ldi	r20, 0x02	; 2
     1d6:	50 e0       	ldi	r21, 0x00	; 0
     1d8:	60 e3       	ldi	r22, 0x30	; 48
     1da:	71 e0       	ldi	r23, 0x01	; 1
     1dc:	8c e3       	ldi	r24, 0x3C	; 60
     1de:	9a e0       	ldi	r25, 0x0A	; 10
     1e0:	ad df       	rcall	.-166    	; 0x13c <write_data_to_eeprom>
     1e2:	42 e0       	ldi	r20, 0x02	; 2
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	64 e3       	ldi	r22, 0x34	; 52
     1e8:	71 e0       	ldi	r23, 0x01	; 1
     1ea:	8a e3       	ldi	r24, 0x3A	; 58
     1ec:	9a e0       	ldi	r25, 0x0A	; 10
     1ee:	a6 df       	rcall	.-180    	; 0x13c <write_data_to_eeprom>
     1f0:	42 e0       	ldi	r20, 0x02	; 2
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	68 e3       	ldi	r22, 0x38	; 56
     1f6:	71 e0       	ldi	r23, 0x01	; 1
     1f8:	88 e3       	ldi	r24, 0x38	; 56
     1fa:	9a e0       	ldi	r25, 0x0A	; 10
     1fc:	9f df       	rcall	.-194    	; 0x13c <write_data_to_eeprom>
     1fe:	42 e0       	ldi	r20, 0x02	; 2
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	6c e3       	ldi	r22, 0x3C	; 60
     204:	71 e0       	ldi	r23, 0x01	; 1
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	92 e0       	ldi	r25, 0x02	; 2
     20a:	98 df       	rcall	.-208    	; 0x13c <write_data_to_eeprom>
     20c:	44 e0       	ldi	r20, 0x04	; 4
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	60 e4       	ldi	r22, 0x40	; 64
     212:	71 e0       	ldi	r23, 0x01	; 1
     214:	84 e3       	ldi	r24, 0x34	; 52
     216:	9a e0       	ldi	r25, 0x0A	; 10
     218:	91 df       	rcall	.-222    	; 0x13c <write_data_to_eeprom>
     21a:	44 e0       	ldi	r20, 0x04	; 4
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	64 e5       	ldi	r22, 0x54	; 84
     220:	71 e0       	ldi	r23, 0x01	; 1
     222:	80 e3       	ldi	r24, 0x30	; 48
     224:	9a e0       	ldi	r25, 0x0A	; 10
     226:	8a df       	rcall	.-236    	; 0x13c <write_data_to_eeprom>
     228:	44 e0       	ldi	r20, 0x04	; 4
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	68 e6       	ldi	r22, 0x68	; 104
     22e:	71 e0       	ldi	r23, 0x01	; 1
     230:	8c e2       	ldi	r24, 0x2C	; 44
     232:	9a e0       	ldi	r25, 0x0A	; 10
     234:	83 df       	rcall	.-250    	; 0x13c <write_data_to_eeprom>
     236:	4d e0       	ldi	r20, 0x0D	; 13
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	6e e7       	ldi	r22, 0x7E	; 126
     23c:	71 e0       	ldi	r23, 0x01	; 1
     23e:	84 e0       	ldi	r24, 0x04	; 4
     240:	92 e0       	ldi	r25, 0x02	; 2
     242:	7c cf       	rjmp	.-264    	; 0x13c <write_data_to_eeprom>
     244:	08 95       	ret

00000246 <lcd_cmd>:
     246:	85 b9       	out	0x05, r24	; 5
     248:	82 b1       	in	r24, 0x02	; 2
     24a:	8e 7f       	andi	r24, 0xFE	; 254
     24c:	82 b9       	out	0x02, r24	; 2
     24e:	82 b1       	in	r24, 0x02	; 2
     250:	8d 7f       	andi	r24, 0xFD	; 253
     252:	82 b9       	out	0x02, r24	; 2
     254:	82 b1       	in	r24, 0x02	; 2
     256:	84 60       	ori	r24, 0x04	; 4
     258:	82 b9       	out	0x02, r24	; 2
     25a:	83 ed       	ldi	r24, 0xD3	; 211
     25c:	90 e3       	ldi	r25, 0x30	; 48
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_cmd+0x18>
     262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_cmd+0x1e>
     264:	00 00       	nop
     266:	82 b1       	in	r24, 0x02	; 2
     268:	8b 7f       	andi	r24, 0xFB	; 251
     26a:	82 b9       	out	0x02, r24	; 2
     26c:	08 95       	ret

0000026e <lcd_data>:
     26e:	85 b9       	out	0x05, r24	; 5
     270:	82 b1       	in	r24, 0x02	; 2
     272:	81 60       	ori	r24, 0x01	; 1
     274:	82 b9       	out	0x02, r24	; 2
     276:	82 b1       	in	r24, 0x02	; 2
     278:	8d 7f       	andi	r24, 0xFD	; 253
     27a:	82 b9       	out	0x02, r24	; 2
     27c:	82 b1       	in	r24, 0x02	; 2
     27e:	84 60       	ori	r24, 0x04	; 4
     280:	82 b9       	out	0x02, r24	; 2
     282:	83 ed       	ldi	r24, 0xD3	; 211
     284:	90 e3       	ldi	r25, 0x30	; 48
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <lcd_data+0x18>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd_data+0x1e>
     28c:	00 00       	nop
     28e:	82 b1       	in	r24, 0x02	; 2
     290:	8b 7f       	andi	r24, 0xFB	; 251
     292:	82 b9       	out	0x02, r24	; 2
     294:	08 95       	ret

00000296 <lcd_init>:
     296:	88 e3       	ldi	r24, 0x38	; 56
     298:	d6 df       	rcall	.-84     	; 0x246 <lcd_cmd>
     29a:	8c e0       	ldi	r24, 0x0C	; 12
     29c:	d4 df       	rcall	.-88     	; 0x246 <lcd_cmd>
     29e:	86 e0       	ldi	r24, 0x06	; 6
     2a0:	d2 df       	rcall	.-92     	; 0x246 <lcd_cmd>
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	d0 cf       	rjmp	.-96     	; 0x246 <lcd_cmd>
     2a6:	08 95       	ret

000002a8 <lcd_data_print>:
     2a8:	ef 92       	push	r14
     2aa:	ff 92       	push	r15
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	7c 01       	movw	r14, r24
     2b6:	fc 01       	movw	r30, r24
     2b8:	01 90       	ld	r0, Z+
     2ba:	00 20       	and	r0, r0
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <lcd_data_print+0x10>
     2be:	31 97       	sbiw	r30, 0x01	; 1
     2c0:	8f 01       	movw	r16, r30
     2c2:	08 1b       	sub	r16, r24
     2c4:	19 0b       	sbc	r17, r25
     2c6:	c0 e0       	ldi	r28, 0x00	; 0
     2c8:	d0 e0       	ldi	r29, 0x00	; 0
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <lcd_data_print+0x30>
     2cc:	f7 01       	movw	r30, r14
     2ce:	ec 0f       	add	r30, r28
     2d0:	fd 1f       	adc	r31, r29
     2d2:	80 81       	ld	r24, Z
     2d4:	cc df       	rcall	.-104    	; 0x26e <lcd_data>
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c0 17       	cp	r28, r16
     2da:	d1 07       	cpc	r29, r17
     2dc:	bc f3       	brlt	.-18     	; 0x2cc <lcd_data_print+0x24>
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	08 95       	ret

000002ec <lcd_cmd_t>:
     2ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
     2f0:	81 b3       	in	r24, 0x11	; 17
     2f2:	8e 7f       	andi	r24, 0xFE	; 254
     2f4:	81 bb       	out	0x11, r24	; 17
     2f6:	81 b3       	in	r24, 0x11	; 17
     2f8:	8d 7f       	andi	r24, 0xFD	; 253
     2fa:	81 bb       	out	0x11, r24	; 17
     2fc:	81 b3       	in	r24, 0x11	; 17
     2fe:	84 60       	ori	r24, 0x04	; 4
     300:	81 bb       	out	0x11, r24	; 17
     302:	83 ed       	ldi	r24, 0xD3	; 211
     304:	90 e3       	ldi	r25, 0x30	; 48
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd_cmd_t+0x1a>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_cmd_t+0x20>
     30c:	00 00       	nop
     30e:	81 b3       	in	r24, 0x11	; 17
     310:	8b 7f       	andi	r24, 0xFB	; 251
     312:	81 bb       	out	0x11, r24	; 17
     314:	08 95       	ret

00000316 <lcd_data_t>:
     316:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
     31a:	81 b3       	in	r24, 0x11	; 17
     31c:	81 60       	ori	r24, 0x01	; 1
     31e:	81 bb       	out	0x11, r24	; 17
     320:	81 b3       	in	r24, 0x11	; 17
     322:	8d 7f       	andi	r24, 0xFD	; 253
     324:	81 bb       	out	0x11, r24	; 17
     326:	81 b3       	in	r24, 0x11	; 17
     328:	84 60       	ori	r24, 0x04	; 4
     32a:	81 bb       	out	0x11, r24	; 17
     32c:	83 ed       	ldi	r24, 0xD3	; 211
     32e:	90 e3       	ldi	r25, 0x30	; 48
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_data_t+0x1a>
     334:	00 c0       	rjmp	.+0      	; 0x336 <lcd_data_t+0x20>
     336:	00 00       	nop
     338:	81 b3       	in	r24, 0x11	; 17
     33a:	8b 7f       	andi	r24, 0xFB	; 251
     33c:	81 bb       	out	0x11, r24	; 17
     33e:	08 95       	ret

00000340 <lcd_init_tourist>:
     340:	88 e3       	ldi	r24, 0x38	; 56
     342:	d4 df       	rcall	.-88     	; 0x2ec <lcd_cmd_t>
     344:	8c e0       	ldi	r24, 0x0C	; 12
     346:	d2 df       	rcall	.-92     	; 0x2ec <lcd_cmd_t>
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	d0 df       	rcall	.-96     	; 0x2ec <lcd_cmd_t>
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	ce cf       	rjmp	.-100    	; 0x2ec <lcd_cmd_t>
     350:	08 95       	ret

00000352 <lcd_data_print_t>:
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	7c 01       	movw	r14, r24
     360:	fc 01       	movw	r30, r24
     362:	01 90       	ld	r0, Z+
     364:	00 20       	and	r0, r0
     366:	e9 f7       	brne	.-6      	; 0x362 <lcd_data_print_t+0x10>
     368:	31 97       	sbiw	r30, 0x01	; 1
     36a:	8f 01       	movw	r16, r30
     36c:	08 1b       	sub	r16, r24
     36e:	19 0b       	sbc	r17, r25
     370:	c0 e0       	ldi	r28, 0x00	; 0
     372:	d0 e0       	ldi	r29, 0x00	; 0
     374:	06 c0       	rjmp	.+12     	; 0x382 <lcd_data_print_t+0x30>
     376:	f7 01       	movw	r30, r14
     378:	ec 0f       	add	r30, r28
     37a:	fd 1f       	adc	r31, r29
     37c:	80 81       	ld	r24, Z
     37e:	cb df       	rcall	.-106    	; 0x316 <lcd_data_t>
     380:	21 96       	adiw	r28, 0x01	; 1
     382:	c0 17       	cp	r28, r16
     384:	d1 07       	cpc	r29, r17
     386:	bc f3       	brlt	.-18     	; 0x376 <lcd_data_print_t+0x24>
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	08 95       	ret

00000396 <keypad_fun_t>:
     396:	8e ef       	ldi	r24, 0xFE	; 254
     398:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
     39c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     3a0:	84 ff       	sbrs	r24, 4
     3a2:	48 c0       	rjmp	.+144    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     3a8:	85 ff       	sbrs	r24, 5
     3aa:	47 c0       	rjmp	.+142    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3ac:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     3b0:	86 ff       	sbrs	r24, 6
     3b2:	46 c0       	rjmp	.+140    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3b4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     3b8:	88 23       	and	r24, r24
     3ba:	0c f0       	brlt	.+2      	; 0x3be <keypad_fun_t+0x28>
     3bc:	44 c0       	rjmp	.+136    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     3be:	83 ed       	ldi	r24, 0xD3	; 211
     3c0:	90 e3       	ldi	r25, 0x30	; 48
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <keypad_fun_t+0x2c>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <keypad_fun_t+0x32>
     3c8:	00 00       	nop
     3ca:	8d ef       	ldi	r24, 0xFD	; 253
     3cc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
     3d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     3d4:	84 ff       	sbrs	r24, 4
     3d6:	3a c0       	rjmp	.+116    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     3d8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     3dc:	85 ff       	sbrs	r24, 5
     3de:	39 c0       	rjmp	.+114    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     3e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     3e4:	86 ff       	sbrs	r24, 6
     3e6:	38 c0       	rjmp	.+112    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     3e8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     3ec:	88 23       	and	r24, r24
     3ee:	bc f5       	brge	.+110    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     3f0:	83 ed       	ldi	r24, 0xD3	; 211
     3f2:	90 e3       	ldi	r25, 0x30	; 48
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <keypad_fun_t+0x5e>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <keypad_fun_t+0x64>
     3fa:	00 00       	nop
     3fc:	8b ef       	ldi	r24, 0xFB	; 251
     3fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
     402:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     406:	84 ff       	sbrs	r24, 4
     408:	2d c0       	rjmp	.+90     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     40a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     40e:	85 ff       	sbrs	r24, 5
     410:	2c c0       	rjmp	.+88     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     412:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     416:	86 ff       	sbrs	r24, 6
     418:	2b c0       	rjmp	.+86     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     41a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
     41e:	88 23       	and	r24, r24
     420:	54 f5       	brge	.+84     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     422:	83 ed       	ldi	r24, 0xD3	; 211
     424:	90 e3       	ldi	r25, 0x30	; 48
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
     42e:	88 ec       	ldi	r24, 0xC8	; 200
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	08 95       	ret
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	08 95       	ret
     43a:	84 e0       	ldi	r24, 0x04	; 4
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	08 95       	ret
     440:	87 e0       	ldi	r24, 0x07	; 7
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	08 95       	ret
     446:	84 e6       	ldi	r24, 0x64	; 100
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	08 95       	ret
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	08 95       	ret
     452:	85 e0       	ldi	r24, 0x05	; 5
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	08 95       	ret
     458:	88 e0       	ldi	r24, 0x08	; 8
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	08 95       	ret
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	08 95       	ret
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	08 95       	ret
     46a:	86 e0       	ldi	r24, 0x06	; 6
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	08 95       	ret
     470:	89 e0       	ldi	r24, 0x09	; 9
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	08 95       	ret
     476:	83 e6       	ldi	r24, 0x63	; 99
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	08 95       	ret

0000047c <countStoredRows>:
     47c:	bc 01       	movw	r22, r24
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0f c0       	rjmp	.+30     	; 0x4a6 <countStoredRows+0x2a>
     488:	f9 01       	movw	r30, r18
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	e2 0f       	add	r30, r18
     490:	f3 1f       	adc	r31, r19
     492:	ee 0f       	add	r30, r30
     494:	ff 1f       	adc	r31, r31
     496:	e6 0f       	add	r30, r22
     498:	f7 1f       	adc	r31, r23
     49a:	40 81       	ld	r20, Z
     49c:	44 23       	and	r20, r20
     49e:	31 f0       	breq	.+12     	; 0x4ac <countStoredRows+0x30>
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	2f 5f       	subi	r18, 0xFF	; 255
     4a4:	3f 4f       	sbci	r19, 0xFF	; 255
     4a6:	24 31       	cpi	r18, 0x14	; 20
     4a8:	31 05       	cpc	r19, r1
     4aa:	74 f3       	brlt	.-36     	; 0x488 <countStoredRows+0xc>
     4ac:	08 95       	ret

000004ae <USART_Init>:
     4ae:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     4b2:	83 e3       	ldi	r24, 0x33	; 51
     4b4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
     4b8:	88 e1       	ldi	r24, 0x18	; 24
     4ba:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     4be:	86 e0       	ldi	r24, 0x06	; 6
     4c0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
     4c4:	08 95       	ret

000004c6 <USART_Transmit>:
     4c6:	dc 01       	movw	r26, r24
     4c8:	fc 01       	movw	r30, r24
     4ca:	01 90       	ld	r0, Z+
     4cc:	00 20       	and	r0, r0
     4ce:	e9 f7       	brne	.-6      	; 0x4ca <USART_Transmit+0x4>
     4d0:	31 97       	sbiw	r30, 0x01	; 1
     4d2:	af 01       	movw	r20, r30
     4d4:	48 1b       	sub	r20, r24
     4d6:	59 0b       	sbc	r21, r25
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	0c c0       	rjmp	.+24     	; 0x4f6 <USART_Transmit+0x30>
     4de:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     4e2:	95 ff       	sbrs	r25, 5
     4e4:	fc cf       	rjmp	.-8      	; 0x4de <USART_Transmit+0x18>
     4e6:	fd 01       	movw	r30, r26
     4e8:	e2 0f       	add	r30, r18
     4ea:	f3 1f       	adc	r31, r19
     4ec:	90 81       	ld	r25, Z
     4ee:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     4f2:	2f 5f       	subi	r18, 0xFF	; 255
     4f4:	3f 4f       	sbci	r19, 0xFF	; 255
     4f6:	24 17       	cp	r18, r20
     4f8:	35 07       	cpc	r19, r21
     4fa:	8c f3       	brlt	.-30     	; 0x4de <USART_Transmit+0x18>
     4fc:	08 95       	ret

000004fe <USART_Transmitchar>:
     4fe:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     502:	95 ff       	sbrs	r25, 5
     504:	fc cf       	rjmp	.-8      	; 0x4fe <USART_Transmitchar>
     506:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     50a:	08 95       	ret

0000050c <USART_Receive>:
     50c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     510:	88 23       	and	r24, r24
     512:	e4 f7       	brge	.-8      	; 0x50c <USART_Receive>
     514:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     518:	08 95       	ret

0000051a <USART_ReceiveInt>:
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	2a 97       	sbiw	r28, 0x0a	; 10
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
     534:	e1 2c       	mov	r14, r1
     536:	f1 2c       	mov	r15, r1
     538:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     53c:	88 23       	and	r24, r24
     53e:	e4 f7       	brge	.-8      	; 0x538 <USART_ReceiveInt+0x1e>
     540:	10 91 ce 00 	lds	r17, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     544:	81 2f       	mov	r24, r17
     546:	db df       	rcall	.-74     	; 0x4fe <USART_Transmitchar>
     548:	1d 30       	cpi	r17, 0x0D	; 13
     54a:	11 f0       	breq	.+4      	; 0x550 <USART_ReceiveInt+0x36>
     54c:	1a 30       	cpi	r17, 0x0A	; 10
     54e:	61 f4       	brne	.+24     	; 0x568 <USART_ReceiveInt+0x4e>
     550:	e1 e0       	ldi	r30, 0x01	; 1
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	ec 0f       	add	r30, r28
     556:	fd 1f       	adc	r31, r29
     558:	ee 0d       	add	r30, r14
     55a:	ff 1d       	adc	r31, r15
     55c:	10 82       	st	Z, r1
     55e:	ce 01       	movw	r24, r28
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <atoi>
     566:	0b c0       	rjmp	.+22     	; 0x57e <USART_ReceiveInt+0x64>
     568:	e1 e0       	ldi	r30, 0x01	; 1
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	ec 0f       	add	r30, r28
     56e:	fd 1f       	adc	r31, r29
     570:	ee 0d       	add	r30, r14
     572:	ff 1d       	adc	r31, r15
     574:	10 83       	st	Z, r17
     576:	8f ef       	ldi	r24, 0xFF	; 255
     578:	e8 1a       	sub	r14, r24
     57a:	f8 0a       	sbc	r15, r24
     57c:	dd cf       	rjmp	.-70     	; 0x538 <USART_ReceiveInt+0x1e>
     57e:	2a 96       	adiw	r28, 0x0a	; 10
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	08 95       	ret

00000596 <exit_gate_registration>:
     596:	8f 92       	push	r8
     598:	9f 92       	push	r9
     59a:	af 92       	push	r10
     59c:	bf 92       	push	r11
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	27 97       	sbiw	r28, 0x07	; 7
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	48 e7       	ldi	r20, 0x78	; 120
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	64 e2       	ldi	r22, 0x24	; 36
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	84 e4       	ldi	r24, 0x44	; 68
     5c8:	9a e0       	ldi	r25, 0x0A	; 10
     5ca:	bb dd       	rcall	.-1162   	; 0x142 <read_data_from_eeprom>
     5cc:	42 e0       	ldi	r20, 0x02	; 2
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	64 e2       	ldi	r22, 0x24	; 36
     5d2:	71 e0       	ldi	r23, 0x01	; 1
     5d4:	82 e4       	ldi	r24, 0x42	; 66
     5d6:	9a e0       	ldi	r25, 0x0A	; 10
     5d8:	b4 dd       	rcall	.-1176   	; 0x142 <read_data_from_eeprom>
     5da:	42 e0       	ldi	r20, 0x02	; 2
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	68 e2       	ldi	r22, 0x28	; 40
     5e0:	71 e0       	ldi	r23, 0x01	; 1
     5e2:	80 e4       	ldi	r24, 0x40	; 64
     5e4:	9a e0       	ldi	r25, 0x0A	; 10
     5e6:	ad dd       	rcall	.-1190   	; 0x142 <read_data_from_eeprom>
     5e8:	42 e0       	ldi	r20, 0x02	; 2
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	6c e2       	ldi	r22, 0x2C	; 44
     5ee:	71 e0       	ldi	r23, 0x01	; 1
     5f0:	8e e3       	ldi	r24, 0x3E	; 62
     5f2:	9a e0       	ldi	r25, 0x0A	; 10
     5f4:	a6 dd       	rcall	.-1204   	; 0x142 <read_data_from_eeprom>
     5f6:	42 e0       	ldi	r20, 0x02	; 2
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	60 e3       	ldi	r22, 0x30	; 48
     5fc:	71 e0       	ldi	r23, 0x01	; 1
     5fe:	8c e3       	ldi	r24, 0x3C	; 60
     600:	9a e0       	ldi	r25, 0x0A	; 10
     602:	9f dd       	rcall	.-1218   	; 0x142 <read_data_from_eeprom>
     604:	42 e0       	ldi	r20, 0x02	; 2
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	64 e3       	ldi	r22, 0x34	; 52
     60a:	71 e0       	ldi	r23, 0x01	; 1
     60c:	8a e3       	ldi	r24, 0x3A	; 58
     60e:	9a e0       	ldi	r25, 0x0A	; 10
     610:	98 dd       	rcall	.-1232   	; 0x142 <read_data_from_eeprom>
     612:	85 e2       	ldi	r24, 0x25	; 37
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	57 df       	rcall	.-338    	; 0x4c6 <USART_Transmit>
     618:	81 e4       	ldi	r24, 0x41	; 65
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	54 df       	rcall	.-344    	; 0x4c6 <USART_Transmit>
     61e:	00 e0       	ldi	r16, 0x00	; 0
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	0b c0       	rjmp	.+22     	; 0x63a <exit_gate_registration+0xa4>
     624:	73 df       	rcall	.-282    	; 0x50c <USART_Receive>
     626:	e1 e0       	ldi	r30, 0x01	; 1
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	ec 0f       	add	r30, r28
     62c:	fd 1f       	adc	r31, r29
     62e:	e0 0f       	add	r30, r16
     630:	f1 1f       	adc	r31, r17
     632:	80 83       	st	Z, r24
     634:	64 df       	rcall	.-312    	; 0x4fe <USART_Transmitchar>
     636:	0f 5f       	subi	r16, 0xFF	; 255
     638:	1f 4f       	sbci	r17, 0xFF	; 255
     63a:	06 30       	cpi	r16, 0x06	; 6
     63c:	11 05       	cpc	r17, r1
     63e:	94 f3       	brlt	.-28     	; 0x624 <exit_gate_registration+0x8e>
     640:	1f 82       	std	Y+7, r1	; 0x07
     642:	84 e5       	ldi	r24, 0x54	; 84
     644:	98 e0       	ldi	r25, 0x08	; 8
     646:	3f df       	rcall	.-386    	; 0x4c6 <USART_Transmit>
     648:	00 e0       	ldi	r16, 0x00	; 0
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	12 c0       	rjmp	.+36     	; 0x672 <exit_gate_registration+0xdc>
     64e:	c8 01       	movw	r24, r16
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	80 0f       	add	r24, r16
     656:	91 1f       	adc	r25, r17
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	be 01       	movw	r22, r28
     65e:	6f 5f       	subi	r22, 0xFF	; 255
     660:	7f 4f       	sbci	r23, 0xFF	; 255
     662:	8c 5b       	subi	r24, 0xBC	; 188
     664:	95 4f       	sbci	r25, 0xF5	; 245
     666:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <strcmp>
     66a:	89 2b       	or	r24, r25
     66c:	59 f0       	breq	.+22     	; 0x684 <exit_gate_registration+0xee>
     66e:	0f 5f       	subi	r16, 0xFF	; 255
     670:	1f 4f       	sbci	r17, 0xFF	; 255
     672:	80 91 3a 0a 	lds	r24, 0x0A3A	; 0x800a3a <num_vehicles_in_park>
     676:	90 91 3b 0a 	lds	r25, 0x0A3B	; 0x800a3b <num_vehicles_in_park+0x1>
     67a:	08 17       	cp	r16, r24
     67c:	19 07       	cpc	r17, r25
     67e:	3c f3       	brlt	.-50     	; 0x64e <exit_gate_registration+0xb8>
     680:	0f ef       	ldi	r16, 0xFF	; 255
     682:	1f ef       	ldi	r17, 0xFF	; 255
     684:	0f 3f       	cpi	r16, 0xFF	; 255
     686:	2f ef       	ldi	r18, 0xFF	; 255
     688:	12 07       	cpc	r17, r18
     68a:	09 f4       	brne	.+2      	; 0x68e <exit_gate_registration+0xf8>
     68c:	f0 c0       	rjmp	.+480    	; 0x86e <exit_gate_registration+0x2d8>
     68e:	80 e5       	ldi	r24, 0x50	; 80
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	19 df       	rcall	.-462    	; 0x4c6 <USART_Transmit>
     694:	84 e5       	ldi	r24, 0x54	; 84
     696:	98 e0       	ldi	r25, 0x08	; 8
     698:	16 df       	rcall	.-468    	; 0x4c6 <USART_Transmit>
     69a:	8b e6       	ldi	r24, 0x6B	; 107
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	13 df       	rcall	.-474    	; 0x4c6 <USART_Transmit>
     6a0:	3c df       	rcall	.-392    	; 0x51a <USART_ReceiveInt>
     6a2:	7c 01       	movw	r14, r24
     6a4:	80 e8       	ldi	r24, 0x80	; 128
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	0e df       	rcall	.-484    	; 0x4c6 <USART_Transmit>
     6aa:	37 df       	rcall	.-402    	; 0x51a <USART_ReceiveInt>
     6ac:	80 90 3e 0a 	lds	r8, 0x0A3E	; 0x800a3e <num_adults_in_park>
     6b0:	90 90 3f 0a 	lds	r9, 0x0A3F	; 0x800a3f <num_adults_in_park+0x1>
     6b4:	88 1a       	sub	r8, r24
     6b6:	99 0a       	sbc	r9, r25
     6b8:	90 92 3f 0a 	sts	0x0A3F, r9	; 0x800a3f <num_adults_in_park+0x1>
     6bc:	80 92 3e 0a 	sts	0x0A3E, r8	; 0x800a3e <num_adults_in_park>
     6c0:	a0 90 40 0a 	lds	r10, 0x0A40	; 0x800a40 <num_children_in_park>
     6c4:	b0 90 41 0a 	lds	r11, 0x0A41	; 0x800a41 <num_children_in_park+0x1>
     6c8:	ae 18       	sub	r10, r14
     6ca:	bf 08       	sbc	r11, r15
     6cc:	b0 92 41 0a 	sts	0x0A41, r11	; 0x800a41 <num_children_in_park+0x1>
     6d0:	a0 92 40 0a 	sts	0x0A40, r10	; 0x800a40 <num_children_in_park>
     6d4:	8e 0d       	add	r24, r14
     6d6:	9f 1d       	adc	r25, r15
     6d8:	20 91 42 0a 	lds	r18, 0x0A42	; 0x800a42 <touristsInPark>
     6dc:	30 91 43 0a 	lds	r19, 0x0A43	; 0x800a43 <touristsInPark+0x1>
     6e0:	a9 01       	movw	r20, r18
     6e2:	48 1b       	sub	r20, r24
     6e4:	59 0b       	sbc	r21, r25
     6e6:	50 93 43 0a 	sts	0x0A43, r21	; 0x800a43 <touristsInPark+0x1>
     6ea:	40 93 42 0a 	sts	0x0A42, r20	; 0x800a42 <touristsInPark>
     6ee:	80 91 3c 0a 	lds	r24, 0x0A3C	; 0x800a3c <num_drivers_in_park>
     6f2:	90 91 3d 0a 	lds	r25, 0x0A3D	; 0x800a3d <num_drivers_in_park+0x1>
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	90 93 3d 0a 	sts	0x0A3D, r25	; 0x800a3d <num_drivers_in_park+0x1>
     6fc:	80 93 3c 0a 	sts	0x0A3C, r24	; 0x800a3c <num_drivers_in_park>
     700:	c0 90 3a 0a 	lds	r12, 0x0A3A	; 0x800a3a <num_vehicles_in_park>
     704:	d0 90 3b 0a 	lds	r13, 0x0A3B	; 0x800a3b <num_vehicles_in_park+0x1>
     708:	51 e0       	ldi	r21, 0x01	; 1
     70a:	c5 1a       	sub	r12, r21
     70c:	d1 08       	sbc	r13, r1
     70e:	d0 92 3b 0a 	sts	0x0A3B, r13	; 0x800a3b <num_vehicles_in_park+0x1>
     712:	c0 92 3a 0a 	sts	0x0A3A, r12	; 0x800a3a <num_vehicles_in_park>
     716:	98 01       	movw	r18, r16
     718:	19 c0       	rjmp	.+50     	; 0x74c <exit_gate_registration+0x1b6>
     71a:	79 01       	movw	r14, r18
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	e8 1a       	sub	r14, r24
     720:	f8 0a       	sbc	r15, r24
     722:	b7 01       	movw	r22, r14
     724:	66 0f       	add	r22, r22
     726:	77 1f       	adc	r23, r23
     728:	6e 0d       	add	r22, r14
     72a:	7f 1d       	adc	r23, r15
     72c:	66 0f       	add	r22, r22
     72e:	77 1f       	adc	r23, r23
     730:	6c 5b       	subi	r22, 0xBC	; 188
     732:	75 4f       	sbci	r23, 0xF5	; 245
     734:	c9 01       	movw	r24, r18
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	82 0f       	add	r24, r18
     73c:	93 1f       	adc	r25, r19
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	8c 5b       	subi	r24, 0xBC	; 188
     744:	95 4f       	sbci	r25, 0xF5	; 245
     746:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <strcpy>
     74a:	97 01       	movw	r18, r14
     74c:	76 01       	movw	r14, r12
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	e9 1a       	sub	r14, r25
     752:	f1 08       	sbc	r15, r1
     754:	2e 15       	cp	r18, r14
     756:	3f 05       	cpc	r19, r15
     758:	04 f3       	brlt	.-64     	; 0x71a <exit_gate_registration+0x184>
     75a:	67 01       	movw	r12, r14
     75c:	cc 0c       	add	r12, r12
     75e:	dd 1c       	adc	r13, r13
     760:	ce 0c       	add	r12, r14
     762:	df 1c       	adc	r13, r15
     764:	c6 01       	movw	r24, r12
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	fc 01       	movw	r30, r24
     76c:	ec 5b       	subi	r30, 0xBC	; 188
     76e:	f5 4f       	sbci	r31, 0xF5	; 245
     770:	6f 01       	movw	r12, r30
     772:	10 82       	st	Z, r1
     774:	ab 28       	or	r10, r11
     776:	09 f0       	breq	.+2      	; 0x77a <exit_gate_registration+0x1e4>
     778:	7d c0       	rjmp	.+250    	; 0x874 <exit_gate_registration+0x2de>
     77a:	89 28       	or	r8, r9
     77c:	d1 f0       	breq	.+52     	; 0x7b2 <exit_gate_registration+0x21c>
     77e:	7a c0       	rjmp	.+244    	; 0x874 <exit_gate_registration+0x2de>
     780:	58 01       	movw	r10, r16
     782:	ff ef       	ldi	r31, 0xFF	; 255
     784:	af 1a       	sub	r10, r31
     786:	bf 0a       	sbc	r11, r31
     788:	b5 01       	movw	r22, r10
     78a:	66 0f       	add	r22, r22
     78c:	77 1f       	adc	r23, r23
     78e:	6a 0d       	add	r22, r10
     790:	7b 1d       	adc	r23, r11
     792:	66 0f       	add	r22, r22
     794:	77 1f       	adc	r23, r23
     796:	6c 5b       	subi	r22, 0xBC	; 188
     798:	75 4f       	sbci	r23, 0xF5	; 245
     79a:	c8 01       	movw	r24, r16
     79c:	88 0f       	add	r24, r24
     79e:	99 1f       	adc	r25, r25
     7a0:	80 0f       	add	r24, r16
     7a2:	91 1f       	adc	r25, r17
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	8c 5b       	subi	r24, 0xBC	; 188
     7aa:	95 4f       	sbci	r25, 0xF5	; 245
     7ac:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <strcpy>
     7b0:	85 01       	movw	r16, r10
     7b2:	0e 15       	cp	r16, r14
     7b4:	1f 05       	cpc	r17, r15
     7b6:	24 f3       	brlt	.-56     	; 0x780 <exit_gate_registration+0x1ea>
     7b8:	f6 01       	movw	r30, r12
     7ba:	10 82       	st	Z, r1
     7bc:	f0 92 3b 0a 	sts	0x0A3B, r15	; 0x800a3b <num_vehicles_in_park+0x1>
     7c0:	e0 92 3a 0a 	sts	0x0A3A, r14	; 0x800a3a <num_vehicles_in_park>
     7c4:	48 e7       	ldi	r20, 0x78	; 120
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	64 e2       	ldi	r22, 0x24	; 36
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	84 e4       	ldi	r24, 0x44	; 68
     7ce:	9a e0       	ldi	r25, 0x0A	; 10
     7d0:	b5 dc       	rcall	.-1686   	; 0x13c <write_data_to_eeprom>
     7d2:	42 e0       	ldi	r20, 0x02	; 2
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	64 e2       	ldi	r22, 0x24	; 36
     7d8:	71 e0       	ldi	r23, 0x01	; 1
     7da:	82 e4       	ldi	r24, 0x42	; 66
     7dc:	9a e0       	ldi	r25, 0x0A	; 10
     7de:	ae dc       	rcall	.-1700   	; 0x13c <write_data_to_eeprom>
     7e0:	42 e0       	ldi	r20, 0x02	; 2
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	68 e2       	ldi	r22, 0x28	; 40
     7e6:	71 e0       	ldi	r23, 0x01	; 1
     7e8:	80 e4       	ldi	r24, 0x40	; 64
     7ea:	9a e0       	ldi	r25, 0x0A	; 10
     7ec:	a7 dc       	rcall	.-1714   	; 0x13c <write_data_to_eeprom>
     7ee:	42 e0       	ldi	r20, 0x02	; 2
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	6c e2       	ldi	r22, 0x2C	; 44
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	8e e3       	ldi	r24, 0x3E	; 62
     7f8:	9a e0       	ldi	r25, 0x0A	; 10
     7fa:	a0 dc       	rcall	.-1728   	; 0x13c <write_data_to_eeprom>
     7fc:	42 e0       	ldi	r20, 0x02	; 2
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	60 e3       	ldi	r22, 0x30	; 48
     802:	71 e0       	ldi	r23, 0x01	; 1
     804:	8c e3       	ldi	r24, 0x3C	; 60
     806:	9a e0       	ldi	r25, 0x0A	; 10
     808:	99 dc       	rcall	.-1742   	; 0x13c <write_data_to_eeprom>
     80a:	42 e0       	ldi	r20, 0x02	; 2
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	64 e3       	ldi	r22, 0x34	; 52
     810:	71 e0       	ldi	r23, 0x01	; 1
     812:	8a e3       	ldi	r24, 0x3A	; 58
     814:	9a e0       	ldi	r25, 0x0A	; 10
     816:	92 dc       	rcall	.-1756   	; 0x13c <write_data_to_eeprom>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	15 dd       	rcall	.-1494   	; 0x246 <lcd_cmd>
     81c:	80 e8       	ldi	r24, 0x80	; 128
     81e:	13 dd       	rcall	.-1498   	; 0x246 <lcd_cmd>
     820:	81 e9       	ldi	r24, 0x91	; 145
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	41 dd       	rcall	.-1406   	; 0x2a8 <lcd_data_print>
     826:	80 ec       	ldi	r24, 0xC0	; 192
     828:	0e dd       	rcall	.-1508   	; 0x246 <lcd_cmd>
     82a:	86 ea       	ldi	r24, 0xA6	; 166
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	3c dd       	rcall	.-1416   	; 0x2a8 <lcd_data_print>
     830:	84 e9       	ldi	r24, 0x94	; 148
     832:	09 dd       	rcall	.-1518   	; 0x246 <lcd_cmd>
     834:	85 eb       	ldi	r24, 0xB5	; 181
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	37 dd       	rcall	.-1426   	; 0x2a8 <lcd_data_print>
     83a:	ff eb       	ldi	r31, 0xBF	; 191
     83c:	27 e2       	ldi	r18, 0x27	; 39
     83e:	39 e0       	ldi	r19, 0x09	; 9
     840:	f1 50       	subi	r31, 0x01	; 1
     842:	20 40       	sbci	r18, 0x00	; 0
     844:	30 40       	sbci	r19, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <exit_gate_registration+0x2aa>
     848:	00 c0       	rjmp	.+0      	; 0x84a <exit_gate_registration+0x2b4>
     84a:	00 00       	nop
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	fb dc       	rcall	.-1546   	; 0x246 <lcd_cmd>
     850:	80 ec       	ldi	r24, 0xC0	; 192
     852:	f9 dc       	rcall	.-1550   	; 0x246 <lcd_cmd>
     854:	83 ec       	ldi	r24, 0xC3	; 195
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	27 dd       	rcall	.-1458   	; 0x2a8 <lcd_data_print>
     85a:	4f e7       	ldi	r20, 0x7F	; 127
     85c:	5a e1       	ldi	r21, 0x1A	; 26
     85e:	86 e0       	ldi	r24, 0x06	; 6
     860:	41 50       	subi	r20, 0x01	; 1
     862:	50 40       	sbci	r21, 0x00	; 0
     864:	80 40       	sbci	r24, 0x00	; 0
     866:	e1 f7       	brne	.-8      	; 0x860 <exit_gate_registration+0x2ca>
     868:	00 c0       	rjmp	.+0      	; 0x86a <exit_gate_registration+0x2d4>
     86a:	00 00       	nop
     86c:	03 c0       	rjmp	.+6      	; 0x874 <exit_gate_registration+0x2de>
     86e:	83 ed       	ldi	r24, 0xD3	; 211
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	29 de       	rcall	.-942    	; 0x4c6 <USART_Transmit>
     874:	48 e7       	ldi	r20, 0x78	; 120
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	64 e2       	ldi	r22, 0x24	; 36
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	84 e4       	ldi	r24, 0x44	; 68
     87e:	9a e0       	ldi	r25, 0x0A	; 10
     880:	5d dc       	rcall	.-1862   	; 0x13c <write_data_to_eeprom>
     882:	42 e0       	ldi	r20, 0x02	; 2
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	64 e2       	ldi	r22, 0x24	; 36
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	82 e4       	ldi	r24, 0x42	; 66
     88c:	9a e0       	ldi	r25, 0x0A	; 10
     88e:	56 dc       	rcall	.-1876   	; 0x13c <write_data_to_eeprom>
     890:	42 e0       	ldi	r20, 0x02	; 2
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	68 e2       	ldi	r22, 0x28	; 40
     896:	71 e0       	ldi	r23, 0x01	; 1
     898:	80 e4       	ldi	r24, 0x40	; 64
     89a:	9a e0       	ldi	r25, 0x0A	; 10
     89c:	4f dc       	rcall	.-1890   	; 0x13c <write_data_to_eeprom>
     89e:	42 e0       	ldi	r20, 0x02	; 2
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	6c e2       	ldi	r22, 0x2C	; 44
     8a4:	71 e0       	ldi	r23, 0x01	; 1
     8a6:	8e e3       	ldi	r24, 0x3E	; 62
     8a8:	9a e0       	ldi	r25, 0x0A	; 10
     8aa:	48 dc       	rcall	.-1904   	; 0x13c <write_data_to_eeprom>
     8ac:	42 e0       	ldi	r20, 0x02	; 2
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e3       	ldi	r22, 0x30	; 48
     8b2:	71 e0       	ldi	r23, 0x01	; 1
     8b4:	8c e3       	ldi	r24, 0x3C	; 60
     8b6:	9a e0       	ldi	r25, 0x0A	; 10
     8b8:	41 dc       	rcall	.-1918   	; 0x13c <write_data_to_eeprom>
     8ba:	42 e0       	ldi	r20, 0x02	; 2
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	64 e3       	ldi	r22, 0x34	; 52
     8c0:	71 e0       	ldi	r23, 0x01	; 1
     8c2:	8a e3       	ldi	r24, 0x3A	; 58
     8c4:	9a e0       	ldi	r25, 0x0A	; 10
     8c6:	3a dc       	rcall	.-1932   	; 0x13c <write_data_to_eeprom>
     8c8:	27 96       	adiw	r28, 0x07	; 7
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	cf 90       	pop	r12
     8e4:	bf 90       	pop	r11
     8e6:	af 90       	pop	r10
     8e8:	9f 90       	pop	r9
     8ea:	8f 90       	pop	r8
     8ec:	08 95       	ret

000008ee <registerCar_serial>:


void registerCar_serial() {
     8ee:	cf 92       	push	r12
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
	
	//RETRIEVING VALUES FROM EEPROM
	read_data_from_eeprom( &childFee,CHILD_FEE_ADDRESS, sizeof(childFee));
     8fe:	44 e0       	ldi	r20, 0x04	; 4
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	81 e2       	ldi	r24, 0x21	; 33
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	1b dc       	rcall	.-1994   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &adultFee,ADULT_FEE_ADDRESS, sizeof(adultFee));
     90c:	44 e0       	ldi	r20, 0x04	; 4
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	64 e0       	ldi	r22, 0x04	; 4
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	8d e1       	ldi	r24, 0x1D	; 29
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	14 dc       	rcall	.-2008   	; 0x142 <read_data_from_eeprom>
	
	read_data_from_eeprom( numberplate,NUMBERPLATE_ADDRESS, sizeof(numberplate));
     91a:	48 e7       	ldi	r20, 0x78	; 120
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	64 e2       	ldi	r22, 0x24	; 36
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	84 e4       	ldi	r24, 0x44	; 68
     924:	9a e0       	ldi	r25, 0x0A	; 10
     926:	0d dc       	rcall	.-2022   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &touristsInPark,TOURISTS_IN_PARK_ADDRESS, sizeof(touristsInPark));
     928:	42 e0       	ldi	r20, 0x02	; 2
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	64 e2       	ldi	r22, 0x24	; 36
     92e:	71 e0       	ldi	r23, 0x01	; 1
     930:	82 e4       	ldi	r24, 0x42	; 66
     932:	9a e0       	ldi	r25, 0x0A	; 10
     934:	06 dc       	rcall	.-2036   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &num_children_in_park,NUM_CHILDREN_IN_PARK_ADDRESS, sizeof(num_children_in_park));
     936:	42 e0       	ldi	r20, 0x02	; 2
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	68 e2       	ldi	r22, 0x28	; 40
     93c:	71 e0       	ldi	r23, 0x01	; 1
     93e:	80 e4       	ldi	r24, 0x40	; 64
     940:	9a e0       	ldi	r25, 0x0A	; 10
     942:	ff db       	rcall	.-2050   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &num_adults_in_park,NUM_ADULTS_IN_PARK_ADDRESS, sizeof(num_adults_in_park));
     944:	42 e0       	ldi	r20, 0x02	; 2
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	6c e2       	ldi	r22, 0x2C	; 44
     94a:	71 e0       	ldi	r23, 0x01	; 1
     94c:	8e e3       	ldi	r24, 0x3E	; 62
     94e:	9a e0       	ldi	r25, 0x0A	; 10
     950:	f8 db       	rcall	.-2064   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &num_drivers_in_park,NUM_DRIVERS_IN_PARK_ADDRESS, sizeof(num_drivers_in_park));
     952:	42 e0       	ldi	r20, 0x02	; 2
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	60 e3       	ldi	r22, 0x30	; 48
     958:	71 e0       	ldi	r23, 0x01	; 1
     95a:	8c e3       	ldi	r24, 0x3C	; 60
     95c:	9a e0       	ldi	r25, 0x0A	; 10
     95e:	f1 db       	rcall	.-2078   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &num_vehicles_in_park,NUM_VEHICLES_IN_PARK_ADDRESS, sizeof(num_vehicles_in_park));
     960:	42 e0       	ldi	r20, 0x02	; 2
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	64 e3       	ldi	r22, 0x34	; 52
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	8a e3       	ldi	r24, 0x3A	; 58
     96a:	9a e0       	ldi	r25, 0x0A	; 10
     96c:	ea db       	rcall	.-2092   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &entrance_fee_collected,ENTRANCE_FEE_COLLECTED_ADDRESS, sizeof(entrance_fee_collected));
     96e:	44 e0       	ldi	r20, 0x04	; 4
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	68 e6       	ldi	r22, 0x68	; 104
     974:	71 e0       	ldi	r23, 0x01	; 1
     976:	8c e2       	ldi	r24, 0x2C	; 44
     978:	9a e0       	ldi	r25, 0x0A	; 10
     97a:	e3 db       	rcall	.-2106   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &total_money_collected,TOTAL_MONEY_COLLECTED_ADDRESS, sizeof(total_money_collected));
     97c:	44 e0       	ldi	r20, 0x04	; 4
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	60 e4       	ldi	r22, 0x40	; 64
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	84 e3       	ldi	r24, 0x34	; 52
     986:	9a e0       	ldi	r25, 0x0A	; 10
	
	
	// Implement code to prompt the attendant to enter car details
	USART_Transmit("                   INCOMING CAR REGISTRATION \r\n");
     988:	dc db       	rcall	.-2120   	; 0x142 <read_data_from_eeprom>
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	93 e0       	ldi	r25, 0x03	; 3
	USART_Transmit("NumberPlate: \r\n");
     98e:	9b dd       	rcall	.-1226   	; 0x4c6 <USART_Transmit>
     990:	82 e3       	ldi	r24, 0x32	; 50
     992:	93 e0       	ldi	r25, 0x03	; 3
     994:	98 dd       	rcall	.-1232   	; 0x4c6 <USART_Transmit>

	
	int plateSize=countStoredRows(numberplate);
     996:	84 e4       	ldi	r24, 0x44	; 68
     998:	9a e0       	ldi	r25, 0x0A	; 10
     99a:	70 dd       	rcall	.-1312   	; 0x47c <countStoredRows>
     99c:	8c 01       	movw	r16, r24
     99e:	c0 e0       	ldi	r28, 0x00	; 0
	//int n_plate[5];
	char plate;
	for (int n=0; n<6; n++){
     9a0:	d0 e0       	ldi	r29, 0x00	; 0
     9a2:	0f c0       	rjmp	.+30     	; 0x9c2 <registerCar_serial+0xd4>
     9a4:	b3 dd       	rcall	.-1178   	; 0x50c <USART_Receive>
		plate=USART_Receive();
     9a6:	f8 01       	movw	r30, r16
		numberplate[plateSize][n]=plate;
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	e0 0f       	add	r30, r16
     9ae:	f1 1f       	adc	r31, r17
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	ec 5b       	subi	r30, 0xBC	; 188
     9b6:	f5 4f       	sbci	r31, 0xF5	; 245
     9b8:	ec 0f       	add	r30, r28
		
		USART_Transmitchar( plate );
     9ba:	fd 1f       	adc	r31, r29

	
	int plateSize=countStoredRows(numberplate);
	//int n_plate[5];
	char plate;
	for (int n=0; n<6; n++){
     9bc:	80 83       	st	Z, r24
     9be:	9f dd       	rcall	.-1218   	; 0x4fe <USART_Transmitchar>
     9c0:	21 96       	adiw	r28, 0x01	; 1
		numberplate[plateSize][n]=plate;
		
		USART_Transmitchar( plate );
			
	}
	USART_Transmit("\r\n");
     9c2:	c6 30       	cpi	r28, 0x06	; 6
     9c4:	d1 05       	cpc	r29, r1
     9c6:	74 f3       	brlt	.-36     	; 0x9a4 <registerCar_serial+0xb6>
     9c8:	84 e5       	ldi	r24, 0x54	; 84
	
	USART_Transmit("10 years and below: ");
     9ca:	98 e0       	ldi	r25, 0x08	; 8
     9cc:	7c dd       	rcall	.-1288   	; 0x4c6 <USART_Transmit>
     9ce:	8b e6       	ldi	r24, 0x6B	; 107
     9d0:	92 e0       	ldi	r25, 0x02	; 2
	int children = USART_ReceiveInt();
     9d2:	79 dd       	rcall	.-1294   	; 0x4c6 <USART_Transmit>
     9d4:	a2 dd       	rcall	.-1212   	; 0x51a <USART_ReceiveInt>
     9d6:	ec 01       	movw	r28, r24
	
	USART_Transmit("Above 10 years: ");
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	74 dd       	rcall	.-1304   	; 0x4c6 <USART_Transmit>
     9de:	9d dd       	rcall	.-1222   	; 0x51a <USART_ReceiveInt>
	int adults = USART_ReceiveInt();
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <childFee>
	
	//PERFORMING CALCULATIONS
	uint32_t children_money = childFee * children;
     9e6:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <childFee+0x1>
     9ea:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <childFee+0x2>
     9ee:	50 91 24 02 	lds	r21, 0x0224	; 0x800224 <childFee+0x3>
     9f2:	de 01       	movw	r26, r28
     9f4:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulshisi3>
     9f8:	6b 01       	movw	r12, r22
     9fa:	7c 01       	movw	r14, r24
     9fc:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <adultFee>
	uint32_t adults_money = adultFee * adults;
     a00:	30 91 1e 02 	lds	r19, 0x021E	; 0x80021e <adultFee+0x1>
     a04:	40 91 1f 02 	lds	r20, 0x021F	; 0x80021f <adultFee+0x2>
     a08:	50 91 20 02 	lds	r21, 0x0220	; 0x800220 <adultFee+0x3>
     a0c:	df 01       	movw	r26, r30
     a0e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulshisi3>
     a12:	dc 01       	movw	r26, r24
     a14:	cb 01       	movw	r24, r22
	uint32_t total_cash = children_money + adults_money;
     a16:	8c 0d       	add	r24, r12
     a18:	9d 1d       	adc	r25, r13
     a1a:	ae 1d       	adc	r26, r14
     a1c:	bf 1d       	adc	r27, r15
     a1e:	9e 01       	movw	r18, r28
     a20:	2e 0f       	add	r18, r30
	
	touristsInPark += children + adults;
     a22:	3f 1f       	adc	r19, r31
     a24:	40 91 42 0a 	lds	r20, 0x0A42	; 0x800a42 <touristsInPark>
     a28:	50 91 43 0a 	lds	r21, 0x0A43	; 0x800a43 <touristsInPark+0x1>
     a2c:	24 0f       	add	r18, r20
     a2e:	35 1f       	adc	r19, r21
     a30:	30 93 43 0a 	sts	0x0A43, r19	; 0x800a43 <touristsInPark+0x1>
     a34:	20 93 42 0a 	sts	0x0A42, r18	; 0x800a42 <touristsInPark>
     a38:	20 91 40 0a 	lds	r18, 0x0A40	; 0x800a40 <num_children_in_park>
	num_children_in_park += children;
     a3c:	30 91 41 0a 	lds	r19, 0x0A41	; 0x800a41 <num_children_in_park+0x1>
     a40:	c2 0f       	add	r28, r18
     a42:	d3 1f       	adc	r29, r19
     a44:	d0 93 41 0a 	sts	0x0A41, r29	; 0x800a41 <num_children_in_park+0x1>
     a48:	c0 93 40 0a 	sts	0x0A40, r28	; 0x800a40 <num_children_in_park>
     a4c:	20 91 3e 0a 	lds	r18, 0x0A3E	; 0x800a3e <num_adults_in_park>
	num_adults_in_park += adults;
     a50:	30 91 3f 0a 	lds	r19, 0x0A3F	; 0x800a3f <num_adults_in_park+0x1>
     a54:	e2 0f       	add	r30, r18
     a56:	f3 1f       	adc	r31, r19
     a58:	f0 93 3f 0a 	sts	0x0A3F, r31	; 0x800a3f <num_adults_in_park+0x1>
     a5c:	e0 93 3e 0a 	sts	0x0A3E, r30	; 0x800a3e <num_adults_in_park>
     a60:	20 91 3c 0a 	lds	r18, 0x0A3C	; 0x800a3c <num_drivers_in_park>
	num_drivers_in_park += 1;
     a64:	30 91 3d 0a 	lds	r19, 0x0A3D	; 0x800a3d <num_drivers_in_park+0x1>
     a68:	2f 5f       	subi	r18, 0xFF	; 255
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	30 93 3d 0a 	sts	0x0A3D, r19	; 0x800a3d <num_drivers_in_park+0x1>
     a70:	20 93 3c 0a 	sts	0x0A3C, r18	; 0x800a3c <num_drivers_in_park>
     a74:	20 91 3a 0a 	lds	r18, 0x0A3A	; 0x800a3a <num_vehicles_in_park>
	num_vehicles_in_park += 1;
     a78:	30 91 3b 0a 	lds	r19, 0x0A3B	; 0x800a3b <num_vehicles_in_park+0x1>
     a7c:	2f 5f       	subi	r18, 0xFF	; 255
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255
     a80:	30 93 3b 0a 	sts	0x0A3B, r19	; 0x800a3b <num_vehicles_in_park+0x1>
     a84:	20 93 3a 0a 	sts	0x0A3A, r18	; 0x800a3a <num_vehicles_in_park>
     a88:	00 91 34 0a 	lds	r16, 0x0A34	; 0x800a34 <total_money_collected>
	
	
	//total_money_collected += children_money;
	total_money_collected += total_cash;
     a8c:	10 91 35 0a 	lds	r17, 0x0A35	; 0x800a35 <total_money_collected+0x1>
     a90:	20 91 36 0a 	lds	r18, 0x0A36	; 0x800a36 <total_money_collected+0x2>
     a94:	30 91 37 0a 	lds	r19, 0x0A37	; 0x800a37 <total_money_collected+0x3>
     a98:	08 0f       	add	r16, r24
     a9a:	19 1f       	adc	r17, r25
     a9c:	2a 1f       	adc	r18, r26
     a9e:	3b 1f       	adc	r19, r27
     aa0:	00 93 34 0a 	sts	0x0A34, r16	; 0x800a34 <total_money_collected>
     aa4:	10 93 35 0a 	sts	0x0A35, r17	; 0x800a35 <total_money_collected+0x1>
     aa8:	20 93 36 0a 	sts	0x0A36, r18	; 0x800a36 <total_money_collected+0x2>
     aac:	30 93 37 0a 	sts	0x0A37, r19	; 0x800a37 <total_money_collected+0x3>
     ab0:	00 91 2c 0a 	lds	r16, 0x0A2C	; 0x800a2c <__data_end>
	
	entrance_fee_collected += total_cash;
     ab4:	10 91 2d 0a 	lds	r17, 0x0A2D	; 0x800a2d <__data_end+0x1>
     ab8:	20 91 2e 0a 	lds	r18, 0x0A2E	; 0x800a2e <__data_end+0x2>
     abc:	30 91 2f 0a 	lds	r19, 0x0A2F	; 0x800a2f <__data_end+0x3>
     ac0:	80 0f       	add	r24, r16
     ac2:	91 1f       	adc	r25, r17
     ac4:	a2 1f       	adc	r26, r18
     ac6:	b3 1f       	adc	r27, r19
     ac8:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__data_end>
     acc:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <__data_end+0x1>
     ad0:	a0 93 2e 0a 	sts	0x0A2E, r26	; 0x800a2e <__data_end+0x2>
     ad4:	b0 93 2f 0a 	sts	0x0A2F, r27	; 0x800a2f <__data_end+0x3>
	//entrance_fee_collected += children_money;
	
	//UPDATING THE VALUES IN EEPROM
	
	write_data_to_eeprom( numberplate, NUMBERPLATE_ADDRESS,sizeof(numberplate));
     ad8:	48 e7       	ldi	r20, 0x78	; 120
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	64 e2       	ldi	r22, 0x24	; 36
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	84 e4       	ldi	r24, 0x44	; 68
     ae2:	9a e0       	ldi	r25, 0x0A	; 10
     ae4:	2b db       	rcall	.-2474   	; 0x13c <write_data_to_eeprom>
	write_data_to_eeprom( &touristsInPark,TOURISTS_IN_PARK_ADDRESS, sizeof(touristsInPark));
     ae6:	42 e0       	ldi	r20, 0x02	; 2
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	64 e2       	ldi	r22, 0x24	; 36
     aec:	71 e0       	ldi	r23, 0x01	; 1
     aee:	82 e4       	ldi	r24, 0x42	; 66
     af0:	9a e0       	ldi	r25, 0x0A	; 10
     af2:	24 db       	rcall	.-2488   	; 0x13c <write_data_to_eeprom>
	write_data_to_eeprom( &num_children_in_park, NUM_CHILDREN_IN_PARK_ADDRESS,sizeof(num_children_in_park));
     af4:	42 e0       	ldi	r20, 0x02	; 2
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	68 e2       	ldi	r22, 0x28	; 40
     afa:	71 e0       	ldi	r23, 0x01	; 1
     afc:	80 e4       	ldi	r24, 0x40	; 64
     afe:	9a e0       	ldi	r25, 0x0A	; 10
     b00:	1d db       	rcall	.-2502   	; 0x13c <write_data_to_eeprom>
	write_data_to_eeprom( &num_adults_in_park,NUM_ADULTS_IN_PARK_ADDRESS, sizeof(num_adults_in_park));
     b02:	42 e0       	ldi	r20, 0x02	; 2
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	6c e2       	ldi	r22, 0x2C	; 44
     b08:	71 e0       	ldi	r23, 0x01	; 1
     b0a:	8e e3       	ldi	r24, 0x3E	; 62
     b0c:	9a e0       	ldi	r25, 0x0A	; 10
     b0e:	16 db       	rcall	.-2516   	; 0x13c <write_data_to_eeprom>
	write_data_to_eeprom( &num_drivers_in_park,NUM_DRIVERS_IN_PARK_ADDRESS, sizeof(num_drivers_in_park));
     b10:	42 e0       	ldi	r20, 0x02	; 2
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	60 e3       	ldi	r22, 0x30	; 48
     b16:	71 e0       	ldi	r23, 0x01	; 1
     b18:	8c e3       	ldi	r24, 0x3C	; 60
     b1a:	9a e0       	ldi	r25, 0x0A	; 10
	write_data_to_eeprom( &num_vehicles_in_park,NUM_VEHICLES_IN_PARK_ADDRESS, sizeof(num_vehicles_in_park));
     b1c:	0f db       	rcall	.-2530   	; 0x13c <write_data_to_eeprom>
     b1e:	42 e0       	ldi	r20, 0x02	; 2
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	64 e3       	ldi	r22, 0x34	; 52
     b24:	71 e0       	ldi	r23, 0x01	; 1
	
	write_data_to_eeprom( &total_money_collected, TOTAL_MONEY_COLLECTED_ADDRESS,sizeof(total_money_collected));
     b26:	8a e3       	ldi	r24, 0x3A	; 58
     b28:	9a e0       	ldi	r25, 0x0A	; 10
     b2a:	08 db       	rcall	.-2544   	; 0x13c <write_data_to_eeprom>
     b2c:	44 e0       	ldi	r20, 0x04	; 4
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	60 e4       	ldi	r22, 0x40	; 64
	
	write_data_to_eeprom( &entrance_fee_collected,ENTRANCE_FEE_COLLECTED_ADDRESS, sizeof(entrance_fee_collected));
     b32:	71 e0       	ldi	r23, 0x01	; 1
     b34:	84 e3       	ldi	r24, 0x34	; 52
     b36:	9a e0       	ldi	r25, 0x0A	; 10
     b38:	01 db       	rcall	.-2558   	; 0x13c <write_data_to_eeprom>
     b3a:	44 e0       	ldi	r20, 0x04	; 4
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	68 e6       	ldi	r22, 0x68	; 104
     b40:	71 e0       	ldi	r23, 0x01	; 1


	USART_Transmit("Saving data...\r\n")	;
     b42:	8c e2       	ldi	r24, 0x2C	; 44
     b44:	9a e0       	ldi	r25, 0x0A	; 10
     b46:	fa da       	rcall	.-2572   	; 0x13c <write_data_to_eeprom>
	
	lcd_cmd(0x01);
     b48:	82 e4       	ldi	r24, 0x42	; 66
     b4a:	93 e0       	ldi	r25, 0x03	; 3
	lcd_cmd(0x80);
     b4c:	bc dc       	rcall	.-1672   	; 0x4c6 <USART_Transmit>
     b4e:	81 e0       	ldi	r24, 0x01	; 1
	lcd_data_print("REGISTRATION COMPL..");
     b50:	7a db       	rcall	.-2316   	; 0x246 <lcd_cmd>
     b52:	80 e8       	ldi	r24, 0x80	; 128
     b54:	78 db       	rcall	.-2320   	; 0x246 <lcd_cmd>
     b56:	81 e9       	ldi	r24, 0x91	; 145
	lcd_cmd(0xc0);
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	a6 db       	rcall	.-2228   	; 0x2a8 <lcd_data_print>
     b5c:	80 ec       	ldi	r24, 0xC0	; 192
	lcd_data_print("Gate opened...")	;
     b5e:	73 db       	rcall	.-2330   	; 0x246 <lcd_cmd>
     b60:	86 ea       	ldi	r24, 0xA6	; 166
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	a1 db       	rcall	.-2238   	; 0x2a8 <lcd_data_print>
	
	lcd_cmd(0x94);
     b66:	84 e9       	ldi	r24, 0x94	; 148
     b68:	6e db       	rcall	.-2340   	; 0x246 <lcd_cmd>
     b6a:	83 e5       	ldi	r24, 0x53	; 83
	lcd_data_print("Enter the Park")	;
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	9c db       	rcall	.-2248   	; 0x2a8 <lcd_data_print>
     b70:	2f eb       	ldi	r18, 0xBF	; 191
     b72:	87 e2       	ldi	r24, 0x27	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b74:	99 e0       	ldi	r25, 0x09	; 9
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	80 40       	sbci	r24, 0x00	; 0
     b7a:	90 40       	sbci	r25, 0x00	; 0
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <registerCar_serial+0x288>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <registerCar_serial+0x292>
     b80:	00 00       	nop
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	60 db       	rcall	.-2368   	; 0x246 <lcd_cmd>
	_delay_ms(3000);
	
	lcd_cmd(0x01);
     b86:	80 ec       	ldi	r24, 0xC0	; 192
     b88:	5e db       	rcall	.-2372   	; 0x246 <lcd_cmd>
     b8a:	83 ec       	ldi	r24, 0xC3	; 195
	lcd_cmd(0xc0);
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	8c db       	rcall	.-2280   	; 0x2a8 <lcd_data_print>
     b90:	2f e7       	ldi	r18, 0x7F	; 127
	lcd_data_print("Gate closing...");
     b92:	8a e1       	ldi	r24, 0x1A	; 26
     b94:	96 e0       	ldi	r25, 0x06	; 6
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	80 40       	sbci	r24, 0x00	; 0
     b9a:	90 40       	sbci	r25, 0x00	; 0
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <registerCar_serial+0x2a8>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <registerCar_serial+0x2b2>
     ba0:	00 00       	nop
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
	_delay_ms(2000);
	
}
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	08 95       	ret

00000bb4 <register_waiting_Car_serial>:
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	44 e0       	ldi	r20, 0x04	; 4


void register_waiting_Car_serial() {
	
	//RETRIEVING VALUES FROM EEPROM
	read_data_from_eeprom( &childFee,CHILD_FEE_ADDRESS, sizeof(childFee));
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	81 e2       	ldi	r24, 0x21	; 33
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	bc da       	rcall	.-2696   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &adultFee,ADULT_FEE_ADDRESS, sizeof(adultFee));
     bca:	44 e0       	ldi	r20, 0x04	; 4
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	64 e0       	ldi	r22, 0x04	; 4
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	8d e1       	ldi	r24, 0x1D	; 29
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	b5 da       	rcall	.-2710   	; 0x142 <read_data_from_eeprom>
	
	read_data_from_eeprom( numberplate,NUMBERPLATE_ADDRESS, sizeof(numberplate));
     bd8:	48 e7       	ldi	r20, 0x78	; 120
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	64 e2       	ldi	r22, 0x24	; 36
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	84 e4       	ldi	r24, 0x44	; 68
     be2:	9a e0       	ldi	r25, 0x0A	; 10
     be4:	ae da       	rcall	.-2724   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &touristsInPark,TOURISTS_IN_PARK_ADDRESS, sizeof(touristsInPark));
     be6:	42 e0       	ldi	r20, 0x02	; 2
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	64 e2       	ldi	r22, 0x24	; 36
     bec:	71 e0       	ldi	r23, 0x01	; 1
     bee:	82 e4       	ldi	r24, 0x42	; 66
     bf0:	9a e0       	ldi	r25, 0x0A	; 10
     bf2:	a7 da       	rcall	.-2738   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &num_children_in_park,NUM_CHILDREN_IN_PARK_ADDRESS, sizeof(num_children_in_park));
     bf4:	42 e0       	ldi	r20, 0x02	; 2
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	68 e2       	ldi	r22, 0x28	; 40
     bfa:	71 e0       	ldi	r23, 0x01	; 1
     bfc:	80 e4       	ldi	r24, 0x40	; 64
     bfe:	9a e0       	ldi	r25, 0x0A	; 10
     c00:	a0 da       	rcall	.-2752   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &num_adults_in_park,NUM_ADULTS_IN_PARK_ADDRESS, sizeof(num_adults_in_park));
     c02:	42 e0       	ldi	r20, 0x02	; 2
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	6c e2       	ldi	r22, 0x2C	; 44
     c08:	71 e0       	ldi	r23, 0x01	; 1
     c0a:	8e e3       	ldi	r24, 0x3E	; 62
     c0c:	9a e0       	ldi	r25, 0x0A	; 10
     c0e:	99 da       	rcall	.-2766   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &num_drivers_in_park,NUM_DRIVERS_IN_PARK_ADDRESS, sizeof(num_drivers_in_park));
     c10:	42 e0       	ldi	r20, 0x02	; 2
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	60 e3       	ldi	r22, 0x30	; 48
     c16:	71 e0       	ldi	r23, 0x01	; 1
     c18:	8c e3       	ldi	r24, 0x3C	; 60
     c1a:	9a e0       	ldi	r25, 0x0A	; 10
     c1c:	92 da       	rcall	.-2780   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &num_vehicles_in_park,NUM_VEHICLES_IN_PARK_ADDRESS, sizeof(num_vehicles_in_park));
     c1e:	42 e0       	ldi	r20, 0x02	; 2
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	64 e3       	ldi	r22, 0x34	; 52
     c24:	71 e0       	ldi	r23, 0x01	; 1
     c26:	8a e3       	ldi	r24, 0x3A	; 58
     c28:	9a e0       	ldi	r25, 0x0A	; 10
     c2a:	8b da       	rcall	.-2794   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &entrance_fee_collected,ENTRANCE_FEE_COLLECTED_ADDRESS, sizeof(entrance_fee_collected));
     c2c:	44 e0       	ldi	r20, 0x04	; 4
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	68 e6       	ldi	r22, 0x68	; 104
     c32:	71 e0       	ldi	r23, 0x01	; 1
     c34:	8c e2       	ldi	r24, 0x2C	; 44
     c36:	9a e0       	ldi	r25, 0x0A	; 10
     c38:	84 da       	rcall	.-2808   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &total_money_collected,TOTAL_MONEY_COLLECTED_ADDRESS, sizeof(total_money_collected));
     c3a:	44 e0       	ldi	r20, 0x04	; 4
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	60 e4       	ldi	r22, 0x40	; 64
     c40:	71 e0       	ldi	r23, 0x01	; 1
     c42:	84 e3       	ldi	r24, 0x34	; 52
     c44:	9a e0       	ldi	r25, 0x0A	; 10
     c46:	7d da       	rcall	.-2822   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &num_vehicles_outside,NUM_VEHICLES_OUTSIDE_ADDRESS, sizeof(num_vehicles_outside));
     c48:	42 e0       	ldi	r20, 0x02	; 2
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	68 e3       	ldi	r22, 0x38	; 56
     c4e:	71 e0       	ldi	r23, 0x01	; 1
     c50:	88 e3       	ldi	r24, 0x38	; 56
     c52:	9a e0       	ldi	r25, 0x0A	; 10
	
	// Implement code to prompt the attendant to enter car details
	USART_Transmit("                   INCOMING CAR REGISTRATION \r\n");
     c54:	76 da       	rcall	.-2836   	; 0x142 <read_data_from_eeprom>
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	93 e0       	ldi	r25, 0x03	; 3
	USART_Transmit("NumberPlate: \r\n");
     c5a:	35 dc       	rcall	.-1942   	; 0x4c6 <USART_Transmit>
     c5c:	82 e3       	ldi	r24, 0x32	; 50
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	32 dc       	rcall	.-1948   	; 0x4c6 <USART_Transmit>

	
	int plateSize=countStoredRows(numberplate);
     c62:	84 e4       	ldi	r24, 0x44	; 68
     c64:	9a e0       	ldi	r25, 0x0A	; 10
     c66:	0a dc       	rcall	.-2028   	; 0x47c <countStoredRows>
     c68:	8c 01       	movw	r16, r24
     c6a:	c0 e0       	ldi	r28, 0x00	; 0
	//int n_plate[5];
	char plate;
	for (int n=0; n<6; n++){
     c6c:	d0 e0       	ldi	r29, 0x00	; 0
     c6e:	0f c0       	rjmp	.+30     	; 0xc8e <register_waiting_Car_serial+0xda>
		plate=USART_Receive();
     c70:	4d dc       	rcall	.-1894   	; 0x50c <USART_Receive>
     c72:	f8 01       	movw	r30, r16
		numberplate[plateSize][n]=plate;
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	e0 0f       	add	r30, r16
     c7a:	f1 1f       	adc	r31, r17
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	ec 5b       	subi	r30, 0xBC	; 188
     c82:	f5 4f       	sbci	r31, 0xF5	; 245
     c84:	ec 0f       	add	r30, r28
		
		USART_Transmitchar( plate );
     c86:	fd 1f       	adc	r31, r29

	
	int plateSize=countStoredRows(numberplate);
	//int n_plate[5];
	char plate;
	for (int n=0; n<6; n++){
     c88:	80 83       	st	Z, r24
     c8a:	39 dc       	rcall	.-1934   	; 0x4fe <USART_Transmitchar>
     c8c:	21 96       	adiw	r28, 0x01	; 1
     c8e:	c6 30       	cpi	r28, 0x06	; 6
		numberplate[plateSize][n]=plate;
		
		USART_Transmitchar( plate );
		
	}
	USART_Transmit("\r\n");
     c90:	d1 05       	cpc	r29, r1
     c92:	74 f3       	brlt	.-36     	; 0xc70 <register_waiting_Car_serial+0xbc>
     c94:	84 e5       	ldi	r24, 0x54	; 84
     c96:	98 e0       	ldi	r25, 0x08	; 8
	
	USART_Transmit("10 years and below: ");
     c98:	16 dc       	rcall	.-2004   	; 0x4c6 <USART_Transmit>
     c9a:	8b e6       	ldi	r24, 0x6B	; 107
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	13 dc       	rcall	.-2010   	; 0x4c6 <USART_Transmit>
	int children = USART_ReceiveInt();
     ca0:	3c dc       	rcall	.-1928   	; 0x51a <USART_ReceiveInt>
     ca2:	ec 01       	movw	r28, r24
     ca4:	80 e8       	ldi	r24, 0x80	; 128
	
	USART_Transmit("Above 10 years: ");
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	0e dc       	rcall	.-2020   	; 0x4c6 <USART_Transmit>
     caa:	37 dc       	rcall	.-1938   	; 0x51a <USART_ReceiveInt>
     cac:	9c 01       	movw	r18, r24
	int adults = USART_ReceiveInt();
     cae:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <childFee>
     cb2:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <childFee+0x1>
	
	//PERFORMING CALCULATIONS
	int children_money=childFee * children;
     cb6:	8c 9f       	mul	r24, r28
     cb8:	f0 01       	movw	r30, r0
     cba:	8d 9f       	mul	r24, r29
     cbc:	f0 0d       	add	r31, r0
     cbe:	9c 9f       	mul	r25, r28
     cc0:	f0 0d       	add	r31, r0
     cc2:	11 24       	eor	r1, r1
     cc4:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <adultFee>
     cc8:	50 91 1e 02 	lds	r21, 0x021E	; 0x80021e <adultFee+0x1>
	int adults_money=adultFee * adults;
     ccc:	42 9f       	mul	r20, r18
     cce:	c0 01       	movw	r24, r0
     cd0:	43 9f       	mul	r20, r19
     cd2:	90 0d       	add	r25, r0
     cd4:	52 9f       	mul	r21, r18
     cd6:	90 0d       	add	r25, r0
     cd8:	11 24       	eor	r1, r1
     cda:	8f 01       	movw	r16, r30
     cdc:	08 0f       	add	r16, r24
     cde:	19 1f       	adc	r17, r25
	int total_cash=children_money + adults_money;
     ce0:	ae 01       	movw	r20, r28
     ce2:	42 0f       	add	r20, r18
     ce4:	53 1f       	adc	r21, r19
	
	touristsInPark += children + adults;
     ce6:	60 91 42 0a 	lds	r22, 0x0A42	; 0x800a42 <touristsInPark>
     cea:	70 91 43 0a 	lds	r23, 0x0A43	; 0x800a43 <touristsInPark+0x1>
     cee:	46 0f       	add	r20, r22
     cf0:	57 1f       	adc	r21, r23
     cf2:	50 93 43 0a 	sts	0x0A43, r21	; 0x800a43 <touristsInPark+0x1>
     cf6:	40 93 42 0a 	sts	0x0A42, r20	; 0x800a42 <touristsInPark>
     cfa:	40 91 40 0a 	lds	r20, 0x0A40	; 0x800a40 <num_children_in_park>
     cfe:	50 91 41 0a 	lds	r21, 0x0A41	; 0x800a41 <num_children_in_park+0x1>
	num_children_in_park += children;
     d02:	c4 0f       	add	r28, r20
     d04:	d5 1f       	adc	r29, r21
     d06:	d0 93 41 0a 	sts	0x0A41, r29	; 0x800a41 <num_children_in_park+0x1>
     d0a:	c0 93 40 0a 	sts	0x0A40, r28	; 0x800a40 <num_children_in_park>
     d0e:	40 91 3e 0a 	lds	r20, 0x0A3E	; 0x800a3e <num_adults_in_park>
     d12:	50 91 3f 0a 	lds	r21, 0x0A3F	; 0x800a3f <num_adults_in_park+0x1>
	num_adults_in_park += adults;
     d16:	24 0f       	add	r18, r20
     d18:	35 1f       	adc	r19, r21
     d1a:	30 93 3f 0a 	sts	0x0A3F, r19	; 0x800a3f <num_adults_in_park+0x1>
     d1e:	20 93 3e 0a 	sts	0x0A3E, r18	; 0x800a3e <num_adults_in_park>
     d22:	20 91 3c 0a 	lds	r18, 0x0A3C	; 0x800a3c <num_drivers_in_park>
     d26:	30 91 3d 0a 	lds	r19, 0x0A3D	; 0x800a3d <num_drivers_in_park+0x1>
	num_drivers_in_park += 1;
     d2a:	2f 5f       	subi	r18, 0xFF	; 255
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	30 93 3d 0a 	sts	0x0A3D, r19	; 0x800a3d <num_drivers_in_park+0x1>
     d32:	20 93 3c 0a 	sts	0x0A3C, r18	; 0x800a3c <num_drivers_in_park>
     d36:	20 91 3a 0a 	lds	r18, 0x0A3A	; 0x800a3a <num_vehicles_in_park>
     d3a:	30 91 3b 0a 	lds	r19, 0x0A3B	; 0x800a3b <num_vehicles_in_park+0x1>
	num_vehicles_in_park += 1;
     d3e:	2f 5f       	subi	r18, 0xFF	; 255
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
     d42:	30 93 3b 0a 	sts	0x0A3B, r19	; 0x800a3b <num_vehicles_in_park+0x1>
     d46:	20 93 3a 0a 	sts	0x0A3A, r18	; 0x800a3a <num_vehicles_in_park>
     d4a:	20 91 38 0a 	lds	r18, 0x0A38	; 0x800a38 <num_vehicles_outside>
     d4e:	30 91 39 0a 	lds	r19, 0x0A39	; 0x800a39 <num_vehicles_outside+0x1>
	num_vehicles_outside -=1;
     d52:	21 50       	subi	r18, 0x01	; 1
     d54:	31 09       	sbc	r19, r1
     d56:	30 93 39 0a 	sts	0x0A39, r19	; 0x800a39 <num_vehicles_outside+0x1>
     d5a:	20 93 38 0a 	sts	0x0A38, r18	; 0x800a38 <num_vehicles_outside>
     d5e:	01 2e       	mov	r0, r17
     d60:	00 0c       	add	r0, r0
     d62:	22 0b       	sbc	r18, r18
	
	total_money_collected += total_cash;
     d64:	33 0b       	sbc	r19, r19
     d66:	40 91 34 0a 	lds	r20, 0x0A34	; 0x800a34 <total_money_collected>
     d6a:	50 91 35 0a 	lds	r21, 0x0A35	; 0x800a35 <total_money_collected+0x1>
     d6e:	60 91 36 0a 	lds	r22, 0x0A36	; 0x800a36 <total_money_collected+0x2>
     d72:	70 91 37 0a 	lds	r23, 0x0A37	; 0x800a37 <total_money_collected+0x3>
     d76:	04 0f       	add	r16, r20
     d78:	15 1f       	adc	r17, r21
     d7a:	26 1f       	adc	r18, r22
     d7c:	37 1f       	adc	r19, r23
     d7e:	00 93 34 0a 	sts	0x0A34, r16	; 0x800a34 <total_money_collected>
     d82:	10 93 35 0a 	sts	0x0A35, r17	; 0x800a35 <total_money_collected+0x1>
     d86:	20 93 36 0a 	sts	0x0A36, r18	; 0x800a36 <total_money_collected+0x2>
     d8a:	30 93 37 0a 	sts	0x0A37, r19	; 0x800a37 <total_money_collected+0x3>
     d8e:	09 2e       	mov	r0, r25
     d90:	00 0c       	add	r0, r0
     d92:	aa 0b       	sbc	r26, r26
	//total_money_collected += adults_money;
	
	entrance_fee_collected += adults_money;
     d94:	bb 0b       	sbc	r27, r27
     d96:	00 91 2c 0a 	lds	r16, 0x0A2C	; 0x800a2c <__data_end>
     d9a:	10 91 2d 0a 	lds	r17, 0x0A2D	; 0x800a2d <__data_end+0x1>
     d9e:	20 91 2e 0a 	lds	r18, 0x0A2E	; 0x800a2e <__data_end+0x2>
     da2:	30 91 2f 0a 	lds	r19, 0x0A2F	; 0x800a2f <__data_end+0x3>
     da6:	ac 01       	movw	r20, r24
     da8:	bd 01       	movw	r22, r26
     daa:	40 0f       	add	r20, r16
     dac:	51 1f       	adc	r21, r17
     dae:	62 1f       	adc	r22, r18
     db0:	73 1f       	adc	r23, r19
     db2:	cf 01       	movw	r24, r30
     db4:	ff 0f       	add	r31, r31
     db6:	aa 0b       	sbc	r26, r26
	entrance_fee_collected += children_money;
     db8:	bb 0b       	sbc	r27, r27
     dba:	84 0f       	add	r24, r20
     dbc:	95 1f       	adc	r25, r21
     dbe:	a6 1f       	adc	r26, r22
     dc0:	b7 1f       	adc	r27, r23
     dc2:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__data_end>
     dc6:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <__data_end+0x1>
     dca:	a0 93 2e 0a 	sts	0x0A2E, r26	; 0x800a2e <__data_end+0x2>
     dce:	b0 93 2f 0a 	sts	0x0A2F, r27	; 0x800a2f <__data_end+0x3>
     dd2:	42 e0       	ldi	r20, 0x02	; 2
	
	//UPDATING THE VALUES IN EEPROM
	write_data_to_eeprom( &num_vehicles_outside,NUM_VEHICLES_OUTSIDE_ADDRESS, sizeof(num_vehicles_outside));
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	68 e3       	ldi	r22, 0x38	; 56
     dd8:	71 e0       	ldi	r23, 0x01	; 1
     dda:	88 e3       	ldi	r24, 0x38	; 56
     ddc:	9a e0       	ldi	r25, 0x0A	; 10
     dde:	ae d9       	rcall	.-3236   	; 0x13c <write_data_to_eeprom>
     de0:	48 e7       	ldi	r20, 0x78	; 120
	write_data_to_eeprom( numberplate, NUMBERPLATE_ADDRESS,sizeof(numberplate));
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	64 e2       	ldi	r22, 0x24	; 36
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	84 e4       	ldi	r24, 0x44	; 68
     dea:	9a e0       	ldi	r25, 0x0A	; 10
     dec:	a7 d9       	rcall	.-3250   	; 0x13c <write_data_to_eeprom>
     dee:	42 e0       	ldi	r20, 0x02	; 2
	write_data_to_eeprom( &touristsInPark,TOURISTS_IN_PARK_ADDRESS, sizeof(touristsInPark));
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	64 e2       	ldi	r22, 0x24	; 36
     df4:	71 e0       	ldi	r23, 0x01	; 1
     df6:	82 e4       	ldi	r24, 0x42	; 66
     df8:	9a e0       	ldi	r25, 0x0A	; 10
     dfa:	a0 d9       	rcall	.-3264   	; 0x13c <write_data_to_eeprom>
     dfc:	42 e0       	ldi	r20, 0x02	; 2
	write_data_to_eeprom( &num_children_in_park, NUM_CHILDREN_IN_PARK_ADDRESS,sizeof(num_children_in_park));
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	68 e2       	ldi	r22, 0x28	; 40
     e02:	71 e0       	ldi	r23, 0x01	; 1
     e04:	80 e4       	ldi	r24, 0x40	; 64
     e06:	9a e0       	ldi	r25, 0x0A	; 10
     e08:	99 d9       	rcall	.-3278   	; 0x13c <write_data_to_eeprom>
     e0a:	42 e0       	ldi	r20, 0x02	; 2
	write_data_to_eeprom( &num_adults_in_park,NUM_ADULTS_IN_PARK_ADDRESS, sizeof(num_adults_in_park));
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	6c e2       	ldi	r22, 0x2C	; 44
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	8e e3       	ldi	r24, 0x3E	; 62
     e14:	9a e0       	ldi	r25, 0x0A	; 10
     e16:	92 d9       	rcall	.-3292   	; 0x13c <write_data_to_eeprom>
     e18:	42 e0       	ldi	r20, 0x02	; 2
	write_data_to_eeprom( &num_drivers_in_park,NUM_DRIVERS_IN_PARK_ADDRESS, sizeof(num_drivers_in_park));
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	60 e3       	ldi	r22, 0x30	; 48
     e1e:	71 e0       	ldi	r23, 0x01	; 1
     e20:	8c e3       	ldi	r24, 0x3C	; 60
     e22:	9a e0       	ldi	r25, 0x0A	; 10
     e24:	8b d9       	rcall	.-3306   	; 0x13c <write_data_to_eeprom>
	write_data_to_eeprom( &num_vehicles_in_park,NUM_VEHICLES_IN_PARK_ADDRESS, sizeof(num_vehicles_in_park));
     e26:	42 e0       	ldi	r20, 0x02	; 2
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	64 e3       	ldi	r22, 0x34	; 52
     e2c:	71 e0       	ldi	r23, 0x01	; 1
     e2e:	8a e3       	ldi	r24, 0x3A	; 58
	
	write_data_to_eeprom( &total_money_collected, TOTAL_MONEY_COLLECTED_ADDRESS,sizeof(total_money_collected));
     e30:	9a e0       	ldi	r25, 0x0A	; 10
     e32:	84 d9       	rcall	.-3320   	; 0x13c <write_data_to_eeprom>
     e34:	44 e0       	ldi	r20, 0x04	; 4
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	60 e4       	ldi	r22, 0x40	; 64
	
	write_data_to_eeprom( &entrance_fee_collected,ENTRANCE_FEE_COLLECTED_ADDRESS, sizeof(entrance_fee_collected));
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	84 e3       	ldi	r24, 0x34	; 52
     e3e:	9a e0       	ldi	r25, 0x0A	; 10
     e40:	7d d9       	rcall	.-3334   	; 0x13c <write_data_to_eeprom>
     e42:	44 e0       	ldi	r20, 0x04	; 4
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	68 e6       	ldi	r22, 0x68	; 104
     e48:	71 e0       	ldi	r23, 0x01	; 1


	USART_Transmit("Saving data...\r\n")	;
     e4a:	8c e2       	ldi	r24, 0x2C	; 44
     e4c:	9a e0       	ldi	r25, 0x0A	; 10
	
	lcd_cmd(0x01);
     e4e:	76 d9       	rcall	.-3348   	; 0x13c <write_data_to_eeprom>
     e50:	82 e4       	ldi	r24, 0x42	; 66
	lcd_cmd(0x80);
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	38 db       	rcall	.-2448   	; 0x4c6 <USART_Transmit>
     e56:	81 e0       	ldi	r24, 0x01	; 1
	lcd_data_print("REGISTRATION COMPL..");
     e58:	f6 d9       	rcall	.-3092   	; 0x246 <lcd_cmd>
     e5a:	80 e8       	ldi	r24, 0x80	; 128
     e5c:	f4 d9       	rcall	.-3096   	; 0x246 <lcd_cmd>
     e5e:	81 e9       	ldi	r24, 0x91	; 145
	lcd_cmd(0xc0);
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	22 da       	rcall	.-3004   	; 0x2a8 <lcd_data_print>
     e64:	80 ec       	ldi	r24, 0xC0	; 192
	lcd_data_print("Gate opened...")	;
     e66:	ef d9       	rcall	.-3106   	; 0x246 <lcd_cmd>
     e68:	86 ea       	ldi	r24, 0xA6	; 166
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	1d da       	rcall	.-3014   	; 0x2a8 <lcd_data_print>
	
	lcd_cmd(0x94);
     e6e:	84 e9       	ldi	r24, 0x94	; 148
     e70:	ea d9       	rcall	.-3116   	; 0x246 <lcd_cmd>
     e72:	83 e5       	ldi	r24, 0x53	; 83
	lcd_data_print("Enter the Park")	;
     e74:	93 e0       	ldi	r25, 0x03	; 3
     e76:	18 da       	rcall	.-3024   	; 0x2a8 <lcd_data_print>
     e78:	2f eb       	ldi	r18, 0xBF	; 191
     e7a:	87 e2       	ldi	r24, 0x27	; 39
     e7c:	99 e0       	ldi	r25, 0x09	; 9
     e7e:	21 50       	subi	r18, 0x01	; 1
     e80:	80 40       	sbci	r24, 0x00	; 0
     e82:	90 40       	sbci	r25, 0x00	; 0
     e84:	e1 f7       	brne	.-8      	; 0xe7e <register_waiting_Car_serial+0x2ca>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <register_waiting_Car_serial+0x2d4>
     e88:	00 00       	nop
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	dc d9       	rcall	.-3144   	; 0x246 <lcd_cmd>
	_delay_ms(3000);
	
	lcd_cmd(0x01);
     e8e:	80 ec       	ldi	r24, 0xC0	; 192
     e90:	da d9       	rcall	.-3148   	; 0x246 <lcd_cmd>
     e92:	83 ec       	ldi	r24, 0xC3	; 195
	lcd_cmd(0xc0);
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	08 da       	rcall	.-3056   	; 0x2a8 <lcd_data_print>
     e98:	2f e7       	ldi	r18, 0x7F	; 127
	lcd_data_print("Gate closing...");
     e9a:	8a e1       	ldi	r24, 0x1A	; 26
     e9c:	96 e0       	ldi	r25, 0x06	; 6
     e9e:	21 50       	subi	r18, 0x01	; 1
     ea0:	80 40       	sbci	r24, 0x00	; 0
     ea2:	90 40       	sbci	r25, 0x00	; 0
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <register_waiting_Car_serial+0x2ea>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <register_waiting_Car_serial+0x2f4>
     ea8:	00 00       	nop
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	08 95       	ret

00000eb4 <withdraw_all_cash>:
	_delay_ms(2000);
	
}
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	cd b7       	in	r28, 0x3d	; 61
		USART_Transmit("Could not find such a numberplate in the system.\r\n");	
	}
	
}*/

void withdraw_all_cash(){
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	2c 97       	sbiw	r28, 0x0c	; 12
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
	read_data_from_eeprom( &total_money_collected,TOTAL_MONEY_COLLECTED_ADDRESS, sizeof(total_money_collected));
     ecc:	44 e0       	ldi	r20, 0x04	; 4
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	60 e4       	ldi	r22, 0x40	; 64
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	84 e3       	ldi	r24, 0x34	; 52
     ed6:	9a e0       	ldi	r25, 0x0A	; 10
     ed8:	34 d9       	rcall	.-3480   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &fridge_money_collected,FRIDGE_MONEY_COLLECTED_ADDRESS, sizeof(fridge_money_collected));
     eda:	44 e0       	ldi	r20, 0x04	; 4
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	64 e5       	ldi	r22, 0x54	; 84
     ee0:	71 e0       	ldi	r23, 0x01	; 1
     ee2:	80 e3       	ldi	r24, 0x30	; 48
     ee4:	9a e0       	ldi	r25, 0x0A	; 10
     ee6:	2d d9       	rcall	.-3494   	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &entrance_fee_collected,ENTRANCE_FEE_COLLECTED_ADDRESS, sizeof(entrance_fee_collected));
     ee8:	44 e0       	ldi	r20, 0x04	; 4
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	68 e6       	ldi	r22, 0x68	; 104
     eee:	71 e0       	ldi	r23, 0x01	; 1
     ef0:	8c e2       	ldi	r24, 0x2C	; 44
     ef2:	9a e0       	ldi	r25, 0x0A	; 10
     ef4:	26 d9       	rcall	.-3508   	; 0x142 <read_data_from_eeprom>
	
	char total[12];
	sprintf(total, "%lu", total_money_collected);
     ef6:	80 91 37 0a 	lds	r24, 0x0A37	; 0x800a37 <total_money_collected+0x3>
     efa:	8f 93       	push	r24
     efc:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <total_money_collected+0x2>
     f00:	8f 93       	push	r24
     f02:	80 91 35 0a 	lds	r24, 0x0A35	; 0x800a35 <total_money_collected+0x1>
     f06:	8f 93       	push	r24
     f08:	80 91 34 0a 	lds	r24, 0x0A34	; 0x800a34 <total_money_collected>
     f0c:	8f 93       	push	r24
     f0e:	82 e6       	ldi	r24, 0x62	; 98
     f10:	93 e0       	ldi	r25, 0x03	; 3
     f12:	9f 93       	push	r25
     f14:	8f 93       	push	r24
     f16:	8e 01       	movw	r16, r28
     f18:	0f 5f       	subi	r16, 0xFF	; 255
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	1f 93       	push	r17
     f1e:	0f 93       	push	r16
	
	USART_Transmit("Withdraw a total of UGX ");
     f20:	77 d7       	rcall	.+3822   	; 0x1e10 <sprintf>
     f22:	86 e6       	ldi	r24, 0x66	; 102
     f24:	93 e0       	ldi	r25, 0x03	; 3
	USART_Transmit(total);
     f26:	cf da       	rcall	.-2658   	; 0x4c6 <USART_Transmit>
     f28:	c8 01       	movw	r24, r16
	USART_Transmit("\r\n");
     f2a:	cd da       	rcall	.-2662   	; 0x4c6 <USART_Transmit>
     f2c:	84 e5       	ldi	r24, 0x54	; 84
     f2e:	98 e0       	ldi	r25, 0x08	; 8
	USART_Transmit("Withdraw?\r\n");
     f30:	ca da       	rcall	.-2668   	; 0x4c6 <USART_Transmit>
     f32:	8f e7       	ldi	r24, 0x7F	; 127
     f34:	93 e0       	ldi	r25, 0x03	; 3
     f36:	c7 da       	rcall	.-2674   	; 0x4c6 <USART_Transmit>
	
	USART_Transmit("1. Withdraw    2.Cancel\r\n");
     f38:	8b e8       	ldi	r24, 0x8B	; 139
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	c4 da       	rcall	.-2680   	; 0x4c6 <USART_Transmit>
     f3e:	ed da       	rcall	.-2598   	; 0x51a <USART_ReceiveInt>
	int choice_made=USART_ReceiveInt();
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
	if(choice_made==1){
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	91 05       	cpc	r25, r1
     f4e:	09 f0       	breq	.+2      	; 0xf52 <withdraw_all_cash+0x9e>
     f50:	45 c0       	rjmp	.+138    	; 0xfdc <withdraw_all_cash+0x128>
     f52:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <total_money_collected>
		total_money_collected =0;
     f56:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <total_money_collected+0x1>
     f5a:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <total_money_collected+0x2>
     f5e:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <total_money_collected+0x3>
     f62:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <fridge_money_collected>
		fridge_money_collected=0;
     f66:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <fridge_money_collected+0x1>
     f6a:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <fridge_money_collected+0x2>
     f6e:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <fridge_money_collected+0x3>
     f72:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <__data_end>
		entrance_fee_collected =0;
     f76:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <__data_end+0x1>
     f7a:	10 92 2e 0a 	sts	0x0A2E, r1	; 0x800a2e <__data_end+0x2>
     f7e:	10 92 2f 0a 	sts	0x0A2F, r1	; 0x800a2f <__data_end+0x3>
     f82:	44 e0       	ldi	r20, 0x04	; 4
		
		write_data_to_eeprom( &total_money_collected, TOTAL_MONEY_COLLECTED_ADDRESS,sizeof(total_money_collected));
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	60 e4       	ldi	r22, 0x40	; 64
     f88:	71 e0       	ldi	r23, 0x01	; 1
     f8a:	84 e3       	ldi	r24, 0x34	; 52
     f8c:	9a e0       	ldi	r25, 0x0A	; 10
     f8e:	d6 d8       	rcall	.-3668   	; 0x13c <write_data_to_eeprom>
     f90:	44 e0       	ldi	r20, 0x04	; 4
		write_data_to_eeprom( &fridge_money_collected,FRIDGE_MONEY_COLLECTED_ADDRESS, sizeof(fridge_money_collected));
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	64 e5       	ldi	r22, 0x54	; 84
     f96:	71 e0       	ldi	r23, 0x01	; 1
     f98:	80 e3       	ldi	r24, 0x30	; 48
     f9a:	9a e0       	ldi	r25, 0x0A	; 10
     f9c:	cf d8       	rcall	.-3682   	; 0x13c <write_data_to_eeprom>
		write_data_to_eeprom( &entrance_fee_collected,ENTRANCE_FEE_COLLECTED_ADDRESS, sizeof(entrance_fee_collected));
     f9e:	44 e0       	ldi	r20, 0x04	; 4
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	68 e6       	ldi	r22, 0x68	; 104
     fa4:	71 e0       	ldi	r23, 0x01	; 1
     fa6:	8c e2       	ldi	r24, 0x2C	; 44
     fa8:	9a e0       	ldi	r25, 0x0A	; 10
     faa:	c8 d8       	rcall	.-3696   	; 0x13c <write_data_to_eeprom>
     fac:	85 ea       	ldi	r24, 0xA5	; 165
		
		USART_Transmit("Opening money vault....\r\n");
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	8a da       	rcall	.-2796   	; 0x4c6 <USART_Transmit>
     fb2:	eb e0       	ldi	r30, 0x0B	; 11
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
		PORTL |=(1<<0);
     fb6:	80 81       	ld	r24, Z
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	80 83       	st	Z, r24
     fbc:	3f e7       	ldi	r19, 0x7F	; 127
     fbe:	8a e1       	ldi	r24, 0x1A	; 26
     fc0:	96 e0       	ldi	r25, 0x06	; 6
     fc2:	31 50       	subi	r19, 0x01	; 1
     fc4:	80 40       	sbci	r24, 0x00	; 0
     fc6:	90 40       	sbci	r25, 0x00	; 0
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <withdraw_all_cash+0x10e>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <withdraw_all_cash+0x118>
     fcc:	00 00       	nop
		_delay_ms(2000);
		PORTL &=~(1<<0);
     fce:	80 81       	ld	r24, Z
     fd0:	8e 7f       	andi	r24, 0xFE	; 254
		
		USART_Transmit("Vault opened, Please remove the money\r\n");
     fd2:	80 83       	st	Z, r24
     fd4:	8f eb       	ldi	r24, 0xBF	; 191
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	76 da       	rcall	.-2836   	; 0x4c6 <USART_Transmit>
		
	}else if (choice_made==2){
     fda:	0c c0       	rjmp	.+24     	; 0xff4 <withdraw_all_cash+0x140>
     fdc:	02 97       	sbiw	r24, 0x02	; 2
		USART_Transmit("OPERATION CANCELLED\r\n");
     fde:	21 f4       	brne	.+8      	; 0xfe8 <withdraw_all_cash+0x134>
     fe0:	87 ee       	ldi	r24, 0xE7	; 231
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	70 da       	rcall	.-2848   	; 0x4c6 <USART_Transmit>
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <withdraw_all_cash+0x140>
		
	}else{
		USART_Transmit("INVALID CHOICE\r\n");
     fe8:	8d ef       	ldi	r24, 0xFD	; 253
     fea:	93 e0       	ldi	r25, 0x03	; 3
     fec:	6c da       	rcall	.-2856   	; 0x4c6 <USART_Transmit>
     fee:	8e e0       	ldi	r24, 0x0E	; 14
		USART_Transmit("PLEASE TRY AGAIN\r\n");
     ff0:	94 e0       	ldi	r25, 0x04	; 4
     ff2:	69 da       	rcall	.-2862   	; 0x4c6 <USART_Transmit>
     ff4:	2c 96       	adiw	r28, 0x0c	; 12
     ff6:	0f b6       	in	r0, 0x3f	; 63
	}

}
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <handleSerialConsole>:
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29

void handleSerialConsole() {
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	68 97       	sbiw	r28, 0x18	; 24
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61

	
	USART_Transmit("                  WELCOME, ACCESS THE MENU BELOW \r\n");
    101e:	81 e2       	ldi	r24, 0x21	; 33
    1020:	94 e0       	ldi	r25, 0x04	; 4
    1022:	51 da       	rcall	.-2910   	; 0x4c6 <USART_Transmit>
	USART_Transmit("\r\n");
    1024:	84 e5       	ldi	r24, 0x54	; 84
    1026:	98 e0       	ldi	r25, 0x08	; 8
    1028:	4e da       	rcall	.-2916   	; 0x4c6 <USART_Transmit>
	while(1){
		// menu for serial console interaction
		// '\n' to send each menu item on a separate line
		USART_Transmit("\n        Smart National Park System\r\n");
    102a:	85 e5       	ldi	r24, 0x55	; 85
    102c:	94 e0       	ldi	r25, 0x04	; 4
    102e:	4b da       	rcall	.-2922   	; 0x4c6 <USART_Transmit>
		USART_Transmit("Select an option:\r\n");
    1030:	8b e7       	ldi	r24, 0x7B	; 123
    1032:	94 e0       	ldi	r25, 0x04	; 4
    1034:	48 da       	rcall	.-2928   	; 0x4c6 <USART_Transmit>

		USART_Transmit("1. How many tourists, categorized by age group are in the park?\r\n");
    1036:	8f e8       	ldi	r24, 0x8F	; 143
    1038:	94 e0       	ldi	r25, 0x04	; 4
    103a:	45 da       	rcall	.-2934   	; 0x4c6 <USART_Transmit>

		USART_Transmit("2. Which vehicles are still in the park?\r\n");
    103c:	81 ed       	ldi	r24, 0xD1	; 209
    103e:	94 e0       	ldi	r25, 0x04	; 4
    1040:	42 da       	rcall	.-2940   	; 0x4c6 <USART_Transmit>

		USART_Transmit("3. How much has been collected by the park aggregated by the fridge money and entrance fund\r\n");
    1042:	8c ef       	ldi	r24, 0xFC	; 252
    1044:	94 e0       	ldi	r25, 0x04	; 4
    1046:	3f da       	rcall	.-2946   	; 0x4c6 <USART_Transmit>

		USART_Transmit("4. How many drivers are in the park? \r\n");
    1048:	8a e5       	ldi	r24, 0x5A	; 90
    104a:	95 e0       	ldi	r25, 0x05	; 5
    104c:	3c da       	rcall	.-2952   	; 0x4c6 <USART_Transmit>

		USART_Transmit("5. Number of bottles in the fridge\r\n");
    104e:	82 e8       	ldi	r24, 0x82	; 130
    1050:	95 e0       	ldi	r25, 0x05	; 5
    1052:	39 da       	rcall	.-2958   	; 0x4c6 <USART_Transmit>

		USART_Transmit("6. Replenish Fridge\r\n");
    1054:	87 ea       	ldi	r24, 0xA7	; 167
    1056:	95 e0       	ldi	r25, 0x05	; 5
    1058:	36 da       	rcall	.-2964   	; 0x4c6 <USART_Transmit>
		
		USART_Transmit("7. Registration\r\n");
    105a:	8d eb       	ldi	r24, 0xBD	; 189
    105c:	95 e0       	ldi	r25, 0x05	; 5
    105e:	33 da       	rcall	.-2970   	; 0x4c6 <USART_Transmit>
		
		USART_Transmit("8. How many cars are waiting outside the park?\r\n");
    1060:	8f ec       	ldi	r24, 0xCF	; 207
    1062:	95 e0       	ldi	r25, 0x05	; 5
		
		USART_Transmit("9. Is park full?\r\n");
    1064:	30 da       	rcall	.-2976   	; 0x4c6 <USART_Transmit>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	96 e0       	ldi	r25, 0x06	; 6
    106a:	2d da       	rcall	.-2982   	; 0x4c6 <USART_Transmit>
		
		USART_Transmit("10. Withdraw all the cash?\r\n");
    106c:	83 e1       	ldi	r24, 0x13	; 19
    106e:	96 e0       	ldi	r25, 0x06	; 6
    1070:	2a da       	rcall	.-2988   	; 0x4c6 <USART_Transmit>
    1072:	80 e3       	ldi	r24, 0x30	; 48

		// Prompt for user input
		USART_Transmit("Enter your choice: \r\n");
    1074:	96 e0       	ldi	r25, 0x06	; 6
    1076:	27 da       	rcall	.-2994   	; 0x4c6 <USART_Transmit>
    1078:	50 da       	rcall	.-2912   	; 0x51a <USART_ReceiveInt>

		// The rest of your menu handling logic remains the same
		int choice = USART_ReceiveInt();
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	8a 30       	cpi	r24, 0x0A	; 10
		
		switch (choice) {
    107e:	91 05       	cpc	r25, r1
    1080:	08 f0       	brcs	.+2      	; 0x1084 <handleSerialConsole+0x7a>
    1082:	3b c3       	rjmp	.+1654   	; 0x16fa <handleSerialConsole+0x6f0>
    1084:	fc 01       	movw	r30, r24
    1086:	88 27       	eor	r24, r24
    1088:	ee 58       	subi	r30, 0x8E	; 142
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	8f 4f       	sbci	r24, 0xFF	; 255
    108e:	64 c6       	rjmp	.+3272   	; 0x1d58 <__tablejump2__>
    1090:	42 e0       	ldi	r20, 0x02	; 2
			case 1:
			
				//read_data_from_eeprom( &touristsInPark,TOURISTS_IN_PARK_ADDRESS, sizeof(touristsInPark));
				read_data_from_eeprom( &num_children_in_park,NUM_CHILDREN_IN_PARK_ADDRESS, sizeof(num_children_in_park));
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	68 e2       	ldi	r22, 0x28	; 40
    1096:	71 e0       	ldi	r23, 0x01	; 1
    1098:	80 e4       	ldi	r24, 0x40	; 64
    109a:	9a e0       	ldi	r25, 0x0A	; 10
    109c:	52 d8       	rcall	.-3932   	; 0x142 <read_data_from_eeprom>
    109e:	42 e0       	ldi	r20, 0x02	; 2
    10a0:	50 e0       	ldi	r21, 0x00	; 0
				read_data_from_eeprom( &num_adults_in_park,NUM_ADULTS_IN_PARK_ADDRESS, sizeof(num_adults_in_park));
    10a2:	6c e2       	ldi	r22, 0x2C	; 44
    10a4:	71 e0       	ldi	r23, 0x01	; 1
    10a6:	8e e3       	ldi	r24, 0x3E	; 62
    10a8:	9a e0       	ldi	r25, 0x0A	; 10
    10aa:	4b d8       	rcall	.-3946   	; 0x142 <read_data_from_eeprom>
    10ac:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <num_children_in_park+0x1>
			
				char c_in_park[8];
				char a_in_park[8];
			
				//sprintf(t_in_park, "%d", touristsInPark);
				sprintf(c_in_park, "%d", num_children_in_park);
    10b0:	8f 93       	push	r24
    10b2:	80 91 40 0a 	lds	r24, 0x0A40	; 0x800a40 <num_children_in_park>
    10b6:	8f 93       	push	r24
    10b8:	06 e4       	ldi	r16, 0x46	; 70
    10ba:	16 e0       	ldi	r17, 0x06	; 6
    10bc:	1f 93       	push	r17
    10be:	0f 93       	push	r16
    10c0:	7e 01       	movw	r14, r28
    10c2:	8d e0       	ldi	r24, 0x0D	; 13
    10c4:	e8 0e       	add	r14, r24
    10c6:	f1 1c       	adc	r15, r1
    10c8:	ff 92       	push	r15
    10ca:	ef 92       	push	r14
    10cc:	a1 d6       	rcall	.+3394   	; 0x1e10 <sprintf>
    10ce:	80 91 3f 0a 	lds	r24, 0x0A3F	; 0x800a3f <num_adults_in_park+0x1>
				sprintf(a_in_park, "%d", num_adults_in_park);
    10d2:	8f 93       	push	r24
    10d4:	80 91 3e 0a 	lds	r24, 0x0A3E	; 0x800a3e <num_adults_in_park>
    10d8:	8f 93       	push	r24
    10da:	1f 93       	push	r17
    10dc:	0f 93       	push	r16
    10de:	8e 01       	movw	r16, r28
    10e0:	0f 5f       	subi	r16, 0xFF	; 255
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	1f 93       	push	r17
			
				USART_Transmit("1\r\n");
    10e6:	0f 93       	push	r16
    10e8:	93 d6       	rcall	.+3366   	; 0x1e10 <sprintf>
    10ea:	89 e4       	ldi	r24, 0x49	; 73
				//USART_Transmit("          Tourists in park:\r\n");
				USART_Transmit("Children: ");
    10ec:	96 e0       	ldi	r25, 0x06	; 6
    10ee:	eb d9       	rcall	.-3114   	; 0x4c6 <USART_Transmit>
    10f0:	8d e4       	ldi	r24, 0x4D	; 77
    10f2:	96 e0       	ldi	r25, 0x06	; 6
				USART_Transmit(c_in_park);
    10f4:	e8 d9       	rcall	.-3120   	; 0x4c6 <USART_Transmit>
    10f6:	c7 01       	movw	r24, r14
    10f8:	e6 d9       	rcall	.-3124   	; 0x4c6 <USART_Transmit>
				USART_Transmit("\r\n");
    10fa:	84 e5       	ldi	r24, 0x54	; 84
    10fc:	98 e0       	ldi	r25, 0x08	; 8
    10fe:	e3 d9       	rcall	.-3130   	; 0x4c6 <USART_Transmit>
			
				USART_Transmit("Adults: ");
    1100:	88 e5       	ldi	r24, 0x58	; 88
    1102:	96 e0       	ldi	r25, 0x06	; 6
    1104:	e0 d9       	rcall	.-3136   	; 0x4c6 <USART_Transmit>
    1106:	c8 01       	movw	r24, r16
				USART_Transmit(a_in_park);
    1108:	de d9       	rcall	.-3140   	; 0x4c6 <USART_Transmit>
    110a:	84 e5       	ldi	r24, 0x54	; 84
				USART_Transmit("\r\n");
    110c:	98 e0       	ldi	r25, 0x08	; 8
    110e:	db d9       	rcall	.-3146   	; 0x4c6 <USART_Transmit>
    1110:	84 e5       	ldi	r24, 0x54	; 84
    1112:	98 e0       	ldi	r25, 0x08	; 8
				USART_Transmit("\r\n");
    1114:	d8 d9       	rcall	.-3152   	; 0x4c6 <USART_Transmit>
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
			
			break;
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	ec c2       	rjmp	.+1496   	; 0x16fa <handleSerialConsole+0x6f0>
    1122:	48 e7       	ldi	r20, 0x78	; 120
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	64 e2       	ldi	r22, 0x24	; 36
			
			case 2:
				// Handle accessing maintenance functions
				read_data_from_eeprom( numberplate,NUMBERPLATE_ADDRESS, sizeof(numberplate));
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	84 e4       	ldi	r24, 0x44	; 68
    112c:	9a e0       	ldi	r25, 0x0A	; 10
    112e:	09 d8       	rcall	.-4078   	; 0x142 <read_data_from_eeprom>
    1130:	84 e4       	ldi	r24, 0x44	; 68
    1132:	9a e0       	ldi	r25, 0x0A	; 10
    1134:	a3 d9       	rcall	.-3258   	; 0x47c <countStoredRows>
				int length3 = countStoredRows(numberplate);
    1136:	6c 01       	movw	r12, r24
    1138:	e1 2c       	mov	r14, r1
    113a:	f1 2c       	mov	r15, r1
    113c:	1b c0       	rjmp	.+54     	; 0x1174 <handleSerialConsole+0x16a>
				for (int i=0;i < length3; i++)	{
    113e:	f7 01       	movw	r30, r14
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
					for (int j=0; j<6; j++)	{
						USART_Transmitchar(numberplate[i][j]);
    1144:	ee 0d       	add	r30, r14
    1146:	ff 1d       	adc	r31, r15
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	ec 5b       	subi	r30, 0xBC	; 188
    114e:	f5 4f       	sbci	r31, 0xF5	; 245
    1150:	e0 0f       	add	r30, r16
    1152:	f1 1f       	adc	r31, r17
    1154:	80 81       	ld	r24, Z
    1156:	d3 d9       	rcall	.-3162   	; 0x4fe <USART_Transmitchar>
    1158:	0f 5f       	subi	r16, 0xFF	; 255
    115a:	1f 4f       	sbci	r17, 0xFF	; 255
			case 2:
				// Handle accessing maintenance functions
				read_data_from_eeprom( numberplate,NUMBERPLATE_ADDRESS, sizeof(numberplate));
				int length3 = countStoredRows(numberplate);
				for (int i=0;i < length3; i++)	{
					for (int j=0; j<6; j++)	{
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <handleSerialConsole+0x158>
    115e:	00 e0       	ldi	r16, 0x00	; 0
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	06 30       	cpi	r16, 0x06	; 6
    1164:	11 05       	cpc	r17, r1
    1166:	5c f3       	brlt	.-42     	; 0x113e <handleSerialConsole+0x134>
    1168:	81 ec       	ldi	r24, 0xC1	; 193
    116a:	96 e0       	ldi	r25, 0x06	; 6
						USART_Transmitchar(numberplate[i][j]);
						
					}
					USART_Transmit(" ");
    116c:	ac d9       	rcall	.-3240   	; 0x4c6 <USART_Transmit>
    116e:	9f ef       	ldi	r25, 0xFF	; 255
    1170:	e9 1a       	sub	r14, r25
    1172:	f9 0a       	sbc	r15, r25
			
			case 2:
				// Handle accessing maintenance functions
				read_data_from_eeprom( numberplate,NUMBERPLATE_ADDRESS, sizeof(numberplate));
				int length3 = countStoredRows(numberplate);
				for (int i=0;i < length3; i++)	{
    1174:	ec 14       	cp	r14, r12
    1176:	fd 04       	cpc	r15, r13
    1178:	94 f3       	brlt	.-28     	; 0x115e <handleSerialConsole+0x154>
    117a:	84 e5       	ldi	r24, 0x54	; 84
    117c:	98 e0       	ldi	r25, 0x08	; 8
    117e:	a3 d9       	rcall	.-3258   	; 0x4c6 <USART_Transmit>
					}
					USART_Transmit(" ");
					
				}
			
				USART_Transmit("\r\n");
    1180:	84 e5       	ldi	r24, 0x54	; 84
    1182:	98 e0       	ldi	r25, 0x08	; 8
    1184:	a0 d9       	rcall	.-3264   	; 0x4c6 <USART_Transmit>
    1186:	b9 c2       	rjmp	.+1394   	; 0x16fa <handleSerialConsole+0x6f0>
				USART_Transmit("\r\n");
    1188:	44 e0       	ldi	r20, 0x04	; 4
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	64 e5       	ldi	r22, 0x54	; 84
    118e:	71 e0       	ldi	r23, 0x01	; 1
				
			break;
    1190:	80 e3       	ldi	r24, 0x30	; 48
			
			case 3:
				read_data_from_eeprom( &fridge_money_collected,FRIDGE_MONEY_COLLECTED_ADDRESS, sizeof(fridge_money_collected));
    1192:	9a e0       	ldi	r25, 0x0A	; 10
    1194:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    1198:	44 e0       	ldi	r20, 0x04	; 4
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	68 e6       	ldi	r22, 0x68	; 104
    119e:	71 e0       	ldi	r23, 0x01	; 1
				read_data_from_eeprom( &entrance_fee_collected,ENTRANCE_FEE_COLLECTED_ADDRESS, sizeof(entrance_fee_collected));
    11a0:	8c e2       	ldi	r24, 0x2C	; 44
    11a2:	9a e0       	ldi	r25, 0x0A	; 10
    11a4:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    11a8:	80 91 33 0a 	lds	r24, 0x0A33	; 0x800a33 <fridge_money_collected+0x3>
    11ac:	8f 93       	push	r24
    11ae:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <fridge_money_collected+0x2>
			
				char fmc[12];
				char efc[12];
				sprintf(fmc, "%lu", (unsigned long)fridge_money_collected);
    11b2:	8f 93       	push	r24
    11b4:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <fridge_money_collected+0x1>
    11b8:	8f 93       	push	r24
    11ba:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <fridge_money_collected>
    11be:	8f 93       	push	r24
    11c0:	02 e6       	ldi	r16, 0x62	; 98
    11c2:	13 e0       	ldi	r17, 0x03	; 3
    11c4:	1f 93       	push	r17
    11c6:	0f 93       	push	r16
    11c8:	7e 01       	movw	r14, r28
    11ca:	8d e0       	ldi	r24, 0x0D	; 13
    11cc:	e8 0e       	add	r14, r24
    11ce:	f1 1c       	adc	r15, r1
    11d0:	ff 92       	push	r15
    11d2:	ef 92       	push	r14
    11d4:	1d d6       	rcall	.+3130   	; 0x1e10 <sprintf>
    11d6:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <__data_end+0x3>
				sprintf(efc, "%lu", (unsigned long)entrance_fee_collected);
    11da:	8f 93       	push	r24
    11dc:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <__data_end+0x2>
    11e0:	8f 93       	push	r24
    11e2:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <__data_end+0x1>
    11e6:	8f 93       	push	r24
    11e8:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <__data_end>
    11ec:	8f 93       	push	r24
    11ee:	1f 93       	push	r17
    11f0:	0f 93       	push	r16
    11f2:	8e 01       	movw	r16, r28
    11f4:	0f 5f       	subi	r16, 0xFF	; 255
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	1f 93       	push	r17
    11fa:	0f 93       	push	r16
    11fc:	09 d6       	rcall	.+3090   	; 0x1e10 <sprintf>
				
// 				sprintf(fmc, "%d", fridge_money_collected);
// 				sprintf(efc, "%d", entrance_fee_collected);
			
				USART_Transmit("Fridge money collected: UGX ");
    11fe:	81 e6       	ldi	r24, 0x61	; 97
    1200:	96 e0       	ldi	r25, 0x06	; 6
    1202:	61 d9       	rcall	.-3390   	; 0x4c6 <USART_Transmit>
    1204:	c7 01       	movw	r24, r14
				USART_Transmit(fmc);
    1206:	5f d9       	rcall	.-3394   	; 0x4c6 <USART_Transmit>
    1208:	84 e5       	ldi	r24, 0x54	; 84
    120a:	98 e0       	ldi	r25, 0x08	; 8
				USART_Transmit("\r\n");
    120c:	5c d9       	rcall	.-3400   	; 0x4c6 <USART_Transmit>
    120e:	8e e7       	ldi	r24, 0x7E	; 126
    1210:	96 e0       	ldi	r25, 0x06	; 6
    1212:	59 d9       	rcall	.-3406   	; 0x4c6 <USART_Transmit>
			
				USART_Transmit("Entrance fee collected: UGX ");
    1214:	c8 01       	movw	r24, r16
    1216:	57 d9       	rcall	.-3410   	; 0x4c6 <USART_Transmit>
    1218:	84 e5       	ldi	r24, 0x54	; 84
				USART_Transmit(efc);
    121a:	98 e0       	ldi	r25, 0x08	; 8
    121c:	54 d9       	rcall	.-3416   	; 0x4c6 <USART_Transmit>
				USART_Transmit("\r\n");
    121e:	84 e5       	ldi	r24, 0x54	; 84
    1220:	98 e0       	ldi	r25, 0x08	; 8
    1222:	51 d9       	rcall	.-3422   	; 0x4c6 <USART_Transmit>
				USART_Transmit("\r\n");
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
			break;
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	65 c2       	rjmp	.+1226   	; 0x16fa <handleSerialConsole+0x6f0>
    1230:	42 e0       	ldi	r20, 0x02	; 2
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	60 e3       	ldi	r22, 0x30	; 48
			
			case 4:
				read_data_from_eeprom( &num_drivers_in_park,NUM_DRIVERS_IN_PARK_ADDRESS, sizeof(num_drivers_in_park));
    1236:	71 e0       	ldi	r23, 0x01	; 1
    1238:	8c e3       	ldi	r24, 0x3C	; 60
    123a:	9a e0       	ldi	r25, 0x0A	; 10
    123c:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    1240:	80 91 3d 0a 	lds	r24, 0x0A3D	; 0x800a3d <num_drivers_in_park+0x1>
    1244:	8f 93       	push	r24
				char d_in_park[4];
				sprintf(d_in_park, "%d", num_drivers_in_park);
    1246:	80 91 3c 0a 	lds	r24, 0x0A3C	; 0x800a3c <num_drivers_in_park>
    124a:	8f 93       	push	r24
    124c:	86 e4       	ldi	r24, 0x46	; 70
    124e:	96 e0       	ldi	r25, 0x06	; 6
    1250:	9f 93       	push	r25
    1252:	8f 93       	push	r24
    1254:	8e 01       	movw	r16, r28
    1256:	0f 5f       	subi	r16, 0xFF	; 255
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	1f 93       	push	r17
    125c:	0f 93       	push	r16
    125e:	d8 d5       	rcall	.+2992   	; 0x1e10 <sprintf>
    1260:	8b e9       	ldi	r24, 0x9B	; 155
    1262:	96 e0       	ldi	r25, 0x06	; 6
    1264:	30 d9       	rcall	.-3488   	; 0x4c6 <USART_Transmit>
				
				USART_Transmit("Drivers: ");
    1266:	c8 01       	movw	r24, r16
    1268:	2e d9       	rcall	.-3492   	; 0x4c6 <USART_Transmit>
    126a:	84 e5       	ldi	r24, 0x54	; 84
				USART_Transmit(d_in_park);
    126c:	98 e0       	ldi	r25, 0x08	; 8
    126e:	2b d9       	rcall	.-3498   	; 0x4c6 <USART_Transmit>
				USART_Transmit("\r\n");
    1270:	84 e5       	ldi	r24, 0x54	; 84
    1272:	98 e0       	ldi	r25, 0x08	; 8
    1274:	28 d9       	rcall	.-3504   	; 0x4c6 <USART_Transmit>
				USART_Transmit("\r\n");
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
			
			break;
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	3b c2       	rjmp	.+1142   	; 0x16fa <handleSerialConsole+0x6f0>
    1284:	42 e0       	ldi	r20, 0x02	; 2
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	6c e3       	ldi	r22, 0x3C	; 60
    128a:	71 e0       	ldi	r23, 0x01	; 1
			
			case 5:
				read_data_from_eeprom( &num_bottles_in_fridge, NUM_BOTTLES_IN_FRIDGE_ADDRESS,sizeof(num_bottles_in_fridge));
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	92 e0       	ldi	r25, 0x02	; 2
    1290:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    1294:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1298:	8f 93       	push	r24
				char bif[8];
				sprintf(bif, "%d", num_bottles_in_fridge);
    129a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    129e:	8f 93       	push	r24
    12a0:	86 e4       	ldi	r24, 0x46	; 70
    12a2:	96 e0       	ldi	r25, 0x06	; 6
    12a4:	9f 93       	push	r25
    12a6:	8f 93       	push	r24
    12a8:	8e 01       	movw	r16, r28
    12aa:	0f 5f       	subi	r16, 0xFF	; 255
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	1f 93       	push	r17
    12b0:	0f 93       	push	r16
    12b2:	ae d5       	rcall	.+2908   	; 0x1e10 <sprintf>
    12b4:	85 ea       	ldi	r24, 0xA5	; 165
    12b6:	96 e0       	ldi	r25, 0x06	; 6
				
				USART_Transmit("Number of bottles in fridge: ");
    12b8:	06 d9       	rcall	.-3572   	; 0x4c6 <USART_Transmit>
    12ba:	c8 01       	movw	r24, r16
    12bc:	04 d9       	rcall	.-3576   	; 0x4c6 <USART_Transmit>
    12be:	84 e5       	ldi	r24, 0x54	; 84
				USART_Transmit(bif);
    12c0:	98 e0       	ldi	r25, 0x08	; 8
    12c2:	01 d9       	rcall	.-3582   	; 0x4c6 <USART_Transmit>
    12c4:	84 e5       	ldi	r24, 0x54	; 84
				USART_Transmit("\r\n");
    12c6:	98 e0       	ldi	r25, 0x08	; 8
    12c8:	fe d8       	rcall	.-3588   	; 0x4c6 <USART_Transmit>
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
				USART_Transmit("\r\n");
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
			
			break;
    12d6:	11 c2       	rjmp	.+1058   	; 0x16fa <handleSerialConsole+0x6f0>
    12d8:	46 e0       	ldi	r20, 0x06	; 6
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	60 e1       	ldi	r22, 0x10	; 16
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	81 e1       	ldi	r24, 0x11	; 17
    12e2:	92 e0       	ldi	r25, 0x02	; 2
			
			case 6:
				read_data_from_eeprom( maintenancePassword,MAINTENANCE_PASSWORD_ADDRESS, sizeof(maintenancePassword));
    12e4:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    12e8:	83 ec       	ldi	r24, 0xC3	; 195
    12ea:	96 e0       	ldi	r25, 0x06	; 6
    12ec:	ec d8       	rcall	.-3624   	; 0x4c6 <USART_Transmit>
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	0c c0       	rjmp	.+24     	; 0x130c <handleSerialConsole+0x302>
			
				USART_Transmit("Enter your password: \r\n");
    12f4:	0b d9       	rcall	.-3562   	; 0x50c <USART_Receive>
    12f6:	e1 e0       	ldi	r30, 0x01	; 1
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	ec 0f       	add	r30, r28
			
				unsigned char passw_array[5];
				for (int i=0; i<5; i++){
    12fc:	fd 1f       	adc	r31, r29
    12fe:	e0 0f       	add	r30, r16
    1300:	f1 1f       	adc	r31, r17
					passw_array[i]=USART_Receive();
    1302:	80 83       	st	Z, r24
    1304:	8a e2       	ldi	r24, 0x2A	; 42
    1306:	fb d8       	rcall	.-3594   	; 0x4fe <USART_Transmitchar>
    1308:	0f 5f       	subi	r16, 0xFF	; 255
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	05 30       	cpi	r16, 0x05	; 5
    130e:	11 05       	cpc	r17, r1
    1310:	8c f3       	brlt	.-30     	; 0x12f4 <handleSerialConsole+0x2ea>
    1312:	e1 e1       	ldi	r30, 0x11	; 17
					USART_Transmitchar('*') ;
    1314:	f2 e0       	ldi	r31, 0x02	; 2
    1316:	01 90       	ld	r0, Z+
    1318:	00 20       	and	r0, r0
				read_data_from_eeprom( maintenancePassword,MAINTENANCE_PASSWORD_ADDRESS, sizeof(maintenancePassword));
			
				USART_Transmit("Enter your password: \r\n");
			
				unsigned char passw_array[5];
				for (int i=0; i<5; i++){
    131a:	e9 f7       	brne	.-6      	; 0x1316 <handleSerialConsole+0x30c>
    131c:	31 97       	sbiw	r30, 0x01	; 1
    131e:	af 01       	movw	r20, r30
    1320:	41 51       	subi	r20, 0x11	; 17
    1322:	52 40       	sbci	r21, 0x02	; 2
					passw_array[i]=USART_Receive();
					USART_Transmitchar('*') ;
				}
			
				int length1 = strlen(maintenancePassword);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e c0       	rjmp	.+28     	; 0x1346 <handleSerialConsole+0x33c>
    132a:	fc 01       	movw	r30, r24
    132c:	ef 5e       	subi	r30, 0xEF	; 239
    132e:	fd 4f       	sbci	r31, 0xFD	; 253
    1330:	30 81       	ld	r19, Z
    1332:	e1 e0       	ldi	r30, 0x01	; 1
    1334:	f0 e0       	ldi	r31, 0x00	; 0
							
				int areEqual = 1;

				for (int i = 0; i < length1; i++) {
    1336:	ec 0f       	add	r30, r28
    1338:	fd 1f       	adc	r31, r29
					if (maintenancePassword[i] != passw_array[i]) {
    133a:	e8 0f       	add	r30, r24
    133c:	f9 1f       	adc	r31, r25
    133e:	20 81       	ld	r18, Z
    1340:	32 13       	cpse	r19, r18
    1342:	07 c0       	rjmp	.+14     	; 0x1352 <handleSerialConsole+0x348>
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	84 17       	cp	r24, r20
    1348:	95 07       	cpc	r25, r21
    134a:	7c f3       	brlt	.-34     	; 0x132a <handleSerialConsole+0x320>
    134c:	81 e0       	ldi	r24, 0x01	; 1
			
				int length1 = strlen(maintenancePassword);
							
				int areEqual = 1;

				for (int i = 0; i < length1; i++) {
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <handleSerialConsole+0x34c>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
					USART_Transmitchar('*') ;
				}
			
				int length1 = strlen(maintenancePassword);
							
				int areEqual = 1;
    1356:	89 2b       	or	r24, r25
    1358:	09 f4       	brne	.+2      	; 0x135c <handleSerialConsole+0x352>
    135a:	5f c0       	rjmp	.+190    	; 0x141a <handleSerialConsole+0x410>

				for (int i = 0; i < length1; i++) {
					if (maintenancePassword[i] != passw_array[i]) {
						areEqual = 0;  // Arrays are not equal.
    135c:	42 e0       	ldi	r20, 0x02	; 2
    135e:	50 e0       	ldi	r21, 0x00	; 0
						break;
					}
				}

				if(areEqual){
    1360:	6c e3       	ldi	r22, 0x3C	; 60
    1362:	71 e0       	ldi	r23, 0x01	; 1
    1364:	80 e0       	ldi	r24, 0x00	; 0
				
					read_data_from_eeprom( &num_bottles_in_fridge, NUM_BOTTLES_IN_FRIDGE_ADDRESS,sizeof(num_bottles_in_fridge));
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    136c:	42 e0       	ldi	r20, 0x02	; 2
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	60 e2       	ldi	r22, 0x20	; 32
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	82 e0       	ldi	r24, 0x02	; 2
					read_data_from_eeprom( &fridge_capacity,FRIDGE_CAPACITY_ADDRESS, sizeof(fridge_capacity));
    1376:	92 e0       	ldi	r25, 0x02	; 2
    1378:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    137c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1380:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
				
					if (num_bottles_in_fridge==fridge_capacity)	{
    1384:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <fridge_capacity>
    1388:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <fridge_capacity+0x1>
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
    1390:	51 f4       	brne	.+20     	; 0x13a6 <handleSerialConsole+0x39c>
    1392:	84 e5       	ldi	r24, 0x54	; 84
    1394:	98 e0       	ldi	r25, 0x08	; 8
						USART_Transmit("\r\n");
    1396:	97 d8       	rcall	.-3794   	; 0x4c6 <USART_Transmit>
    1398:	8b ed       	ldi	r24, 0xDB	; 219
    139a:	96 e0       	ldi	r25, 0x06	; 6
    139c:	94 d8       	rcall	.-3800   	; 0x4c6 <USART_Transmit>
						USART_Transmit("Currently the fridge is full to capacity, u can't add more water bottles.\r\n");
    139e:	84 e5       	ldi	r24, 0x54	; 84
    13a0:	98 e0       	ldi	r25, 0x08	; 8
    13a2:	91 d8       	rcall	.-3806   	; 0x4c6 <USART_Transmit>
						USART_Transmit("\r\n");
    13a4:	aa c1       	rjmp	.+852    	; 0x16fa <handleSerialConsole+0x6f0>
    13a6:	84 e5       	ldi	r24, 0x54	; 84
    13a8:	98 e0       	ldi	r25, 0x08	; 8
    13aa:	8d d8       	rcall	.-3814   	; 0x4c6 <USART_Transmit>
						} else{
					
						USART_Transmit("\r\n");
    13ac:	87 e2       	ldi	r24, 0x27	; 39
    13ae:	97 e0       	ldi	r25, 0x07	; 7
    13b0:	8a d8       	rcall	.-3820   	; 0x4c6 <USART_Transmit>
						USART_Transmit("Enter number of bottles to add: \r\n");
    13b2:	b3 d8       	rcall	.-3738   	; 0x51a <USART_ReceiveInt>
    13b4:	8c 01       	movw	r16, r24
    13b6:	42 e0       	ldi	r20, 0x02	; 2
						int bts=USART_ReceiveInt();
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	6c e3       	ldi	r22, 0x3C	; 60
					
						read_data_from_eeprom( &num_bottles_in_fridge, NUM_BOTTLES_IN_FRIDGE_ADDRESS,sizeof(num_bottles_in_fridge));
    13bc:	71 e0       	ldi	r23, 0x01	; 1
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	92 e0       	ldi	r25, 0x02	; 2
    13c2:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    13c6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
						if ((num_bottles_in_fridge + bts)>fridge_capacity){
    13ca:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    13ce:	80 0f       	add	r24, r16
    13d0:	91 1f       	adc	r25, r17
    13d2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <fridge_capacity>
    13d6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <fridge_capacity+0x1>
    13da:	28 17       	cp	r18, r24
    13dc:	39 07       	cpc	r19, r25
    13de:	54 f4       	brge	.+20     	; 0x13f4 <handleSerialConsole+0x3ea>
    13e0:	84 e5       	ldi	r24, 0x54	; 84
							USART_Transmit("\r\n");
    13e2:	98 e0       	ldi	r25, 0x08	; 8
    13e4:	70 d8       	rcall	.-3872   	; 0x4c6 <USART_Transmit>
    13e6:	8a e4       	ldi	r24, 0x4A	; 74
    13e8:	97 e0       	ldi	r25, 0x07	; 7
							USART_Transmit("Too much. You can't add more bottles than the capacity.\r\n");
    13ea:	6d d8       	rcall	.-3878   	; 0x4c6 <USART_Transmit>
    13ec:	84 e5       	ldi	r24, 0x54	; 84
    13ee:	98 e0       	ldi	r25, 0x08	; 8
							USART_Transmit("\r\n");
    13f0:	6a d8       	rcall	.-3884   	; 0x4c6 <USART_Transmit>
    13f2:	83 c1       	rjmp	.+774    	; 0x16fa <handleSerialConsole+0x6f0>
    13f4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    13f8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
							}else{
							num_bottles_in_fridge += bts;
    13fc:	42 e0       	ldi	r20, 0x02	; 2
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	6c e3       	ldi	r22, 0x3C	; 60
							write_data_to_eeprom( &num_bottles_in_fridge, NUM_BOTTLES_IN_FRIDGE_ADDRESS,sizeof(num_bottles_in_fridge));
    1402:	71 e0       	ldi	r23, 0x01	; 1
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	92 e0       	ldi	r25, 0x02	; 2
    1408:	0e 94 9e 00 	call	0x13c	; 0x13c <write_data_to_eeprom>
    140c:	84 e5       	ldi	r24, 0x54	; 84
    140e:	98 e0       	ldi	r25, 0x08	; 8
							USART_Transmit("\r\n");
    1410:	5a d8       	rcall	.-3916   	; 0x4c6 <USART_Transmit>
    1412:	84 e8       	ldi	r24, 0x84	; 132
    1414:	97 e0       	ldi	r25, 0x07	; 7
							USART_Transmit("Fridge replenished successfully.\r\n");
    1416:	57 d8       	rcall	.-3922   	; 0x4c6 <USART_Transmit>
    1418:	70 c1       	rjmp	.+736    	; 0x16fa <handleSerialConsole+0x6f0>
    141a:	84 e5       	ldi	r24, 0x54	; 84
    141c:	98 e0       	ldi	r25, 0x08	; 8
    141e:	53 d8       	rcall	.-3930   	; 0x4c6 <USART_Transmit>
						}
					}
				
				
					} else{
					USART_Transmit("\r\n");
    1420:	87 ea       	ldi	r24, 0xA7	; 167
    1422:	97 e0       	ldi	r25, 0x07	; 7
    1424:	50 d8       	rcall	.-3936   	; 0x4c6 <USART_Transmit>
    1426:	84 e5       	ldi	r24, 0x54	; 84
					USART_Transmit("Incorrect password!!! \r\n");
    1428:	98 e0       	ldi	r25, 0x08	; 8
    142a:	4d d8       	rcall	.-3942   	; 0x4c6 <USART_Transmit>
    142c:	66 c1       	rjmp	.+716    	; 0x16fa <handleSerialConsole+0x6f0>
    142e:	80 ec       	ldi	r24, 0xC0	; 192
					USART_Transmit("\r\n");
    1430:	97 e0       	ldi	r25, 0x07	; 7
    1432:	49 d8       	rcall	.-3950   	; 0x4c6 <USART_Transmit>
    1434:	8b ed       	ldi	r24, 0xDB	; 219
    1436:	97 e0       	ldi	r25, 0x07	; 7
				}
			break;
			
			case 7:
				USART_Transmit("1. Register Car Entrance\r\n")	;
    1438:	46 d8       	rcall	.-3956   	; 0x4c6 <USART_Transmit>
    143a:	8d ef       	ldi	r24, 0xFD	; 253
    143c:	97 e0       	ldi	r25, 0x07	; 7
    143e:	43 d8       	rcall	.-3962   	; 0x4c6 <USART_Transmit>
				USART_Transmit("2. Register Car Waiting Outside\r\n")	;
    1440:	6c d8       	rcall	.-3880   	; 0x51a <USART_ReceiveInt>
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	91 05       	cpc	r25, r1
    1446:	49 f5       	brne	.+82     	; 0x149a <handleSerialConsole+0x490>
				USART_Transmit("3. Register Car EXIT\r\n")	;
    1448:	42 e0       	ldi	r20, 0x02	; 2
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	6c e0       	ldi	r22, 0x0C	; 12
    144e:	70 e0       	ldi	r23, 0x00	; 0
			
				int response=USART_ReceiveInt();
    1450:	87 e1       	ldi	r24, 0x17	; 23
    1452:	92 e0       	ldi	r25, 0x02	; 2
				if (response==1) {
    1454:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    1458:	42 e0       	ldi	r20, 0x02	; 2
					read_data_from_eeprom( &tourist_park_capacity,PARK_CAPACITY_ADDRESS, sizeof(tourist_park_capacity));
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	64 e2       	ldi	r22, 0x24	; 36
    145e:	71 e0       	ldi	r23, 0x01	; 1
    1460:	82 e4       	ldi	r24, 0x42	; 66
    1462:	9a e0       	ldi	r25, 0x0A	; 10
    1464:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    1468:	84 e4       	ldi	r24, 0x44	; 68
					read_data_from_eeprom( &touristsInPark,TOURISTS_IN_PARK_ADDRESS, sizeof(touristsInPark));
    146a:	9a e0       	ldi	r25, 0x0A	; 10
    146c:	07 d8       	rcall	.-4082   	; 0x47c <countStoredRows>
    146e:	40 91 42 0a 	lds	r20, 0x0A42	; 0x800a42 <touristsInPark>
    1472:	50 91 43 0a 	lds	r21, 0x0A43	; 0x800a43 <touristsInPark+0x1>
    1476:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <tourist_park_capacity>
					
					int numberplates_in=countStoredRows(numberplate);
    147a:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <tourist_park_capacity+0x1>
    147e:	42 17       	cp	r20, r18
					int platecapacity= sizeof(numberplate)/sizeof(numberplate[0]);
					
							
					if ((touristsInPark < tourist_park_capacity) || (numberplates_in != platecapacity)){
    1480:	53 07       	cpc	r21, r19
    1482:	14 f0       	brlt	.+4      	; 0x1488 <handleSerialConsole+0x47e>
    1484:	44 97       	sbiw	r24, 0x14	; 20
    1486:	29 f0       	breq	.+10     	; 0x1492 <handleSerialConsole+0x488>
    1488:	32 da       	rcall	.-2972   	; 0x8ee <registerCar_serial>
    148a:	84 e1       	ldi	r24, 0x14	; 20
    148c:	98 e0       	ldi	r25, 0x08	; 8
    148e:	1b d8       	rcall	.-4042   	; 0x4c6 <USART_Transmit>
    1490:	34 c1       	rjmp	.+616    	; 0x16fa <handleSerialConsole+0x6f0>
    1492:	8e e2       	ldi	r24, 0x2E	; 46
    1494:	98 e0       	ldi	r25, 0x08	; 8
    1496:	17 d8       	rcall	.-4050   	; 0x4c6 <USART_Transmit>
						registerCar_serial();
    1498:	30 c1       	rjmp	.+608    	; 0x16fa <handleSerialConsole+0x6f0>
    149a:	82 30       	cpi	r24, 0x02	; 2
						USART_Transmit("SUCCESSFULLY REGISTERED\r\n")	;
    149c:	91 05       	cpc	r25, r1
    149e:	31 f5       	brne	.+76     	; 0x14ec <handleSerialConsole+0x4e2>
    14a0:	42 e0       	ldi	r20, 0x02	; 2
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	6c e0       	ldi	r22, 0x0C	; 12
					}else{
						USART_Transmit("Park full. You can't register !!!!!!! \r\n");
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	87 e1       	ldi	r24, 0x17	; 23
    14aa:	92 e0       	ldi	r25, 0x02	; 2
    14ac:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
					}
					
					
				}else if(response==2){
    14b0:	42 e0       	ldi	r20, 0x02	; 2
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	64 e2       	ldi	r22, 0x24	; 36
					read_data_from_eeprom( &tourist_park_capacity,PARK_CAPACITY_ADDRESS, sizeof(tourist_park_capacity));
    14b6:	71 e0       	ldi	r23, 0x01	; 1
    14b8:	82 e4       	ldi	r24, 0x42	; 66
    14ba:	9a e0       	ldi	r25, 0x0A	; 10
    14bc:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    14c0:	20 91 42 0a 	lds	r18, 0x0A42	; 0x800a42 <touristsInPark>
    14c4:	30 91 43 0a 	lds	r19, 0x0A43	; 0x800a43 <touristsInPark+0x1>
					read_data_from_eeprom( &touristsInPark,TOURISTS_IN_PARK_ADDRESS, sizeof(touristsInPark));
    14c8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <tourist_park_capacity>
    14cc:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <tourist_park_capacity+0x1>
    14d0:	28 17       	cp	r18, r24
    14d2:	39 07       	cpc	r19, r25
    14d4:	34 f4       	brge	.+12     	; 0x14e2 <handleSerialConsole+0x4d8>
					
					if (touristsInPark < tourist_park_capacity){
    14d6:	6e db       	rcall	.-2340   	; 0xbb4 <register_waiting_Car_serial>
    14d8:	84 e1       	ldi	r24, 0x14	; 20
    14da:	98 e0       	ldi	r25, 0x08	; 8
    14dc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    14e0:	0c c1       	rjmp	.+536    	; 0x16fa <handleSerialConsole+0x6f0>
    14e2:	8e e2       	ldi	r24, 0x2E	; 46
    14e4:	98 e0       	ldi	r25, 0x08	; 8
    14e6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
						register_waiting_Car_serial();
    14ea:	07 c1       	rjmp	.+526    	; 0x16fa <handleSerialConsole+0x6f0>
    14ec:	03 97       	sbiw	r24, 0x03	; 3
						USART_Transmit("SUCCESSFULLY REGISTERED\r\n")	;
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <handleSerialConsole+0x4ea>
    14f0:	52 d8       	rcall	.-3932   	; 0x596 <exit_gate_registration>
    14f2:	03 c1       	rjmp	.+518    	; 0x16fa <handleSerialConsole+0x6f0>
    14f4:	87 e5       	ldi	r24, 0x57	; 87
    14f6:	98 e0       	ldi	r25, 0x08	; 8
					}else{
						USART_Transmit("Park full. You can't register !!!!!!! \r\n");
    14f8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    14fc:	fe c0       	rjmp	.+508    	; 0x16fa <handleSerialConsole+0x6f0>
    14fe:	42 e0       	ldi	r20, 0x02	; 2
    1500:	50 e0       	ldi	r21, 0x00	; 0
					}
				} else if (response==3)	{
    1502:	68 e3       	ldi	r22, 0x38	; 56
    1504:	71 e0       	ldi	r23, 0x01	; 1
					exit_gate_registration();
    1506:	88 e3       	ldi	r24, 0x38	; 56
    1508:	9a e0       	ldi	r25, 0x0A	; 10
    150a:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
					//exit_gate_registration
					
				}else{
					USART_Transmit("Invalid response!!!\r\n")	;
    150e:	80 91 39 0a 	lds	r24, 0x0A39	; 0x800a39 <num_vehicles_outside+0x1>
    1512:	8f 93       	push	r24
    1514:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <num_vehicles_outside>
				}
			break;
			
			case 8:
				read_data_from_eeprom( &num_vehicles_outside,NUM_VEHICLES_OUTSIDE_ADDRESS, sizeof(num_vehicles_outside));
    1518:	8f 93       	push	r24
    151a:	86 e4       	ldi	r24, 0x46	; 70
    151c:	96 e0       	ldi	r25, 0x06	; 6
    151e:	9f 93       	push	r25
    1520:	8f 93       	push	r24
    1522:	8e 01       	movw	r16, r28
    1524:	0f 5f       	subi	r16, 0xFF	; 255
				
				char v_out_park[4];
				sprintf(v_out_park, "%d", num_vehicles_outside);
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	1f 93       	push	r17
    152a:	0f 93       	push	r16
    152c:	71 d4       	rcall	.+2274   	; 0x1e10 <sprintf>
    152e:	8d e6       	ldi	r24, 0x6D	; 109
    1530:	98 e0       	ldi	r25, 0x08	; 8
    1532:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    1536:	c8 01       	movw	r24, r16
    1538:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    153c:	84 e5       	ldi	r24, 0x54	; 84
    153e:	98 e0       	ldi	r25, 0x08	; 8
    1540:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    1544:	84 e5       	ldi	r24, 0x54	; 84
    1546:	98 e0       	ldi	r25, 0x08	; 8
				
				USART_Transmit("Vehicles Outside park: ");
    1548:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
				USART_Transmit(v_out_park);
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
				USART_Transmit("\r\n");
    1556:	0f 90       	pop	r0
    1558:	d0 c0       	rjmp	.+416    	; 0x16fa <handleSerialConsole+0x6f0>
    155a:	42 e0       	ldi	r20, 0x02	; 2
    155c:	50 e0       	ldi	r21, 0x00	; 0
				USART_Transmit("\r\n");
    155e:	6c e0       	ldi	r22, 0x0C	; 12
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	87 e1       	ldi	r24, 0x17	; 23
    1564:	92 e0       	ldi	r25, 0x02	; 2
			break;
    1566:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    156a:	42 e0       	ldi	r20, 0x02	; 2
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	64 e2       	ldi	r22, 0x24	; 36
    1570:	71 e0       	ldi	r23, 0x01	; 1
    1572:	82 e4       	ldi	r24, 0x42	; 66
			
			case 9:
				read_data_from_eeprom( &tourist_park_capacity,PARK_CAPACITY_ADDRESS, sizeof(tourist_park_capacity));
    1574:	9a e0       	ldi	r25, 0x0A	; 10
    1576:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    157a:	20 91 42 0a 	lds	r18, 0x0A42	; 0x800a42 <touristsInPark>
    157e:	30 91 43 0a 	lds	r19, 0x0A43	; 0x800a43 <touristsInPark+0x1>
    1582:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <tourist_park_capacity>
				read_data_from_eeprom( &touristsInPark,TOURISTS_IN_PARK_ADDRESS, sizeof(touristsInPark));
    1586:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <tourist_park_capacity+0x1>
    158a:	28 17       	cp	r18, r24
    158c:	39 07       	cpc	r19, r25
    158e:	6c f4       	brge	.+26     	; 0x15aa <handleSerialConsole+0x5a0>
    1590:	85 e8       	ldi	r24, 0x85	; 133
    1592:	98 e0       	ldi	r25, 0x08	; 8
				if (touristsInPark < tourist_park_capacity)	{
    1594:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    1598:	84 e5       	ldi	r24, 0x54	; 84
    159a:	98 e0       	ldi	r25, 0x08	; 8
    159c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    15a0:	84 e5       	ldi	r24, 0x54	; 84
    15a2:	98 e0       	ldi	r25, 0x08	; 8
    15a4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    15a8:	a8 c0       	rjmp	.+336    	; 0x16fa <handleSerialConsole+0x6f0>
					USART_Transmit("The Park is not yet full.");
    15aa:	8f e9       	ldi	r24, 0x9F	; 159
    15ac:	98 e0       	ldi	r25, 0x08	; 8
    15ae:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
					USART_Transmit("\r\n");
    15b2:	84 e5       	ldi	r24, 0x54	; 84
    15b4:	98 e0       	ldi	r25, 0x08	; 8
    15b6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
					USART_Transmit("\r\n");
    15ba:	84 e5       	ldi	r24, 0x54	; 84
    15bc:	98 e0       	ldi	r25, 0x08	; 8
    15be:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    15c2:	9b c0       	rjmp	.+310    	; 0x16fa <handleSerialConsole+0x6f0>
				}else{
					USART_Transmit("Park is full to capacity.");
    15c4:	46 e0       	ldi	r20, 0x06	; 6
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	60 e1       	ldi	r22, 0x10	; 16
    15ca:	70 e0       	ldi	r23, 0x00	; 0
					
					USART_Transmit("\r\n");
    15cc:	81 e1       	ldi	r24, 0x11	; 17
    15ce:	92 e0       	ldi	r25, 0x02	; 2
    15d0:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
					USART_Transmit("\r\n");
    15d4:	4d e0       	ldi	r20, 0x0D	; 13
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	6e e7       	ldi	r22, 0x7E	; 126
    15da:	71 e0       	ldi	r23, 0x01	; 1
    15dc:	84 e0       	ldi	r24, 0x04	; 4
				}
			break;
			
			case 10:
				//Verify Username
				read_data_from_eeprom( maintenancePassword,MAINTENANCE_PASSWORD_ADDRESS, sizeof(maintenancePassword));
    15de:	92 e0       	ldi	r25, 0x02	; 2
    15e0:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
    15e4:	89 eb       	ldi	r24, 0xB9	; 185
    15e6:	98 e0       	ldi	r25, 0x08	; 8
    15e8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    15ec:	8f ec       	ldi	r24, 0xCF	; 207
				read_data_from_eeprom( user_name,USER_NAME_ADDRESS, sizeof(user_name));
    15ee:	98 e0       	ldi	r25, 0x08	; 8
    15f0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    15f4:	00 e0       	ldi	r16, 0x00	; 0
    15f6:	10 e0       	ldi	r17, 0x00	; 0
    15f8:	0d c0       	rjmp	.+26     	; 0x1614 <handleSerialConsole+0x60a>
    15fa:	0e 94 86 02 	call	0x50c	; 0x50c <USART_Receive>
				USART_Transmit("LOGIN FIRST PLEASE \r\n");
    15fe:	e1 e0       	ldi	r30, 0x01	; 1
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	ec 0f       	add	r30, r28
    1604:	fd 1f       	adc	r31, r29
				USART_Transmit("Enter Username: \r\n");
    1606:	e0 0f       	add	r30, r16
    1608:	f1 1f       	adc	r31, r17
    160a:	80 83       	st	Z, r24
    160c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <USART_Transmitchar>
				
				unsigned char username_array[12];
				for (int i=0; i<12; i++){
    1610:	0f 5f       	subi	r16, 0xFF	; 255
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
					username_array[i]=USART_Receive();
    1614:	0c 30       	cpi	r16, 0x0C	; 12
    1616:	11 05       	cpc	r17, r1
    1618:	84 f3       	brlt	.-32     	; 0x15fa <handleSerialConsole+0x5f0>
    161a:	84 e5       	ldi	r24, 0x54	; 84
    161c:	98 e0       	ldi	r25, 0x08	; 8
    161e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    1622:	e4 e0       	ldi	r30, 0x04	; 4
    1624:	f2 e0       	ldi	r31, 0x02	; 2
					USART_Transmitchar(username_array[i]) ;
    1626:	01 90       	ld	r0, Z+
    1628:	00 20       	and	r0, r0
				read_data_from_eeprom( user_name,USER_NAME_ADDRESS, sizeof(user_name));
				USART_Transmit("LOGIN FIRST PLEASE \r\n");
				USART_Transmit("Enter Username: \r\n");
				
				unsigned char username_array[12];
				for (int i=0; i<12; i++){
    162a:	e9 f7       	brne	.-6      	; 0x1626 <handleSerialConsole+0x61c>
    162c:	31 97       	sbiw	r30, 0x01	; 1
    162e:	af 01       	movw	r20, r30
    1630:	44 50       	subi	r20, 0x04	; 4
    1632:	52 40       	sbci	r21, 0x02	; 2
					username_array[i]=USART_Receive();
					USART_Transmitchar(username_array[i]) ;
				}
				USART_Transmit("\r\n");
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e c0       	rjmp	.+28     	; 0x1656 <handleSerialConsole+0x64c>
    163a:	fc 01       	movw	r30, r24
				int username_length = strlen(user_name);
    163c:	ec 5f       	subi	r30, 0xFC	; 252
    163e:	fd 4f       	sbci	r31, 0xFD	; 253
    1640:	30 81       	ld	r19, Z
    1642:	e1 e0       	ldi	r30, 0x01	; 1
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	ec 0f       	add	r30, r28
    1648:	fd 1f       	adc	r31, r29
    164a:	e8 0f       	add	r30, r24
    164c:	f9 1f       	adc	r31, r25
				
				int usrname_Equal = 1;

				for (int i = 0; i < username_length; i++) {
    164e:	20 81       	ld	r18, Z
    1650:	32 13       	cpse	r19, r18
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <handleSerialConsole+0x65a>
					if (user_name[i] != username_array[i]) {
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	84 17       	cp	r24, r20
    1658:	95 07       	cpc	r25, r21
    165a:	7c f3       	brlt	.-34     	; 0x163a <handleSerialConsole+0x630>
    165c:	ee 24       	eor	r14, r14
    165e:	e3 94       	inc	r14
    1660:	f1 2c       	mov	r15, r1
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <handleSerialConsole+0x65e>
    1664:	e1 2c       	mov	r14, r1
    1666:	f1 2c       	mov	r15, r1
    1668:	82 ee       	ldi	r24, 0xE2	; 226
    166a:	98 e0       	ldi	r25, 0x08	; 8
    166c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
				USART_Transmit("\r\n");
				int username_length = strlen(user_name);
				
				int usrname_Equal = 1;

				for (int i = 0; i < username_length; i++) {
    1670:	00 e0       	ldi	r16, 0x00	; 0
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	0e c0       	rjmp	.+28     	; 0x1692 <handleSerialConsole+0x688>
					USART_Transmitchar(username_array[i]) ;
				}
				USART_Transmit("\r\n");
				int username_length = strlen(user_name);
				
				int usrname_Equal = 1;
    1676:	0e 94 86 02 	call	0x50c	; 0x50c <USART_Receive>
    167a:	ed e0       	ldi	r30, 0x0D	; 13
    167c:	f0 e0       	ldi	r31, 0x00	; 0

				for (int i = 0; i < username_length; i++) {
					if (user_name[i] != username_array[i]) {
						usrname_Equal = 0;  // Arrays are not equal.
    167e:	ec 0f       	add	r30, r28
    1680:	fd 1f       	adc	r31, r29
					}
				}
				
				
				//Verify password
				USART_Transmit("Enter password: \r\n");
    1682:	e0 0f       	add	r30, r16
    1684:	f1 1f       	adc	r31, r17
    1686:	80 83       	st	Z, r24
    1688:	8a e2       	ldi	r24, 0x2A	; 42
				
				unsigned char passw_arr[5];
				for (int j=0; j<5; j++){
    168a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <USART_Transmitchar>
    168e:	0f 5f       	subi	r16, 0xFF	; 255
					passw_arr[j]=USART_Receive();
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	05 30       	cpi	r16, 0x05	; 5
    1694:	11 05       	cpc	r17, r1
    1696:	7c f3       	brlt	.-34     	; 0x1676 <handleSerialConsole+0x66c>
    1698:	84 e5       	ldi	r24, 0x54	; 84
    169a:	98 e0       	ldi	r25, 0x08	; 8
    169c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
					USART_Transmitchar('*') ;
    16a0:	e1 e1       	ldi	r30, 0x11	; 17
    16a2:	f2 e0       	ldi	r31, 0x02	; 2
    16a4:	01 90       	ld	r0, Z+
				
				//Verify password
				USART_Transmit("Enter password: \r\n");
				
				unsigned char passw_arr[5];
				for (int j=0; j<5; j++){
    16a6:	00 20       	and	r0, r0
    16a8:	e9 f7       	brne	.-6      	; 0x16a4 <handleSerialConsole+0x69a>
    16aa:	31 97       	sbiw	r30, 0x01	; 1
    16ac:	af 01       	movw	r20, r30
    16ae:	41 51       	subi	r20, 0x11	; 17
					passw_arr[j]=USART_Receive();
					USART_Transmitchar('*') ;
				}
				USART_Transmit("\r\n");
    16b0:	52 40       	sbci	r21, 0x02	; 2
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e c0       	rjmp	.+28     	; 0x16d4 <handleSerialConsole+0x6ca>
				
				int password_length = strlen(maintenancePassword);
    16b8:	fc 01       	movw	r30, r24
    16ba:	ef 5e       	subi	r30, 0xEF	; 239
    16bc:	fd 4f       	sbci	r31, 0xFD	; 253
    16be:	30 81       	ld	r19, Z
    16c0:	ed e0       	ldi	r30, 0x0D	; 13
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	ec 0f       	add	r30, r28
    16c6:	fd 1f       	adc	r31, r29
    16c8:	e8 0f       	add	r30, r24
				
				int password_Equal = 1;

				for (int i = 0; i < password_length; i++) {
    16ca:	f9 1f       	adc	r31, r25
    16cc:	20 81       	ld	r18, Z
    16ce:	32 13       	cpse	r19, r18
					if (maintenancePassword[i] != passw_arr[i]) {
    16d0:	07 c0       	rjmp	.+14     	; 0x16e0 <handleSerialConsole+0x6d6>
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	84 17       	cp	r24, r20
    16d6:	95 07       	cpc	r25, r21
    16d8:	7c f3       	brlt	.-34     	; 0x16b8 <handleSerialConsole+0x6ae>
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <handleSerialConsole+0x6da>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	29 f4       	brne	.+10     	; 0x16f2 <handleSerialConsole+0x6e8>
    16e8:	ea 94       	dec	r14
				
				int password_length = strlen(maintenancePassword);
				
				int password_Equal = 1;

				for (int i = 0; i < password_length; i++) {
    16ea:	ef 28       	or	r14, r15
    16ec:	11 f4       	brne	.+4      	; 0x16f2 <handleSerialConsole+0x6e8>
    16ee:	e2 db       	rcall	.-2108   	; 0xeb4 <withdraw_all_cash>
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <handleSerialConsole+0x6f0>
				}
				USART_Transmit("\r\n");
				
				int password_length = strlen(maintenancePassword);
				
				int password_Equal = 1;
    16f2:	85 ef       	ldi	r24, 0xF5	; 245
    16f4:	98 e0       	ldi	r25, 0x08	; 8
    16f6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>

				for (int i = 0; i < password_length; i++) {
					if (maintenancePassword[i] != passw_arr[i]) {
						password_Equal = 0;  // Arrays are not equal.
    16fa:	84 e5       	ldi	r24, 0x54	; 84
						break;
					}
				}
			
			
				if ((password_Equal==1) && (usrname_Equal==1)) {
    16fc:	98 e0       	ldi	r25, 0x08	; 8
    16fe:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    1702:	84 e5       	ldi	r24, 0x54	; 84
    1704:	98 e0       	ldi	r25, 0x08	; 8
					//withdraw cash
					withdraw_all_cash();
    1706:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_Transmit>
    170a:	8f cc       	rjmp	.-1762   	; 0x102a <handleSerialConsole+0x20>

0000170c <water_function>:
				}  else{
					USART_Transmit("INVALID USERNAME OR PASSWORD");
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
			
			default:
			// Handle invalid choice
			break;
		}
		USART_Transmit("\r\n");
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
		USART_Transmit("\r\n");
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	2e 97       	sbiw	r28, 0x0e	; 14
    1722:	0f b6       	in	r0, 0x3f	; 63
	}
    1724:	f8 94       	cli
}



void water_function() {
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
	lcd_cmd_t(0x01);  //CLEAR SCREEN
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
	lcd_cmd_t(0x80);
    1732:	80 e8       	ldi	r24, 0x80	; 128
    1734:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
	lcd_data_print_t("Purchase water");
    1738:	82 e1       	ldi	r24, 0x12	; 18
    173a:	99 e0       	ldi	r25, 0x09	; 9
    173c:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>

	lcd_cmd_t(0xc4);
    1740:	84 ec       	ldi	r24, 0xC4	; 196
    1742:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
	lcd_data_print_t("@ UGX1500");
    1746:	81 e2       	ldi	r24, 0x21	; 33
    1748:	99 e0       	ldi	r25, 0x09	; 9
    174a:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>

	// Calculate cost, display it on the LCD
	lcd_cmd_t(0x94);
    174e:	84 e9       	ldi	r24, 0x94	; 148
    1750:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
	lcd_data_print_t("No. of bottles");
    1754:	8b e2       	ldi	r24, 0x2B	; 43
    1756:	99 e0       	ldi	r25, 0x09	; 9
    1758:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
	int numBottles=keypad_fun_t();
    175c:	0e 94 cb 01 	call	0x396	; 0x396 <keypad_fun_t>
    1760:	8c 01       	movw	r16, r24
	while (numBottles==200)	{
    1762:	03 c0       	rjmp	.+6      	; 0x176a <water_function+0x5e>
		numBottles =keypad_fun_t();
    1764:	0e 94 cb 01 	call	0x396	; 0x396 <keypad_fun_t>
    1768:	8c 01       	movw	r16, r24

	// Calculate cost, display it on the LCD
	lcd_cmd_t(0x94);
	lcd_data_print_t("No. of bottles");
	int numBottles=keypad_fun_t();
	while (numBottles==200)	{
    176a:	08 3c       	cpi	r16, 0xC8	; 200
    176c:	11 05       	cpc	r17, r1
    176e:	d1 f3       	breq	.-12     	; 0x1764 <water_function+0x58>
		numBottles =keypad_fun_t();
	}
	//_delay_ms(800);
	char bottles[2];
	sprintf(bottles, "%d", numBottles);
    1770:	1f 93       	push	r17
    1772:	0f 93       	push	r16
    1774:	0f 2e       	mov	r0, r31
    1776:	f6 e4       	ldi	r31, 0x46	; 70
    1778:	ef 2e       	mov	r14, r31
    177a:	f6 e0       	ldi	r31, 0x06	; 6
    177c:	ff 2e       	mov	r15, r31
    177e:	f0 2d       	mov	r31, r0
    1780:	ff 92       	push	r15
    1782:	ef 92       	push	r14
    1784:	ce 01       	movw	r24, r28
    1786:	01 96       	adiw	r24, 0x01	; 1
    1788:	6c 01       	movw	r12, r24
    178a:	9f 93       	push	r25
    178c:	8f 93       	push	r24
    178e:	40 d3       	rcall	.+1664   	; 0x1e10 <sprintf>

	lcd_cmd_t(0xd4);
    1790:	84 ed       	ldi	r24, 0xD4	; 212
    1792:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
	lcd_data_print_t(bottles);
    1796:	c6 01       	movw	r24, r12
    1798:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
    179c:	9f e7       	ldi	r25, 0x7F	; 127
    179e:	2a e1       	ldi	r18, 0x1A	; 26
    17a0:	46 e0       	ldi	r20, 0x06	; 6
    17a2:	91 50       	subi	r25, 0x01	; 1
    17a4:	20 40       	sbci	r18, 0x00	; 0
    17a6:	40 40       	sbci	r20, 0x00	; 0
    17a8:	e1 f7       	brne	.-8      	; 0x17a2 <water_function+0x96>
    17aa:	00 c0       	rjmp	.+0      	; 0x17ac <water_function+0xa0>
    17ac:	00 00       	nop
	_delay_ms(2000);

	int cash=numBottles*1500;
    17ae:	2c ed       	ldi	r18, 0xDC	; 220
    17b0:	35 e0       	ldi	r19, 0x05	; 5
    17b2:	02 9f       	mul	r16, r18
    17b4:	c0 01       	movw	r24, r0
    17b6:	03 9f       	mul	r16, r19
    17b8:	90 0d       	add	r25, r0
    17ba:	12 9f       	mul	r17, r18
    17bc:	90 0d       	add	r25, r0
    17be:	11 24       	eor	r1, r1
	char cashS[10];
	
	sprintf(cashS, "%d", cash);
    17c0:	9f 93       	push	r25
    17c2:	8f 93       	push	r24
    17c4:	ff 92       	push	r15
    17c6:	ef 92       	push	r14
    17c8:	7e 01       	movw	r14, r28
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	e8 0e       	add	r14, r24
    17ce:	f1 1c       	adc	r15, r1
    17d0:	ff 92       	push	r15
    17d2:	ef 92       	push	r14
    17d4:	1d d3       	rcall	.+1594   	; 0x1e10 <sprintf>

	lcd_cmd_t(0x01);
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
	lcd_cmd_t(0x80);
    17dc:	80 e8       	ldi	r24, 0x80	; 128
    17de:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
	lcd_data_print_t("Total: UGX");
    17e2:	8a e3       	ldi	r24, 0x3A	; 58
    17e4:	99 e0       	ldi	r25, 0x09	; 9
    17e6:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
	lcd_cmd_t(0x8a);
    17ea:	8a e8       	ldi	r24, 0x8A	; 138
    17ec:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
	lcd_data_print_t(cashS);
    17f0:	c7 01       	movw	r24, r14
    17f2:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>

	lcd_cmd_t(0xc0)	 ;
    17f6:	80 ec       	ldi	r24, 0xC0	; 192
    17f8:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
	lcd_data_print_t("1:Pay Cash 2:Exit");
    17fc:	85 e4       	ldi	r24, 0x45	; 69
    17fe:	99 e0       	ldi	r25, 0x09	; 9
    1800:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
	int response=keypad_fun_t();
    1804:	0e 94 cb 01 	call	0x396	; 0x396 <keypad_fun_t>
    1808:	7c 01       	movw	r14, r24
	while(response==200){
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	03 c0       	rjmp	.+6      	; 0x181c <water_function+0x110>
		response=keypad_fun_t();
    1816:	0e 94 cb 01 	call	0x396	; 0x396 <keypad_fun_t>
    181a:	7c 01       	movw	r14, r24
	lcd_data_print_t(cashS);

	lcd_cmd_t(0xc0)	 ;
	lcd_data_print_t("1:Pay Cash 2:Exit");
	int response=keypad_fun_t();
	while(response==200){
    181c:	98 ec       	ldi	r25, 0xC8	; 200
    181e:	e9 16       	cp	r14, r25
    1820:	f1 04       	cpc	r15, r1
    1822:	c9 f3       	breq	.-14     	; 0x1816 <water_function+0x10a>
		response=keypad_fun_t();
	}
	
	char resp[2];
	sprintf(resp, "%d", response);
    1824:	ff 92       	push	r15
    1826:	ef 92       	push	r14
    1828:	86 e4       	ldi	r24, 0x46	; 70
    182a:	96 e0       	ldi	r25, 0x06	; 6
    182c:	9f 93       	push	r25
    182e:	8f 93       	push	r24
    1830:	6e 01       	movw	r12, r28
    1832:	2d e0       	ldi	r18, 0x0D	; 13
    1834:	c2 0e       	add	r12, r18
    1836:	d1 1c       	adc	r13, r1
    1838:	df 92       	push	r13
    183a:	cf 92       	push	r12
    183c:	e9 d2       	rcall	.+1490   	; 0x1e10 <sprintf>
	lcd_cmd_t(0xd4);
    183e:	84 ed       	ldi	r24, 0xD4	; 212
    1840:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
	lcd_data_print_t(resp);
    1844:	c6 01       	movw	r24, r12
    1846:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
    184a:	4f e3       	ldi	r20, 0x3F	; 63
    184c:	8d e0       	ldi	r24, 0x0D	; 13
    184e:	93 e0       	ldi	r25, 0x03	; 3
    1850:	41 50       	subi	r20, 0x01	; 1
    1852:	80 40       	sbci	r24, 0x00	; 0
    1854:	90 40       	sbci	r25, 0x00	; 0
    1856:	e1 f7       	brne	.-8      	; 0x1850 <water_function+0x144>
    1858:	00 c0       	rjmp	.+0      	; 0x185a <water_function+0x14e>
    185a:	00 00       	nop
	
	_delay_ms(1000);
	
	if (response==1){
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	21 e0       	ldi	r18, 0x01	; 1
    186a:	e2 16       	cp	r14, r18
    186c:	f1 04       	cpc	r15, r1
    186e:	09 f0       	breq	.+2      	; 0x1872 <water_function+0x166>
    1870:	fc c0       	rjmp	.+504    	; 0x1a6a <water_function+0x35e>
		lcd_cmd_t(0x01);
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_cmd_t(0x80);
    1878:	80 e8       	ldi	r24, 0x80	; 128
    187a:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_data_print_t("Opening money slot..");
    187e:	87 e5       	ldi	r24, 0x57	; 87
    1880:	99 e0       	ldi	r25, 0x09	; 9
    1882:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
		// Open money slot and wait for funds to be inserted		
		for (int j=0; j<3; j++)	 {
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	1c c0       	rjmp	.+56     	; 0x18c4 <water_function+0x1b8>
			PORTL |=(1<<0);
    188c:	eb e0       	ldi	r30, 0x0B	; 11
    188e:	f1 e0       	ldi	r31, 0x01	; 1
    1890:	80 81       	ld	r24, Z
    1892:	81 60       	ori	r24, 0x01	; 1
    1894:	80 83       	st	Z, r24
    1896:	4f e3       	ldi	r20, 0x3F	; 63
    1898:	8d e0       	ldi	r24, 0x0D	; 13
    189a:	93 e0       	ldi	r25, 0x03	; 3
    189c:	41 50       	subi	r20, 0x01	; 1
    189e:	80 40       	sbci	r24, 0x00	; 0
    18a0:	90 40       	sbci	r25, 0x00	; 0
    18a2:	e1 f7       	brne	.-8      	; 0x189c <water_function+0x190>
    18a4:	00 c0       	rjmp	.+0      	; 0x18a6 <water_function+0x19a>
    18a6:	00 00       	nop
			_delay_ms(1000);	 //delay equivalent to 3 motor revolutions
									
			PORTL &= ~(1<<0);
    18a8:	80 81       	ld	r24, Z
    18aa:	8e 7f       	andi	r24, 0xFE	; 254
    18ac:	80 83       	st	Z, r24
    18ae:	4f e3       	ldi	r20, 0x3F	; 63
    18b0:	8d e0       	ldi	r24, 0x0D	; 13
    18b2:	93 e0       	ldi	r25, 0x03	; 3
    18b4:	41 50       	subi	r20, 0x01	; 1
    18b6:	80 40       	sbci	r24, 0x00	; 0
    18b8:	90 40       	sbci	r25, 0x00	; 0
    18ba:	e1 f7       	brne	.-8      	; 0x18b4 <water_function+0x1a8>
    18bc:	00 c0       	rjmp	.+0      	; 0x18be <water_function+0x1b2>
    18be:	00 00       	nop
	if (response==1){
		lcd_cmd_t(0x01);
		lcd_cmd_t(0x80);
		lcd_data_print_t("Opening money slot..");
		// Open money slot and wait for funds to be inserted		
		for (int j=0; j<3; j++)	 {
    18c0:	2f 5f       	subi	r18, 0xFF	; 255
    18c2:	3f 4f       	sbci	r19, 0xFF	; 255
    18c4:	23 30       	cpi	r18, 0x03	; 3
    18c6:	31 05       	cpc	r19, r1
    18c8:	0c f3       	brlt	.-62     	; 0x188c <water_function+0x180>
									
			PORTL &= ~(1<<0);
			_delay_ms(1000); 
		}
		
		lcd_cmd_t(0xc0);
    18ca:	80 ec       	ldi	r24, 0xC0	; 192
    18cc:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_data_print_t("Put the cash in slot");
    18d0:	8c e6       	ldi	r24, 0x6C	; 108
    18d2:	99 e0       	ldi	r25, 0x09	; 9
    18d4:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
    18d8:	2f e7       	ldi	r18, 0x7F	; 127
    18da:	4a e1       	ldi	r20, 0x1A	; 26
    18dc:	86 e0       	ldi	r24, 0x06	; 6
    18de:	21 50       	subi	r18, 0x01	; 1
    18e0:	40 40       	sbci	r20, 0x00	; 0
    18e2:	80 40       	sbci	r24, 0x00	; 0
    18e4:	e1 f7       	brne	.-8      	; 0x18de <water_function+0x1d2>
    18e6:	00 c0       	rjmp	.+0      	; 0x18e8 <water_function+0x1dc>
    18e8:	00 00       	nop
		_delay_ms(2000);
		// Read data from the corresponding EEPROM addresses and store in variables
		read_data_from_eeprom( &water_price,WATER_PRICE_ADDRESS, sizeof(water_price));
    18ea:	44 e0       	ldi	r20, 0x04	; 4
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	68 e0       	ldi	r22, 0x08	; 8
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	89 e1       	ldi	r24, 0x19	; 25
    18f4:	92 e0       	ldi	r25, 0x02	; 2
    18f6:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
		
		read_data_from_eeprom( &num_bottles_in_fridge, NUM_BOTTLES_IN_FRIDGE_ADDRESS,sizeof(num_bottles_in_fridge));
    18fa:	42 e0       	ldi	r20, 0x02	; 2
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	6c e3       	ldi	r22, 0x3C	; 60
    1900:	71 e0       	ldi	r23, 0x01	; 1
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	92 e0       	ldi	r25, 0x02	; 2
    1906:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
		read_data_from_eeprom( &total_money_collected,TOTAL_MONEY_COLLECTED_ADDRESS, sizeof(total_money_collected));
    190a:	44 e0       	ldi	r20, 0x04	; 4
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	60 e4       	ldi	r22, 0x40	; 64
    1910:	71 e0       	ldi	r23, 0x01	; 1
    1912:	84 e3       	ldi	r24, 0x34	; 52
    1914:	9a e0       	ldi	r25, 0x0A	; 10
    1916:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
		read_data_from_eeprom( &fridge_money_collected,FRIDGE_MONEY_COLLECTED_ADDRESS, sizeof(fridge_money_collected));
    191a:	44 e0       	ldi	r20, 0x04	; 4
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	64 e5       	ldi	r22, 0x54	; 84
    1920:	71 e0       	ldi	r23, 0x01	; 1
    1922:	80 e3       	ldi	r24, 0x30	; 48
    1924:	9a e0       	ldi	r25, 0x0A	; 10
    1926:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
		
		// Calculations for waterBottles and collectedMoney
		num_bottles_in_fridge-=numBottles;
    192a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    192e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1932:	80 1b       	sub	r24, r16
    1934:	91 0b       	sbc	r25, r17
    1936:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    193a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		int cash=water_price * numBottles;
    193e:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <water_price>
    1942:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <water_price+0x1>
    1946:	20 9f       	mul	r18, r16
    1948:	c0 01       	movw	r24, r0
    194a:	21 9f       	mul	r18, r17
    194c:	90 0d       	add	r25, r0
    194e:	30 9f       	mul	r19, r16
    1950:	90 0d       	add	r25, r0
    1952:	11 24       	eor	r1, r1
		total_money_collected += cash;
    1954:	09 2e       	mov	r0, r25
    1956:	00 0c       	add	r0, r0
    1958:	aa 0b       	sbc	r26, r26
    195a:	bb 0b       	sbc	r27, r27
    195c:	40 91 34 0a 	lds	r20, 0x0A34	; 0x800a34 <total_money_collected>
    1960:	50 91 35 0a 	lds	r21, 0x0A35	; 0x800a35 <total_money_collected+0x1>
    1964:	60 91 36 0a 	lds	r22, 0x0A36	; 0x800a36 <total_money_collected+0x2>
    1968:	70 91 37 0a 	lds	r23, 0x0A37	; 0x800a37 <total_money_collected+0x3>
    196c:	48 0f       	add	r20, r24
    196e:	59 1f       	adc	r21, r25
    1970:	6a 1f       	adc	r22, r26
    1972:	7b 1f       	adc	r23, r27
    1974:	40 93 34 0a 	sts	0x0A34, r20	; 0x800a34 <total_money_collected>
    1978:	50 93 35 0a 	sts	0x0A35, r21	; 0x800a35 <total_money_collected+0x1>
    197c:	60 93 36 0a 	sts	0x0A36, r22	; 0x800a36 <total_money_collected+0x2>
    1980:	70 93 37 0a 	sts	0x0A37, r23	; 0x800a37 <total_money_collected+0x3>
		fridge_money_collected += cash;
    1984:	40 91 30 0a 	lds	r20, 0x0A30	; 0x800a30 <fridge_money_collected>
    1988:	50 91 31 0a 	lds	r21, 0x0A31	; 0x800a31 <fridge_money_collected+0x1>
    198c:	60 91 32 0a 	lds	r22, 0x0A32	; 0x800a32 <fridge_money_collected+0x2>
    1990:	70 91 33 0a 	lds	r23, 0x0A33	; 0x800a33 <fridge_money_collected+0x3>
    1994:	84 0f       	add	r24, r20
    1996:	95 1f       	adc	r25, r21
    1998:	a6 1f       	adc	r26, r22
    199a:	b7 1f       	adc	r27, r23
    199c:	80 93 30 0a 	sts	0x0A30, r24	; 0x800a30 <fridge_money_collected>
    19a0:	90 93 31 0a 	sts	0x0A31, r25	; 0x800a31 <fridge_money_collected+0x1>
    19a4:	a0 93 32 0a 	sts	0x0A32, r26	; 0x800a32 <fridge_money_collected+0x2>
    19a8:	b0 93 33 0a 	sts	0x0A33, r27	; 0x800a33 <fridge_money_collected+0x3>
		
		//	UPDATING EEPROM		
		write_data_to_eeprom( &num_bottles_in_fridge, NUM_BOTTLES_IN_FRIDGE_ADDRESS,sizeof(num_bottles_in_fridge));
    19ac:	42 e0       	ldi	r20, 0x02	; 2
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	6c e3       	ldi	r22, 0x3C	; 60
    19b2:	71 e0       	ldi	r23, 0x01	; 1
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	92 e0       	ldi	r25, 0x02	; 2
    19b8:	0e 94 9e 00 	call	0x13c	; 0x13c <write_data_to_eeprom>
		write_data_to_eeprom( &total_money_collected, TOTAL_MONEY_COLLECTED_ADDRESS,sizeof(total_money_collected));
    19bc:	44 e0       	ldi	r20, 0x04	; 4
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	60 e4       	ldi	r22, 0x40	; 64
    19c2:	71 e0       	ldi	r23, 0x01	; 1
    19c4:	84 e3       	ldi	r24, 0x34	; 52
    19c6:	9a e0       	ldi	r25, 0x0A	; 10
    19c8:	0e 94 9e 00 	call	0x13c	; 0x13c <write_data_to_eeprom>
		write_data_to_eeprom( &fridge_money_collected,FRIDGE_MONEY_COLLECTED_ADDRESS, sizeof(fridge_money_collected));
    19cc:	44 e0       	ldi	r20, 0x04	; 4
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	64 e5       	ldi	r22, 0x54	; 84
    19d2:	71 e0       	ldi	r23, 0x01	; 1
    19d4:	80 e3       	ldi	r24, 0x30	; 48
    19d6:	9a e0       	ldi	r25, 0x0A	; 10
    19d8:	0e 94 9e 00 	call	0x13c	; 0x13c <write_data_to_eeprom>
		
		
		// Dispense water bottles
		lcd_cmd_t(0x01);
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_cmd_t(0x80);
    19e2:	80 e8       	ldi	r24, 0x80	; 128
    19e4:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_data_print_t("Dispensing...");
    19e8:	81 e8       	ldi	r24, 0x81	; 129
    19ea:	99 e0       	ldi	r25, 0x09	; 9
    19ec:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
		lcd_cmd_t(0x94);
    19f0:	84 e9       	ldi	r24, 0x94	; 148
    19f2:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_data_print_t("Pick your bottles");
    19f6:	8f e8       	ldi	r24, 0x8F	; 143
    19f8:	99 e0       	ldi	r25, 0x09	; 9
    19fa:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
		for (int i=0; i<numBottles; i++) {
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	1c c0       	rjmp	.+56     	; 0x1a3c <water_function+0x330>
			PORTL |=(1<<1);
    1a04:	eb e0       	ldi	r30, 0x0B	; 11
    1a06:	f1 e0       	ldi	r31, 0x01	; 1
    1a08:	80 81       	ld	r24, Z
    1a0a:	82 60       	ori	r24, 0x02	; 2
    1a0c:	80 83       	st	Z, r24
    1a0e:	9f e7       	ldi	r25, 0x7F	; 127
    1a10:	4a e1       	ldi	r20, 0x1A	; 26
    1a12:	86 e0       	ldi	r24, 0x06	; 6
    1a14:	91 50       	subi	r25, 0x01	; 1
    1a16:	40 40       	sbci	r20, 0x00	; 0
    1a18:	80 40       	sbci	r24, 0x00	; 0
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <water_function+0x308>
    1a1c:	00 c0       	rjmp	.+0      	; 0x1a1e <water_function+0x312>
    1a1e:	00 00       	nop
			_delay_ms(2000);	 //delay equivalent to 2 motor revolutions
			PORTL &= ~(1<<1);
    1a20:	80 81       	ld	r24, Z
    1a22:	8d 7f       	andi	r24, 0xFD	; 253
    1a24:	80 83       	st	Z, r24
    1a26:	9f e7       	ldi	r25, 0x7F	; 127
    1a28:	4a e1       	ldi	r20, 0x1A	; 26
    1a2a:	86 e0       	ldi	r24, 0x06	; 6
    1a2c:	91 50       	subi	r25, 0x01	; 1
    1a2e:	40 40       	sbci	r20, 0x00	; 0
    1a30:	80 40       	sbci	r24, 0x00	; 0
    1a32:	e1 f7       	brne	.-8      	; 0x1a2c <water_function+0x320>
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <water_function+0x32a>
    1a36:	00 00       	nop
		lcd_cmd_t(0x01);
		lcd_cmd_t(0x80);
		lcd_data_print_t("Dispensing...");
		lcd_cmd_t(0x94);
		lcd_data_print_t("Pick your bottles");
		for (int i=0; i<numBottles; i++) {
    1a38:	2f 5f       	subi	r18, 0xFF	; 255
    1a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3c:	20 17       	cp	r18, r16
    1a3e:	31 07       	cpc	r19, r17
    1a40:	0c f3       	brlt	.-62     	; 0x1a04 <water_function+0x2f8>
			PORTL |=(1<<1);
			_delay_ms(2000);	 //delay equivalent to 2 motor revolutions
			PORTL &= ~(1<<1);
			_delay_ms(2000);	//delay before another bottle is released
		}
		lcd_cmd_t(0x01);
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_cmd_t(0x80);
    1a48:	80 e8       	ldi	r24, 0x80	; 128
    1a4a:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_data_print_t("Thanks for Buying");
    1a4e:	81 ea       	ldi	r24, 0xA1	; 161
    1a50:	99 e0       	ldi	r25, 0x09	; 9
    1a52:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
    1a56:	9f e7       	ldi	r25, 0x7F	; 127
    1a58:	2a e1       	ldi	r18, 0x1A	; 26
    1a5a:	46 e0       	ldi	r20, 0x06	; 6
    1a5c:	91 50       	subi	r25, 0x01	; 1
    1a5e:	20 40       	sbci	r18, 0x00	; 0
    1a60:	40 40       	sbci	r20, 0x00	; 0
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <water_function+0x350>
    1a64:	00 c0       	rjmp	.+0      	; 0x1a66 <water_function+0x35a>
    1a66:	00 00       	nop
    1a68:	2e c0       	rjmp	.+92     	; 0x1ac6 <water_function+0x3ba>
		_delay_ms(2000);
		
	}else if(response==2){
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	e8 16       	cp	r14, r24
    1a6e:	f1 04       	cpc	r15, r1
    1a70:	c9 f4       	brne	.+50     	; 0x1aa4 <water_function+0x398>
		
		lcd_cmd_t(0x01);
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_cmd_t(0x80);
    1a78:	80 e8       	ldi	r24, 0x80	; 128
    1a7a:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_data_print_t("Transaction was");
    1a7e:	83 eb       	ldi	r24, 0xB3	; 179
    1a80:	99 e0       	ldi	r25, 0x09	; 9
    1a82:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
		
		lcd_cmd_t(0xc0);
    1a86:	80 ec       	ldi	r24, 0xC0	; 192
    1a88:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_data_print_t("canceled");
    1a8c:	83 ec       	ldi	r24, 0xC3	; 195
    1a8e:	99 e0       	ldi	r25, 0x09	; 9
    1a90:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
		
		lcd_cmd_t(0x94);
    1a94:	84 e9       	ldi	r24, 0x94	; 148
    1a96:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_data_print_t("Please try again");
    1a9a:	8c ec       	ldi	r24, 0xCC	; 204
    1a9c:	99 e0       	ldi	r25, 0x09	; 9
    1a9e:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
    1aa2:	11 c0       	rjmp	.+34     	; 0x1ac6 <water_function+0x3ba>
		
	} else{
		lcd_cmd_t(0x01);
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_cmd_t(0x80);
    1aaa:	80 e8       	ldi	r24, 0x80	; 128
    1aac:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_data_print_t("INVALID INPUT");
    1ab0:	8d ed       	ldi	r24, 0xDD	; 221
    1ab2:	99 e0       	ldi	r25, 0x09	; 9
    1ab4:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
		
		lcd_cmd_t(0x94);
    1ab8:	84 e9       	ldi	r24, 0x94	; 148
    1aba:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd_t>
		lcd_data_print_t("Please try again");
    1abe:	8c ec       	ldi	r24, 0xCC	; 204
    1ac0:	99 e0       	ldi	r25, 0x09	; 9
    1ac2:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_data_print_t>
		
	}
}
    1ac6:	2e 96       	adiw	r28, 0x0e	; 14
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	ef 90       	pop	r14
    1ade:	df 90       	pop	r13
    1ae0:	cf 90       	pop	r12
    1ae2:	08 95       	ret

00001ae4 <__vector_6>:


ISR(INT5_vect){
    1ae4:	1f 92       	push	r1
    1ae6:	0f 92       	push	r0
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	0f 92       	push	r0
    1aec:	11 24       	eor	r1, r1
    1aee:	0b b6       	in	r0, 0x3b	; 59
    1af0:	0f 92       	push	r0
    1af2:	2f 93       	push	r18
    1af4:	3f 93       	push	r19
    1af6:	4f 93       	push	r20
    1af8:	5f 93       	push	r21
    1afa:	6f 93       	push	r22
    1afc:	7f 93       	push	r23
    1afe:	8f 93       	push	r24
    1b00:	9f 93       	push	r25
    1b02:	af 93       	push	r26
    1b04:	bf 93       	push	r27
    1b06:	ef 93       	push	r30
    1b08:	ff 93       	push	r31
	PORTE |=(1<<PE2); //buzzer high
    1b0a:	8e b1       	in	r24, 0x0e	; 14
    1b0c:	84 60       	ori	r24, 0x04	; 4
    1b0e:	8e b9       	out	0x0e, r24	; 14
	
	lcd_cmd(0x01);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	0e 94 23 01 	call	0x246	; 0x246 <lcd_cmd>
	lcd_cmd(0x80);
    1b16:	80 e8       	ldi	r24, 0x80	; 128
    1b18:	0e 94 23 01 	call	0x246	; 0x246 <lcd_cmd>
	lcd_data_print("Outgoing Tourist");
    1b1c:	8b ee       	ldi	r24, 0xEB	; 235
    1b1e:	99 e0       	ldi	r25, 0x09	; 9
    1b20:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_data_print>

	lcd_cmd(0xc7);
    1b24:	87 ec       	ldi	r24, 0xC7	; 199
    1b26:	0e 94 23 01 	call	0x246	; 0x246 <lcd_cmd>
	lcd_data_print("Vehicle");
    1b2a:	8c ef       	ldi	r24, 0xFC	; 252
    1b2c:	99 e0       	ldi	r25, 0x09	; 9
    1b2e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_data_print>
    1b32:	2f e9       	ldi	r18, 0x9F	; 159
    1b34:	86 e8       	ldi	r24, 0x86	; 134
    1b36:	91 e0       	ldi	r25, 0x01	; 1
    1b38:	21 50       	subi	r18, 0x01	; 1
    1b3a:	80 40       	sbci	r24, 0x00	; 0
    1b3c:	90 40       	sbci	r25, 0x00	; 0
    1b3e:	e1 f7       	brne	.-8      	; 0x1b38 <__vector_6+0x54>
    1b40:	00 c0       	rjmp	.+0      	; 0x1b42 <__vector_6+0x5e>
    1b42:	00 00       	nop
	_delay_ms(500);
	PORTE &=~(1<<PE2); //buzzer LOW
    1b44:	8e b1       	in	r24, 0x0e	; 14
    1b46:	8b 7f       	andi	r24, 0xFB	; 251
    1b48:	8e b9       	out	0x0e, r24	; 14
	
}
    1b4a:	ff 91       	pop	r31
    1b4c:	ef 91       	pop	r30
    1b4e:	bf 91       	pop	r27
    1b50:	af 91       	pop	r26
    1b52:	9f 91       	pop	r25
    1b54:	8f 91       	pop	r24
    1b56:	7f 91       	pop	r23
    1b58:	6f 91       	pop	r22
    1b5a:	5f 91       	pop	r21
    1b5c:	4f 91       	pop	r20
    1b5e:	3f 91       	pop	r19
    1b60:	2f 91       	pop	r18
    1b62:	0f 90       	pop	r0
    1b64:	0b be       	out	0x3b, r0	; 59
    1b66:	0f 90       	pop	r0
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	0f 90       	pop	r0
    1b6c:	1f 90       	pop	r1
    1b6e:	18 95       	reti

00001b70 <__vector_5>:

ISR(INT4_vect){
    1b70:	1f 92       	push	r1
    1b72:	0f 92       	push	r0
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	0f 92       	push	r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	0b b6       	in	r0, 0x3b	; 59
    1b7c:	0f 92       	push	r0
    1b7e:	2f 93       	push	r18
    1b80:	3f 93       	push	r19
    1b82:	4f 93       	push	r20
    1b84:	5f 93       	push	r21
    1b86:	6f 93       	push	r22
    1b88:	7f 93       	push	r23
    1b8a:	8f 93       	push	r24
    1b8c:	9f 93       	push	r25
    1b8e:	af 93       	push	r26
    1b90:	bf 93       	push	r27
    1b92:	ef 93       	push	r30
    1b94:	ff 93       	push	r31
	water_function();
    1b96:	ba dd       	rcall	.-1164   	; 0x170c <water_function>
}
    1b98:	ff 91       	pop	r31
    1b9a:	ef 91       	pop	r30
    1b9c:	bf 91       	pop	r27
    1b9e:	af 91       	pop	r26
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	7f 91       	pop	r23
    1ba6:	6f 91       	pop	r22
    1ba8:	5f 91       	pop	r21
    1baa:	4f 91       	pop	r20
    1bac:	3f 91       	pop	r19
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0b be       	out	0x3b, r0	; 59
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	0f 90       	pop	r0
    1bba:	1f 90       	pop	r1
    1bbc:	18 95       	reti

00001bbe <__vector_1>:

ISR(INT0_vect){
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	0b b6       	in	r0, 0x3b	; 59
    1bca:	0f 92       	push	r0
    1bcc:	2f 93       	push	r18
    1bce:	3f 93       	push	r19
    1bd0:	4f 93       	push	r20
    1bd2:	5f 93       	push	r21
    1bd4:	6f 93       	push	r22
    1bd6:	7f 93       	push	r23
    1bd8:	8f 93       	push	r24
    1bda:	9f 93       	push	r25
    1bdc:	af 93       	push	r26
    1bde:	bf 93       	push	r27
    1be0:	ef 93       	push	r30
    1be2:	ff 93       	push	r31
	PORTE |=(1<<PE2); //buzzer high
    1be4:	8e b1       	in	r24, 0x0e	; 14
    1be6:	84 60       	ori	r24, 0x04	; 4
    1be8:	8e b9       	out	0x0e, r24	; 14
	
	lcd_cmd(0x01);
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	0e 94 23 01 	call	0x246	; 0x246 <lcd_cmd>
	lcd_cmd(0x80);
    1bf0:	80 e8       	ldi	r24, 0x80	; 128
    1bf2:	0e 94 23 01 	call	0x246	; 0x246 <lcd_cmd>
	lcd_data_print("Incoming Tourist");
    1bf6:	84 e0       	ldi	r24, 0x04	; 4
    1bf8:	9a e0       	ldi	r25, 0x0A	; 10
    1bfa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_data_print>

	lcd_cmd(0xc7);
    1bfe:	87 ec       	ldi	r24, 0xC7	; 199
    1c00:	0e 94 23 01 	call	0x246	; 0x246 <lcd_cmd>
	lcd_data_print("Vehicle");
    1c04:	8c ef       	ldi	r24, 0xFC	; 252
    1c06:	99 e0       	ldi	r25, 0x09	; 9
    1c08:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_data_print>
    1c0c:	2f e7       	ldi	r18, 0x7F	; 127
    1c0e:	8a e1       	ldi	r24, 0x1A	; 26
    1c10:	96 e0       	ldi	r25, 0x06	; 6
    1c12:	21 50       	subi	r18, 0x01	; 1
    1c14:	80 40       	sbci	r24, 0x00	; 0
    1c16:	90 40       	sbci	r25, 0x00	; 0
    1c18:	e1 f7       	brne	.-8      	; 0x1c12 <__vector_1+0x54>
    1c1a:	00 c0       	rjmp	.+0      	; 0x1c1c <__vector_1+0x5e>
    1c1c:	00 00       	nop
	_delay_ms(2000);
	PORTE &=~(1<<PE2); //buzzer LOW
    1c1e:	8e b1       	in	r24, 0x0e	; 14
    1c20:	8b 7f       	andi	r24, 0xFB	; 251
    1c22:	8e b9       	out	0x0e, r24	; 14
	
	read_data_from_eeprom( &tourist_park_capacity,PARK_CAPACITY_ADDRESS, sizeof(tourist_park_capacity));
    1c24:	42 e0       	ldi	r20, 0x02	; 2
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	6c e0       	ldi	r22, 0x0C	; 12
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	87 e1       	ldi	r24, 0x17	; 23
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( &touristsInPark,TOURISTS_IN_PARK_ADDRESS, sizeof(touristsInPark));
    1c34:	42 e0       	ldi	r20, 0x02	; 2
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	64 e2       	ldi	r22, 0x24	; 36
    1c3a:	71 e0       	ldi	r23, 0x01	; 1
    1c3c:	82 e4       	ldi	r24, 0x42	; 66
    1c3e:	9a e0       	ldi	r25, 0x0A	; 10
    1c40:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
	read_data_from_eeprom( numberplate,NUMBERPLATE_ADDRESS, sizeof(numberplate));
    1c44:	48 e7       	ldi	r20, 0x78	; 120
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	64 e2       	ldi	r22, 0x24	; 36
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	84 e4       	ldi	r24, 0x44	; 68
    1c4e:	9a e0       	ldi	r25, 0x0A	; 10
    1c50:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
	int numberplates_in=countStoredRows(numberplate);
    1c54:	84 e4       	ldi	r24, 0x44	; 68
    1c56:	9a e0       	ldi	r25, 0x0A	; 10
    1c58:	0e 94 3e 02 	call	0x47c	; 0x47c <countStoredRows>
	int platecapacity= sizeof(numberplate)/sizeof(numberplate[0]);
	
	if ((touristsInPark < tourist_park_capacity) || (numberplates_in != platecapacity)){
    1c5c:	40 91 42 0a 	lds	r20, 0x0A42	; 0x800a42 <touristsInPark>
    1c60:	50 91 43 0a 	lds	r21, 0x0A43	; 0x800a43 <touristsInPark+0x1>
    1c64:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <tourist_park_capacity>
    1c68:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <tourist_park_capacity+0x1>
    1c6c:	42 17       	cp	r20, r18
    1c6e:	53 07       	cpc	r21, r19
    1c70:	64 f1       	brlt	.+88     	; 0x1cca <__vector_1+0x10c>
    1c72:	44 97       	sbiw	r24, 0x14	; 20
    1c74:	51 f5       	brne	.+84     	; 0x1cca <__vector_1+0x10c>
		//registerCar();
	}else {
		
		read_data_from_eeprom( &num_vehicles_outside,NUM_VEHICLES_OUTSIDE_ADDRESS, sizeof(num_vehicles_outside));
    1c76:	42 e0       	ldi	r20, 0x02	; 2
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	68 e3       	ldi	r22, 0x38	; 56
    1c7c:	71 e0       	ldi	r23, 0x01	; 1
    1c7e:	88 e3       	ldi	r24, 0x38	; 56
    1c80:	9a e0       	ldi	r25, 0x0A	; 10
    1c82:	0e 94 a1 00 	call	0x142	; 0x142 <read_data_from_eeprom>
		num_vehicles_outside +=1;
    1c86:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <num_vehicles_outside>
    1c8a:	90 91 39 0a 	lds	r25, 0x0A39	; 0x800a39 <num_vehicles_outside+0x1>
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <num_vehicles_outside+0x1>
    1c94:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <num_vehicles_outside>
		write_data_to_eeprom( &num_vehicles_outside,NUM_VEHICLES_OUTSIDE_ADDRESS, sizeof(num_vehicles_outside));
    1c98:	42 e0       	ldi	r20, 0x02	; 2
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	68 e3       	ldi	r22, 0x38	; 56
    1c9e:	71 e0       	ldi	r23, 0x01	; 1
    1ca0:	88 e3       	ldi	r24, 0x38	; 56
    1ca2:	9a e0       	ldi	r25, 0x0A	; 10
    1ca4:	0e 94 9e 00 	call	0x13c	; 0x13c <write_data_to_eeprom>
		
		lcd_cmd(0x01);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	0e 94 23 01 	call	0x246	; 0x246 <lcd_cmd>
		lcd_cmd(0x80);
    1cae:	80 e8       	ldi	r24, 0x80	; 128
    1cb0:	0e 94 23 01 	call	0x246	; 0x246 <lcd_cmd>
		lcd_data_print("Park Full");
    1cb4:	85 e1       	ldi	r24, 0x15	; 21
    1cb6:	9a e0       	ldi	r25, 0x0A	; 10
    1cb8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_data_print>
		
		lcd_cmd(0xc0);
    1cbc:	80 ec       	ldi	r24, 0xC0	; 192
    1cbe:	0e 94 23 01 	call	0x246	; 0x246 <lcd_cmd>
		lcd_data_print("PLEASE WAIT");
    1cc2:	8f e1       	ldi	r24, 0x1F	; 31
    1cc4:	9a e0       	ldi	r25, 0x0A	; 10
    1cc6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_data_print>
	}
	
}
    1cca:	ff 91       	pop	r31
    1ccc:	ef 91       	pop	r30
    1cce:	bf 91       	pop	r27
    1cd0:	af 91       	pop	r26
    1cd2:	9f 91       	pop	r25
    1cd4:	8f 91       	pop	r24
    1cd6:	7f 91       	pop	r23
    1cd8:	6f 91       	pop	r22
    1cda:	5f 91       	pop	r21
    1cdc:	4f 91       	pop	r20
    1cde:	3f 91       	pop	r19
    1ce0:	2f 91       	pop	r18
    1ce2:	0f 90       	pop	r0
    1ce4:	0b be       	out	0x3b, r0	; 59
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	0f 90       	pop	r0
    1cec:	1f 90       	pop	r1
    1cee:	18 95       	reti

00001cf0 <main>:



int main() {
	// Initialize UART for serial console communication
	USART_Init();
    1cf0:	0e 94 57 02 	call	0x4ae	; 0x4ae <USART_Init>
	
	
	DDRA =0XFF;			 //LCD
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	81 b9       	out	0x01, r24	; 1
	DDRB =0XFF;
    1cf8:	84 b9       	out	0x04, r24	; 4
	DDRF =0XFF;		 //LCD
    1cfa:	80 bb       	out	0x10, r24	; 16
	DDRC= 0X07;			 //KEYPAD- cols Output, rows Input.
    1cfc:	87 e0       	ldi	r24, 0x07	; 7
    1cfe:	87 b9       	out	0x07, r24	; 7
	DDRE |=(1<<2);		 //buzzer pin
    1d00:	9d b1       	in	r25, 0x0d	; 13
    1d02:	94 60       	ori	r25, 0x04	; 4
    1d04:	9d b9       	out	0x0d, r25	; 13
	DDRE &= ~(1<<4)&~(1<<5);
    1d06:	9d b1       	in	r25, 0x0d	; 13
    1d08:	9f 7c       	andi	r25, 0xCF	; 207
    1d0a:	9d b9       	out	0x0d, r25	; 13
	DDRD &= ~(1<<0);
    1d0c:	9a b1       	in	r25, 0x0a	; 10
    1d0e:	9e 7f       	andi	r25, 0xFE	; 254
    1d10:	9a b9       	out	0x0a, r25	; 10
	DDRL |=(1<<0) |(1<<1);
    1d12:	ea e0       	ldi	r30, 0x0A	; 10
    1d14:	f1 e0       	ldi	r31, 0x01	; 1
    1d16:	90 81       	ld	r25, Z
    1d18:	93 60       	ori	r25, 0x03	; 3
    1d1a:	90 83       	st	Z, r25
	DDRJ =0X07; //TOURIST KEYPAD
    1d1c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
	DDRC =0X07; //ATTENDANT KEYPAD
    1d20:	87 b9       	out	0x07, r24	; 7
	
	lcd_init_tourist();
    1d22:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_init_tourist>
	lcd_init();
    1d26:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_init>
	
	set_configurations();
    1d2a:	0e 94 a4 00 	call	0x148	; 0x148 <set_configurations>
	
	
	EIMSK |=(1<<INT0);
    1d2e:	8d b3       	in	r24, 0x1d	; 29
    1d30:	81 60       	ori	r24, 0x01	; 1
    1d32:	8d bb       	out	0x1d, r24	; 29
	EIMSK |=(1<<INT4);
    1d34:	8d b3       	in	r24, 0x1d	; 29
    1d36:	80 61       	ori	r24, 0x10	; 16
    1d38:	8d bb       	out	0x1d, r24	; 29
	EIMSK |=(1<<INT5);
    1d3a:	8d b3       	in	r24, 0x1d	; 29
    1d3c:	80 62       	ori	r24, 0x20	; 32
    1d3e:	8d bb       	out	0x1d, r24	; 29
	
	//The rising edge of INTn generates asynchronously an interrupt request
	EICRA |=(1<<ISC00) | (1<<ISC01);
    1d40:	e9 e6       	ldi	r30, 0x69	; 105
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	83 60       	ori	r24, 0x03	; 3
    1d48:	80 83       	st	Z, r24
	EICRB |=(1<<ISC40) | (1<<ISC41)|(1<<ISC50) | (1<<ISC51);//|(1<<ISC60) | (1<<ISC61);
    1d4a:	ea e6       	ldi	r30, 0x6A	; 106
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	8f 60       	ori	r24, 0x0F	; 15
    1d52:	80 83       	st	Z, r24
	
	sei();
    1d54:	78 94       	sei
	while (1) {
		handleSerialConsole();
    1d56:	59 d9       	rcall	.-3406   	; 0x100a <handleSerialConsole>

00001d58 <__tablejump2__>:
    1d58:	ee 0f       	add	r30, r30
    1d5a:	ff 1f       	adc	r31, r31
    1d5c:	88 1f       	adc	r24, r24
    1d5e:	8b bf       	out	0x3b, r24	; 59
    1d60:	07 90       	elpm	r0, Z+
    1d62:	f6 91       	elpm	r31, Z
    1d64:	e0 2d       	mov	r30, r0
    1d66:	19 94       	eijmp

00001d68 <__mulshisi3>:
    1d68:	b7 ff       	sbrs	r27, 7
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <__muluhisi3>

00001d6c <__mulohisi3>:
    1d6c:	03 d0       	rcall	.+6      	; 0x1d74 <__muluhisi3>
    1d6e:	82 1b       	sub	r24, r18
    1d70:	93 0b       	sbc	r25, r19
    1d72:	08 95       	ret

00001d74 <__muluhisi3>:
    1d74:	09 d0       	rcall	.+18     	; 0x1d88 <__umulhisi3>
    1d76:	a5 9f       	mul	r26, r21
    1d78:	90 0d       	add	r25, r0
    1d7a:	b4 9f       	mul	r27, r20
    1d7c:	90 0d       	add	r25, r0
    1d7e:	a4 9f       	mul	r26, r20
    1d80:	80 0d       	add	r24, r0
    1d82:	91 1d       	adc	r25, r1
    1d84:	11 24       	eor	r1, r1
    1d86:	08 95       	ret

00001d88 <__umulhisi3>:
    1d88:	a2 9f       	mul	r26, r18
    1d8a:	b0 01       	movw	r22, r0
    1d8c:	b3 9f       	mul	r27, r19
    1d8e:	c0 01       	movw	r24, r0
    1d90:	a3 9f       	mul	r26, r19
    1d92:	70 0d       	add	r23, r0
    1d94:	81 1d       	adc	r24, r1
    1d96:	11 24       	eor	r1, r1
    1d98:	91 1d       	adc	r25, r1
    1d9a:	b2 9f       	mul	r27, r18
    1d9c:	70 0d       	add	r23, r0
    1d9e:	81 1d       	adc	r24, r1
    1da0:	11 24       	eor	r1, r1
    1da2:	91 1d       	adc	r25, r1
    1da4:	08 95       	ret

00001da6 <atoi>:
    1da6:	fc 01       	movw	r30, r24
    1da8:	88 27       	eor	r24, r24
    1daa:	99 27       	eor	r25, r25
    1dac:	e8 94       	clt
    1dae:	21 91       	ld	r18, Z+
    1db0:	20 32       	cpi	r18, 0x20	; 32
    1db2:	e9 f3       	breq	.-6      	; 0x1dae <atoi+0x8>
    1db4:	29 30       	cpi	r18, 0x09	; 9
    1db6:	10 f0       	brcs	.+4      	; 0x1dbc <atoi+0x16>
    1db8:	2e 30       	cpi	r18, 0x0E	; 14
    1dba:	c8 f3       	brcs	.-14     	; 0x1dae <atoi+0x8>
    1dbc:	2b 32       	cpi	r18, 0x2B	; 43
    1dbe:	39 f0       	breq	.+14     	; 0x1dce <atoi+0x28>
    1dc0:	2d 32       	cpi	r18, 0x2D	; 45
    1dc2:	31 f4       	brne	.+12     	; 0x1dd0 <atoi+0x2a>
    1dc4:	68 94       	set
    1dc6:	03 c0       	rjmp	.+6      	; 0x1dce <atoi+0x28>
    1dc8:	1b d0       	rcall	.+54     	; 0x1e00 <__mulhi_const_10>
    1dca:	82 0f       	add	r24, r18
    1dcc:	91 1d       	adc	r25, r1
    1dce:	21 91       	ld	r18, Z+
    1dd0:	20 53       	subi	r18, 0x30	; 48
    1dd2:	2a 30       	cpi	r18, 0x0A	; 10
    1dd4:	c8 f3       	brcs	.-14     	; 0x1dc8 <atoi+0x22>
    1dd6:	1e f4       	brtc	.+6      	; 0x1dde <atoi+0x38>
    1dd8:	90 95       	com	r25
    1dda:	81 95       	neg	r24
    1ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dde:	08 95       	ret

00001de0 <strcmp>:
    1de0:	fb 01       	movw	r30, r22
    1de2:	dc 01       	movw	r26, r24
    1de4:	8d 91       	ld	r24, X+
    1de6:	01 90       	ld	r0, Z+
    1de8:	80 19       	sub	r24, r0
    1dea:	01 10       	cpse	r0, r1
    1dec:	d9 f3       	breq	.-10     	; 0x1de4 <strcmp+0x4>
    1dee:	99 0b       	sbc	r25, r25
    1df0:	08 95       	ret

00001df2 <strcpy>:
    1df2:	fb 01       	movw	r30, r22
    1df4:	dc 01       	movw	r26, r24
    1df6:	01 90       	ld	r0, Z+
    1df8:	0d 92       	st	X+, r0
    1dfa:	00 20       	and	r0, r0
    1dfc:	e1 f7       	brne	.-8      	; 0x1df6 <strcpy+0x4>
    1dfe:	08 95       	ret

00001e00 <__mulhi_const_10>:
    1e00:	7a e0       	ldi	r23, 0x0A	; 10
    1e02:	97 9f       	mul	r25, r23
    1e04:	90 2d       	mov	r25, r0
    1e06:	87 9f       	mul	r24, r23
    1e08:	80 2d       	mov	r24, r0
    1e0a:	91 0d       	add	r25, r1
    1e0c:	11 24       	eor	r1, r1
    1e0e:	08 95       	ret

00001e10 <sprintf>:
    1e10:	0f 93       	push	r16
    1e12:	1f 93       	push	r17
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	0e 89       	ldd	r16, Y+22	; 0x16
    1e2a:	1f 89       	ldd	r17, Y+23	; 0x17
    1e2c:	86 e0       	ldi	r24, 0x06	; 6
    1e2e:	8c 83       	std	Y+4, r24	; 0x04
    1e30:	1a 83       	std	Y+2, r17	; 0x02
    1e32:	09 83       	std	Y+1, r16	; 0x01
    1e34:	8f ef       	ldi	r24, 0xFF	; 255
    1e36:	9f e7       	ldi	r25, 0x7F	; 127
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	ae 01       	movw	r20, r28
    1e3e:	46 5e       	subi	r20, 0xE6	; 230
    1e40:	5f 4f       	sbci	r21, 0xFF	; 255
    1e42:	68 8d       	ldd	r22, Y+24	; 0x18
    1e44:	79 8d       	ldd	r23, Y+25	; 0x19
    1e46:	ce 01       	movw	r24, r28
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	10 d0       	rcall	.+32     	; 0x1e6c <vfprintf>
    1e4c:	ef 81       	ldd	r30, Y+7	; 0x07
    1e4e:	f8 85       	ldd	r31, Y+8	; 0x08
    1e50:	e0 0f       	add	r30, r16
    1e52:	f1 1f       	adc	r31, r17
    1e54:	10 82       	st	Z, r1
    1e56:	2e 96       	adiw	r28, 0x0e	; 14
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <vfprintf>:
    1e6c:	2f 92       	push	r2
    1e6e:	3f 92       	push	r3
    1e70:	4f 92       	push	r4
    1e72:	5f 92       	push	r5
    1e74:	6f 92       	push	r6
    1e76:	7f 92       	push	r7
    1e78:	8f 92       	push	r8
    1e7a:	9f 92       	push	r9
    1e7c:	af 92       	push	r10
    1e7e:	bf 92       	push	r11
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	2b 97       	sbiw	r28, 0x0b	; 11
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	6c 01       	movw	r12, r24
    1ea2:	7b 01       	movw	r14, r22
    1ea4:	8a 01       	movw	r16, r20
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	17 82       	std	Z+7, r1	; 0x07
    1eaa:	16 82       	std	Z+6, r1	; 0x06
    1eac:	83 81       	ldd	r24, Z+3	; 0x03
    1eae:	81 ff       	sbrs	r24, 1
    1eb0:	bf c1       	rjmp	.+894    	; 0x2230 <__stack+0x31>
    1eb2:	ce 01       	movw	r24, r28
    1eb4:	01 96       	adiw	r24, 0x01	; 1
    1eb6:	3c 01       	movw	r6, r24
    1eb8:	f6 01       	movw	r30, r12
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	f7 01       	movw	r30, r14
    1ebe:	93 fd       	sbrc	r25, 3
    1ec0:	85 91       	lpm	r24, Z+
    1ec2:	93 ff       	sbrs	r25, 3
    1ec4:	81 91       	ld	r24, Z+
    1ec6:	7f 01       	movw	r14, r30
    1ec8:	88 23       	and	r24, r24
    1eca:	09 f4       	brne	.+2      	; 0x1ece <vfprintf+0x62>
    1ecc:	ad c1       	rjmp	.+858    	; 0x2228 <__stack+0x29>
    1ece:	85 32       	cpi	r24, 0x25	; 37
    1ed0:	39 f4       	brne	.+14     	; 0x1ee0 <vfprintf+0x74>
    1ed2:	93 fd       	sbrc	r25, 3
    1ed4:	85 91       	lpm	r24, Z+
    1ed6:	93 ff       	sbrs	r25, 3
    1ed8:	81 91       	ld	r24, Z+
    1eda:	7f 01       	movw	r14, r30
    1edc:	85 32       	cpi	r24, 0x25	; 37
    1ede:	21 f4       	brne	.+8      	; 0x1ee8 <vfprintf+0x7c>
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	d6 d1       	rcall	.+940    	; 0x2292 <fputc>
    1ee6:	e8 cf       	rjmp	.-48     	; 0x1eb8 <vfprintf+0x4c>
    1ee8:	91 2c       	mov	r9, r1
    1eea:	21 2c       	mov	r2, r1
    1eec:	31 2c       	mov	r3, r1
    1eee:	ff e1       	ldi	r31, 0x1F	; 31
    1ef0:	f3 15       	cp	r31, r3
    1ef2:	d8 f0       	brcs	.+54     	; 0x1f2a <vfprintf+0xbe>
    1ef4:	8b 32       	cpi	r24, 0x2B	; 43
    1ef6:	79 f0       	breq	.+30     	; 0x1f16 <vfprintf+0xaa>
    1ef8:	38 f4       	brcc	.+14     	; 0x1f08 <vfprintf+0x9c>
    1efa:	80 32       	cpi	r24, 0x20	; 32
    1efc:	79 f0       	breq	.+30     	; 0x1f1c <vfprintf+0xb0>
    1efe:	83 32       	cpi	r24, 0x23	; 35
    1f00:	a1 f4       	brne	.+40     	; 0x1f2a <vfprintf+0xbe>
    1f02:	23 2d       	mov	r18, r3
    1f04:	20 61       	ori	r18, 0x10	; 16
    1f06:	1d c0       	rjmp	.+58     	; 0x1f42 <vfprintf+0xd6>
    1f08:	8d 32       	cpi	r24, 0x2D	; 45
    1f0a:	61 f0       	breq	.+24     	; 0x1f24 <vfprintf+0xb8>
    1f0c:	80 33       	cpi	r24, 0x30	; 48
    1f0e:	69 f4       	brne	.+26     	; 0x1f2a <vfprintf+0xbe>
    1f10:	23 2d       	mov	r18, r3
    1f12:	21 60       	ori	r18, 0x01	; 1
    1f14:	16 c0       	rjmp	.+44     	; 0x1f42 <vfprintf+0xd6>
    1f16:	83 2d       	mov	r24, r3
    1f18:	82 60       	ori	r24, 0x02	; 2
    1f1a:	38 2e       	mov	r3, r24
    1f1c:	e3 2d       	mov	r30, r3
    1f1e:	e4 60       	ori	r30, 0x04	; 4
    1f20:	3e 2e       	mov	r3, r30
    1f22:	2a c0       	rjmp	.+84     	; 0x1f78 <vfprintf+0x10c>
    1f24:	f3 2d       	mov	r31, r3
    1f26:	f8 60       	ori	r31, 0x08	; 8
    1f28:	1d c0       	rjmp	.+58     	; 0x1f64 <vfprintf+0xf8>
    1f2a:	37 fc       	sbrc	r3, 7
    1f2c:	2d c0       	rjmp	.+90     	; 0x1f88 <vfprintf+0x11c>
    1f2e:	20 ed       	ldi	r18, 0xD0	; 208
    1f30:	28 0f       	add	r18, r24
    1f32:	2a 30       	cpi	r18, 0x0A	; 10
    1f34:	40 f0       	brcs	.+16     	; 0x1f46 <vfprintf+0xda>
    1f36:	8e 32       	cpi	r24, 0x2E	; 46
    1f38:	b9 f4       	brne	.+46     	; 0x1f68 <vfprintf+0xfc>
    1f3a:	36 fc       	sbrc	r3, 6
    1f3c:	75 c1       	rjmp	.+746    	; 0x2228 <__stack+0x29>
    1f3e:	23 2d       	mov	r18, r3
    1f40:	20 64       	ori	r18, 0x40	; 64
    1f42:	32 2e       	mov	r3, r18
    1f44:	19 c0       	rjmp	.+50     	; 0x1f78 <vfprintf+0x10c>
    1f46:	36 fe       	sbrs	r3, 6
    1f48:	06 c0       	rjmp	.+12     	; 0x1f56 <vfprintf+0xea>
    1f4a:	8a e0       	ldi	r24, 0x0A	; 10
    1f4c:	98 9e       	mul	r9, r24
    1f4e:	20 0d       	add	r18, r0
    1f50:	11 24       	eor	r1, r1
    1f52:	92 2e       	mov	r9, r18
    1f54:	11 c0       	rjmp	.+34     	; 0x1f78 <vfprintf+0x10c>
    1f56:	ea e0       	ldi	r30, 0x0A	; 10
    1f58:	2e 9e       	mul	r2, r30
    1f5a:	20 0d       	add	r18, r0
    1f5c:	11 24       	eor	r1, r1
    1f5e:	22 2e       	mov	r2, r18
    1f60:	f3 2d       	mov	r31, r3
    1f62:	f0 62       	ori	r31, 0x20	; 32
    1f64:	3f 2e       	mov	r3, r31
    1f66:	08 c0       	rjmp	.+16     	; 0x1f78 <vfprintf+0x10c>
    1f68:	8c 36       	cpi	r24, 0x6C	; 108
    1f6a:	21 f4       	brne	.+8      	; 0x1f74 <vfprintf+0x108>
    1f6c:	83 2d       	mov	r24, r3
    1f6e:	80 68       	ori	r24, 0x80	; 128
    1f70:	38 2e       	mov	r3, r24
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <vfprintf+0x10c>
    1f74:	88 36       	cpi	r24, 0x68	; 104
    1f76:	41 f4       	brne	.+16     	; 0x1f88 <vfprintf+0x11c>
    1f78:	f7 01       	movw	r30, r14
    1f7a:	93 fd       	sbrc	r25, 3
    1f7c:	85 91       	lpm	r24, Z+
    1f7e:	93 ff       	sbrs	r25, 3
    1f80:	81 91       	ld	r24, Z+
    1f82:	7f 01       	movw	r14, r30
    1f84:	81 11       	cpse	r24, r1
    1f86:	b3 cf       	rjmp	.-154    	; 0x1eee <vfprintf+0x82>
    1f88:	98 2f       	mov	r25, r24
    1f8a:	9f 7d       	andi	r25, 0xDF	; 223
    1f8c:	95 54       	subi	r25, 0x45	; 69
    1f8e:	93 30       	cpi	r25, 0x03	; 3
    1f90:	28 f4       	brcc	.+10     	; 0x1f9c <vfprintf+0x130>
    1f92:	0c 5f       	subi	r16, 0xFC	; 252
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	9f e3       	ldi	r25, 0x3F	; 63
    1f98:	99 83       	std	Y+1, r25	; 0x01
    1f9a:	0d c0       	rjmp	.+26     	; 0x1fb6 <vfprintf+0x14a>
    1f9c:	83 36       	cpi	r24, 0x63	; 99
    1f9e:	31 f0       	breq	.+12     	; 0x1fac <vfprintf+0x140>
    1fa0:	83 37       	cpi	r24, 0x73	; 115
    1fa2:	71 f0       	breq	.+28     	; 0x1fc0 <vfprintf+0x154>
    1fa4:	83 35       	cpi	r24, 0x53	; 83
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <vfprintf+0x13e>
    1fa8:	55 c0       	rjmp	.+170    	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    1faa:	20 c0       	rjmp	.+64     	; 0x1fec <vfprintf+0x180>
    1fac:	f8 01       	movw	r30, r16
    1fae:	80 81       	ld	r24, Z
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	0e 5f       	subi	r16, 0xFE	; 254
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	88 24       	eor	r8, r8
    1fb8:	83 94       	inc	r8
    1fba:	91 2c       	mov	r9, r1
    1fbc:	53 01       	movw	r10, r6
    1fbe:	12 c0       	rjmp	.+36     	; 0x1fe4 <vfprintf+0x178>
    1fc0:	28 01       	movw	r4, r16
    1fc2:	f2 e0       	ldi	r31, 0x02	; 2
    1fc4:	4f 0e       	add	r4, r31
    1fc6:	51 1c       	adc	r5, r1
    1fc8:	f8 01       	movw	r30, r16
    1fca:	a0 80       	ld	r10, Z
    1fcc:	b1 80       	ldd	r11, Z+1	; 0x01
    1fce:	36 fe       	sbrs	r3, 6
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <vfprintf+0x16c>
    1fd2:	69 2d       	mov	r22, r9
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <vfprintf+0x170>
    1fd8:	6f ef       	ldi	r22, 0xFF	; 255
    1fda:	7f ef       	ldi	r23, 0xFF	; 255
    1fdc:	c5 01       	movw	r24, r10
    1fde:	4e d1       	rcall	.+668    	; 0x227c <strnlen>
    1fe0:	4c 01       	movw	r8, r24
    1fe2:	82 01       	movw	r16, r4
    1fe4:	f3 2d       	mov	r31, r3
    1fe6:	ff 77       	andi	r31, 0x7F	; 127
    1fe8:	3f 2e       	mov	r3, r31
    1fea:	15 c0       	rjmp	.+42     	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    1fec:	28 01       	movw	r4, r16
    1fee:	22 e0       	ldi	r18, 0x02	; 2
    1ff0:	42 0e       	add	r4, r18
    1ff2:	51 1c       	adc	r5, r1
    1ff4:	f8 01       	movw	r30, r16
    1ff6:	a0 80       	ld	r10, Z
    1ff8:	b1 80       	ldd	r11, Z+1	; 0x01
    1ffa:	36 fe       	sbrs	r3, 6
    1ffc:	03 c0       	rjmp	.+6      	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    1ffe:	69 2d       	mov	r22, r9
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    2004:	6f ef       	ldi	r22, 0xFF	; 255
    2006:	7f ef       	ldi	r23, 0xFF	; 255
    2008:	c5 01       	movw	r24, r10
    200a:	2d d1       	rcall	.+602    	; 0x2266 <strnlen_P>
    200c:	4c 01       	movw	r8, r24
    200e:	f3 2d       	mov	r31, r3
    2010:	f0 68       	ori	r31, 0x80	; 128
    2012:	3f 2e       	mov	r3, r31
    2014:	82 01       	movw	r16, r4
    2016:	33 fc       	sbrc	r3, 3
    2018:	19 c0       	rjmp	.+50     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    201a:	82 2d       	mov	r24, r2
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	88 16       	cp	r8, r24
    2020:	99 06       	cpc	r9, r25
    2022:	a0 f4       	brcc	.+40     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2024:	b6 01       	movw	r22, r12
    2026:	80 e2       	ldi	r24, 0x20	; 32
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	33 d1       	rcall	.+614    	; 0x2292 <fputc>
    202c:	2a 94       	dec	r2
    202e:	f5 cf       	rjmp	.-22     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2030:	f5 01       	movw	r30, r10
    2032:	37 fc       	sbrc	r3, 7
    2034:	85 91       	lpm	r24, Z+
    2036:	37 fe       	sbrs	r3, 7
    2038:	81 91       	ld	r24, Z+
    203a:	5f 01       	movw	r10, r30
    203c:	b6 01       	movw	r22, r12
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	28 d1       	rcall	.+592    	; 0x2292 <fputc>
    2042:	21 10       	cpse	r2, r1
    2044:	2a 94       	dec	r2
    2046:	21 e0       	ldi	r18, 0x01	; 1
    2048:	82 1a       	sub	r8, r18
    204a:	91 08       	sbc	r9, r1
    204c:	81 14       	cp	r8, r1
    204e:	91 04       	cpc	r9, r1
    2050:	79 f7       	brne	.-34     	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    2052:	e1 c0       	rjmp	.+450    	; 0x2216 <__stack+0x17>
    2054:	84 36       	cpi	r24, 0x64	; 100
    2056:	11 f0       	breq	.+4      	; 0x205c <__DATA_REGION_LENGTH__+0x5c>
    2058:	89 36       	cpi	r24, 0x69	; 105
    205a:	39 f5       	brne	.+78     	; 0x20aa <__DATA_REGION_LENGTH__+0xaa>
    205c:	f8 01       	movw	r30, r16
    205e:	37 fe       	sbrs	r3, 7
    2060:	07 c0       	rjmp	.+14     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	0c 5f       	subi	r16, 0xFC	; 252
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	08 c0       	rjmp	.+16     	; 0x2080 <__DATA_REGION_LENGTH__+0x80>
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	07 2e       	mov	r0, r23
    2076:	00 0c       	add	r0, r0
    2078:	88 0b       	sbc	r24, r24
    207a:	99 0b       	sbc	r25, r25
    207c:	0e 5f       	subi	r16, 0xFE	; 254
    207e:	1f 4f       	sbci	r17, 0xFF	; 255
    2080:	f3 2d       	mov	r31, r3
    2082:	ff 76       	andi	r31, 0x6F	; 111
    2084:	3f 2e       	mov	r3, r31
    2086:	97 ff       	sbrs	r25, 7
    2088:	09 c0       	rjmp	.+18     	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
    208a:	90 95       	com	r25
    208c:	80 95       	com	r24
    208e:	70 95       	com	r23
    2090:	61 95       	neg	r22
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	8f 4f       	sbci	r24, 0xFF	; 255
    2096:	9f 4f       	sbci	r25, 0xFF	; 255
    2098:	f0 68       	ori	r31, 0x80	; 128
    209a:	3f 2e       	mov	r3, r31
    209c:	2a e0       	ldi	r18, 0x0A	; 10
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	a3 01       	movw	r20, r6
    20a2:	33 d1       	rcall	.+614    	; 0x230a <__ultoa_invert>
    20a4:	88 2e       	mov	r8, r24
    20a6:	86 18       	sub	r8, r6
    20a8:	44 c0       	rjmp	.+136    	; 0x2132 <__DATA_REGION_LENGTH__+0x132>
    20aa:	85 37       	cpi	r24, 0x75	; 117
    20ac:	31 f4       	brne	.+12     	; 0x20ba <__DATA_REGION_LENGTH__+0xba>
    20ae:	23 2d       	mov	r18, r3
    20b0:	2f 7e       	andi	r18, 0xEF	; 239
    20b2:	b2 2e       	mov	r11, r18
    20b4:	2a e0       	ldi	r18, 0x0A	; 10
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	25 c0       	rjmp	.+74     	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    20ba:	93 2d       	mov	r25, r3
    20bc:	99 7f       	andi	r25, 0xF9	; 249
    20be:	b9 2e       	mov	r11, r25
    20c0:	8f 36       	cpi	r24, 0x6F	; 111
    20c2:	c1 f0       	breq	.+48     	; 0x20f4 <__DATA_REGION_LENGTH__+0xf4>
    20c4:	18 f4       	brcc	.+6      	; 0x20cc <__DATA_REGION_LENGTH__+0xcc>
    20c6:	88 35       	cpi	r24, 0x58	; 88
    20c8:	79 f0       	breq	.+30     	; 0x20e8 <__DATA_REGION_LENGTH__+0xe8>
    20ca:	ae c0       	rjmp	.+348    	; 0x2228 <__stack+0x29>
    20cc:	80 37       	cpi	r24, 0x70	; 112
    20ce:	19 f0       	breq	.+6      	; 0x20d6 <__DATA_REGION_LENGTH__+0xd6>
    20d0:	88 37       	cpi	r24, 0x78	; 120
    20d2:	21 f0       	breq	.+8      	; 0x20dc <__DATA_REGION_LENGTH__+0xdc>
    20d4:	a9 c0       	rjmp	.+338    	; 0x2228 <__stack+0x29>
    20d6:	e9 2f       	mov	r30, r25
    20d8:	e0 61       	ori	r30, 0x10	; 16
    20da:	be 2e       	mov	r11, r30
    20dc:	b4 fe       	sbrs	r11, 4
    20de:	0d c0       	rjmp	.+26     	; 0x20fa <__DATA_REGION_LENGTH__+0xfa>
    20e0:	fb 2d       	mov	r31, r11
    20e2:	f4 60       	ori	r31, 0x04	; 4
    20e4:	bf 2e       	mov	r11, r31
    20e6:	09 c0       	rjmp	.+18     	; 0x20fa <__DATA_REGION_LENGTH__+0xfa>
    20e8:	34 fe       	sbrs	r3, 4
    20ea:	0a c0       	rjmp	.+20     	; 0x2100 <__DATA_REGION_LENGTH__+0x100>
    20ec:	29 2f       	mov	r18, r25
    20ee:	26 60       	ori	r18, 0x06	; 6
    20f0:	b2 2e       	mov	r11, r18
    20f2:	06 c0       	rjmp	.+12     	; 0x2100 <__DATA_REGION_LENGTH__+0x100>
    20f4:	28 e0       	ldi	r18, 0x08	; 8
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	05 c0       	rjmp	.+10     	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    20fa:	20 e1       	ldi	r18, 0x10	; 16
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    2100:	20 e1       	ldi	r18, 0x10	; 16
    2102:	32 e0       	ldi	r19, 0x02	; 2
    2104:	f8 01       	movw	r30, r16
    2106:	b7 fe       	sbrs	r11, 7
    2108:	07 c0       	rjmp	.+14     	; 0x2118 <__DATA_REGION_LENGTH__+0x118>
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	0c 5f       	subi	r16, 0xFC	; 252
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	06 c0       	rjmp	.+12     	; 0x2124 <__DATA_REGION_LENGTH__+0x124>
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 5f       	subi	r16, 0xFE	; 254
    2122:	1f 4f       	sbci	r17, 0xFF	; 255
    2124:	a3 01       	movw	r20, r6
    2126:	f1 d0       	rcall	.+482    	; 0x230a <__ultoa_invert>
    2128:	88 2e       	mov	r8, r24
    212a:	86 18       	sub	r8, r6
    212c:	fb 2d       	mov	r31, r11
    212e:	ff 77       	andi	r31, 0x7F	; 127
    2130:	3f 2e       	mov	r3, r31
    2132:	36 fe       	sbrs	r3, 6
    2134:	0d c0       	rjmp	.+26     	; 0x2150 <__DATA_REGION_LENGTH__+0x150>
    2136:	23 2d       	mov	r18, r3
    2138:	2e 7f       	andi	r18, 0xFE	; 254
    213a:	a2 2e       	mov	r10, r18
    213c:	89 14       	cp	r8, r9
    213e:	58 f4       	brcc	.+22     	; 0x2156 <__DATA_REGION_LENGTH__+0x156>
    2140:	34 fe       	sbrs	r3, 4
    2142:	0b c0       	rjmp	.+22     	; 0x215a <__DATA_REGION_LENGTH__+0x15a>
    2144:	32 fc       	sbrc	r3, 2
    2146:	09 c0       	rjmp	.+18     	; 0x215a <__DATA_REGION_LENGTH__+0x15a>
    2148:	83 2d       	mov	r24, r3
    214a:	8e 7e       	andi	r24, 0xEE	; 238
    214c:	a8 2e       	mov	r10, r24
    214e:	05 c0       	rjmp	.+10     	; 0x215a <__DATA_REGION_LENGTH__+0x15a>
    2150:	b8 2c       	mov	r11, r8
    2152:	a3 2c       	mov	r10, r3
    2154:	03 c0       	rjmp	.+6      	; 0x215c <__DATA_REGION_LENGTH__+0x15c>
    2156:	b8 2c       	mov	r11, r8
    2158:	01 c0       	rjmp	.+2      	; 0x215c <__DATA_REGION_LENGTH__+0x15c>
    215a:	b9 2c       	mov	r11, r9
    215c:	a4 fe       	sbrs	r10, 4
    215e:	0f c0       	rjmp	.+30     	; 0x217e <__DATA_REGION_LENGTH__+0x17e>
    2160:	fe 01       	movw	r30, r28
    2162:	e8 0d       	add	r30, r8
    2164:	f1 1d       	adc	r31, r1
    2166:	80 81       	ld	r24, Z
    2168:	80 33       	cpi	r24, 0x30	; 48
    216a:	21 f4       	brne	.+8      	; 0x2174 <__DATA_REGION_LENGTH__+0x174>
    216c:	9a 2d       	mov	r25, r10
    216e:	99 7e       	andi	r25, 0xE9	; 233
    2170:	a9 2e       	mov	r10, r25
    2172:	09 c0       	rjmp	.+18     	; 0x2186 <__DATA_REGION_LENGTH__+0x186>
    2174:	a2 fe       	sbrs	r10, 2
    2176:	06 c0       	rjmp	.+12     	; 0x2184 <__DATA_REGION_LENGTH__+0x184>
    2178:	b3 94       	inc	r11
    217a:	b3 94       	inc	r11
    217c:	04 c0       	rjmp	.+8      	; 0x2186 <__DATA_REGION_LENGTH__+0x186>
    217e:	8a 2d       	mov	r24, r10
    2180:	86 78       	andi	r24, 0x86	; 134
    2182:	09 f0       	breq	.+2      	; 0x2186 <__DATA_REGION_LENGTH__+0x186>
    2184:	b3 94       	inc	r11
    2186:	a3 fc       	sbrc	r10, 3
    2188:	10 c0       	rjmp	.+32     	; 0x21aa <__DATA_REGION_LENGTH__+0x1aa>
    218a:	a0 fe       	sbrs	r10, 0
    218c:	06 c0       	rjmp	.+12     	; 0x219a <__DATA_REGION_LENGTH__+0x19a>
    218e:	b2 14       	cp	r11, r2
    2190:	80 f4       	brcc	.+32     	; 0x21b2 <__DATA_REGION_LENGTH__+0x1b2>
    2192:	28 0c       	add	r2, r8
    2194:	92 2c       	mov	r9, r2
    2196:	9b 18       	sub	r9, r11
    2198:	0d c0       	rjmp	.+26     	; 0x21b4 <__DATA_REGION_LENGTH__+0x1b4>
    219a:	b2 14       	cp	r11, r2
    219c:	58 f4       	brcc	.+22     	; 0x21b4 <__DATA_REGION_LENGTH__+0x1b4>
    219e:	b6 01       	movw	r22, r12
    21a0:	80 e2       	ldi	r24, 0x20	; 32
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	76 d0       	rcall	.+236    	; 0x2292 <fputc>
    21a6:	b3 94       	inc	r11
    21a8:	f8 cf       	rjmp	.-16     	; 0x219a <__DATA_REGION_LENGTH__+0x19a>
    21aa:	b2 14       	cp	r11, r2
    21ac:	18 f4       	brcc	.+6      	; 0x21b4 <__DATA_REGION_LENGTH__+0x1b4>
    21ae:	2b 18       	sub	r2, r11
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <__DATA_REGION_LENGTH__+0x1b6>
    21b2:	98 2c       	mov	r9, r8
    21b4:	21 2c       	mov	r2, r1
    21b6:	a4 fe       	sbrs	r10, 4
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <__DATA_REGION_LENGTH__+0x1d8>
    21ba:	b6 01       	movw	r22, r12
    21bc:	80 e3       	ldi	r24, 0x30	; 48
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	68 d0       	rcall	.+208    	; 0x2292 <fputc>
    21c2:	a2 fe       	sbrs	r10, 2
    21c4:	16 c0       	rjmp	.+44     	; 0x21f2 <__DATA_REGION_LENGTH__+0x1f2>
    21c6:	a1 fc       	sbrc	r10, 1
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <__DATA_REGION_LENGTH__+0x1d0>
    21ca:	88 e7       	ldi	r24, 0x78	; 120
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <__DATA_REGION_LENGTH__+0x1d4>
    21d0:	88 e5       	ldi	r24, 0x58	; 88
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	b6 01       	movw	r22, r12
    21d6:	0c c0       	rjmp	.+24     	; 0x21f0 <__DATA_REGION_LENGTH__+0x1f0>
    21d8:	8a 2d       	mov	r24, r10
    21da:	86 78       	andi	r24, 0x86	; 134
    21dc:	51 f0       	breq	.+20     	; 0x21f2 <__DATA_REGION_LENGTH__+0x1f2>
    21de:	a1 fe       	sbrs	r10, 1
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <__DATA_REGION_LENGTH__+0x1e6>
    21e2:	8b e2       	ldi	r24, 0x2B	; 43
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <__DATA_REGION_LENGTH__+0x1e8>
    21e6:	80 e2       	ldi	r24, 0x20	; 32
    21e8:	a7 fc       	sbrc	r10, 7
    21ea:	8d e2       	ldi	r24, 0x2D	; 45
    21ec:	b6 01       	movw	r22, r12
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	50 d0       	rcall	.+160    	; 0x2292 <fputc>
    21f2:	89 14       	cp	r8, r9
    21f4:	30 f4       	brcc	.+12     	; 0x2202 <__stack+0x3>
    21f6:	b6 01       	movw	r22, r12
    21f8:	80 e3       	ldi	r24, 0x30	; 48
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	4a d0       	rcall	.+148    	; 0x2292 <fputc>
    21fe:	9a 94       	dec	r9
    2200:	f8 cf       	rjmp	.-16     	; 0x21f2 <__DATA_REGION_LENGTH__+0x1f2>
    2202:	8a 94       	dec	r8
    2204:	f3 01       	movw	r30, r6
    2206:	e8 0d       	add	r30, r8
    2208:	f1 1d       	adc	r31, r1
    220a:	80 81       	ld	r24, Z
    220c:	b6 01       	movw	r22, r12
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	40 d0       	rcall	.+128    	; 0x2292 <fputc>
    2212:	81 10       	cpse	r8, r1
    2214:	f6 cf       	rjmp	.-20     	; 0x2202 <__stack+0x3>
    2216:	22 20       	and	r2, r2
    2218:	09 f4       	brne	.+2      	; 0x221c <__stack+0x1d>
    221a:	4e ce       	rjmp	.-868    	; 0x1eb8 <vfprintf+0x4c>
    221c:	b6 01       	movw	r22, r12
    221e:	80 e2       	ldi	r24, 0x20	; 32
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	37 d0       	rcall	.+110    	; 0x2292 <fputc>
    2224:	2a 94       	dec	r2
    2226:	f7 cf       	rjmp	.-18     	; 0x2216 <__stack+0x17>
    2228:	f6 01       	movw	r30, r12
    222a:	86 81       	ldd	r24, Z+6	; 0x06
    222c:	97 81       	ldd	r25, Z+7	; 0x07
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <__stack+0x35>
    2230:	8f ef       	ldi	r24, 0xFF	; 255
    2232:	9f ef       	ldi	r25, 0xFF	; 255
    2234:	2b 96       	adiw	r28, 0x0b	; 11
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	df 90       	pop	r13
    224e:	cf 90       	pop	r12
    2250:	bf 90       	pop	r11
    2252:	af 90       	pop	r10
    2254:	9f 90       	pop	r9
    2256:	8f 90       	pop	r8
    2258:	7f 90       	pop	r7
    225a:	6f 90       	pop	r6
    225c:	5f 90       	pop	r5
    225e:	4f 90       	pop	r4
    2260:	3f 90       	pop	r3
    2262:	2f 90       	pop	r2
    2264:	08 95       	ret

00002266 <strnlen_P>:
    2266:	fc 01       	movw	r30, r24
    2268:	05 90       	lpm	r0, Z+
    226a:	61 50       	subi	r22, 0x01	; 1
    226c:	70 40       	sbci	r23, 0x00	; 0
    226e:	01 10       	cpse	r0, r1
    2270:	d8 f7       	brcc	.-10     	; 0x2268 <strnlen_P+0x2>
    2272:	80 95       	com	r24
    2274:	90 95       	com	r25
    2276:	8e 0f       	add	r24, r30
    2278:	9f 1f       	adc	r25, r31
    227a:	08 95       	ret

0000227c <strnlen>:
    227c:	fc 01       	movw	r30, r24
    227e:	61 50       	subi	r22, 0x01	; 1
    2280:	70 40       	sbci	r23, 0x00	; 0
    2282:	01 90       	ld	r0, Z+
    2284:	01 10       	cpse	r0, r1
    2286:	d8 f7       	brcc	.-10     	; 0x227e <strnlen+0x2>
    2288:	80 95       	com	r24
    228a:	90 95       	com	r25
    228c:	8e 0f       	add	r24, r30
    228e:	9f 1f       	adc	r25, r31
    2290:	08 95       	ret

00002292 <fputc>:
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	fb 01       	movw	r30, r22
    229c:	23 81       	ldd	r18, Z+3	; 0x03
    229e:	21 fd       	sbrc	r18, 1
    22a0:	03 c0       	rjmp	.+6      	; 0x22a8 <fputc+0x16>
    22a2:	8f ef       	ldi	r24, 0xFF	; 255
    22a4:	9f ef       	ldi	r25, 0xFF	; 255
    22a6:	2c c0       	rjmp	.+88     	; 0x2300 <fputc+0x6e>
    22a8:	22 ff       	sbrs	r18, 2
    22aa:	16 c0       	rjmp	.+44     	; 0x22d8 <fputc+0x46>
    22ac:	46 81       	ldd	r20, Z+6	; 0x06
    22ae:	57 81       	ldd	r21, Z+7	; 0x07
    22b0:	24 81       	ldd	r18, Z+4	; 0x04
    22b2:	35 81       	ldd	r19, Z+5	; 0x05
    22b4:	42 17       	cp	r20, r18
    22b6:	53 07       	cpc	r21, r19
    22b8:	44 f4       	brge	.+16     	; 0x22ca <fputc+0x38>
    22ba:	a0 81       	ld	r26, Z
    22bc:	b1 81       	ldd	r27, Z+1	; 0x01
    22be:	9d 01       	movw	r18, r26
    22c0:	2f 5f       	subi	r18, 0xFF	; 255
    22c2:	3f 4f       	sbci	r19, 0xFF	; 255
    22c4:	31 83       	std	Z+1, r19	; 0x01
    22c6:	20 83       	st	Z, r18
    22c8:	8c 93       	st	X, r24
    22ca:	26 81       	ldd	r18, Z+6	; 0x06
    22cc:	37 81       	ldd	r19, Z+7	; 0x07
    22ce:	2f 5f       	subi	r18, 0xFF	; 255
    22d0:	3f 4f       	sbci	r19, 0xFF	; 255
    22d2:	37 83       	std	Z+7, r19	; 0x07
    22d4:	26 83       	std	Z+6, r18	; 0x06
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <fputc+0x6e>
    22d8:	8b 01       	movw	r16, r22
    22da:	ec 01       	movw	r28, r24
    22dc:	fb 01       	movw	r30, r22
    22de:	00 84       	ldd	r0, Z+8	; 0x08
    22e0:	f1 85       	ldd	r31, Z+9	; 0x09
    22e2:	e0 2d       	mov	r30, r0
    22e4:	19 95       	eicall
    22e6:	89 2b       	or	r24, r25
    22e8:	e1 f6       	brne	.-72     	; 0x22a2 <fputc+0x10>
    22ea:	d8 01       	movw	r26, r16
    22ec:	16 96       	adiw	r26, 0x06	; 6
    22ee:	8d 91       	ld	r24, X+
    22f0:	9c 91       	ld	r25, X
    22f2:	17 97       	sbiw	r26, 0x07	; 7
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	17 96       	adiw	r26, 0x07	; 7
    22f8:	9c 93       	st	X, r25
    22fa:	8e 93       	st	-X, r24
    22fc:	16 97       	sbiw	r26, 0x06	; 6
    22fe:	ce 01       	movw	r24, r28
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	08 95       	ret

0000230a <__ultoa_invert>:
    230a:	fa 01       	movw	r30, r20
    230c:	aa 27       	eor	r26, r26
    230e:	28 30       	cpi	r18, 0x08	; 8
    2310:	51 f1       	breq	.+84     	; 0x2366 <__ultoa_invert+0x5c>
    2312:	20 31       	cpi	r18, 0x10	; 16
    2314:	81 f1       	breq	.+96     	; 0x2376 <__ultoa_invert+0x6c>
    2316:	e8 94       	clt
    2318:	6f 93       	push	r22
    231a:	6e 7f       	andi	r22, 0xFE	; 254
    231c:	6e 5f       	subi	r22, 0xFE	; 254
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	8f 4f       	sbci	r24, 0xFF	; 255
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	af 4f       	sbci	r26, 0xFF	; 255
    2326:	b1 e0       	ldi	r27, 0x01	; 1
    2328:	3e d0       	rcall	.+124    	; 0x23a6 <__ultoa_invert+0x9c>
    232a:	b4 e0       	ldi	r27, 0x04	; 4
    232c:	3c d0       	rcall	.+120    	; 0x23a6 <__ultoa_invert+0x9c>
    232e:	67 0f       	add	r22, r23
    2330:	78 1f       	adc	r23, r24
    2332:	89 1f       	adc	r24, r25
    2334:	9a 1f       	adc	r25, r26
    2336:	a1 1d       	adc	r26, r1
    2338:	68 0f       	add	r22, r24
    233a:	79 1f       	adc	r23, r25
    233c:	8a 1f       	adc	r24, r26
    233e:	91 1d       	adc	r25, r1
    2340:	a1 1d       	adc	r26, r1
    2342:	6a 0f       	add	r22, r26
    2344:	71 1d       	adc	r23, r1
    2346:	81 1d       	adc	r24, r1
    2348:	91 1d       	adc	r25, r1
    234a:	a1 1d       	adc	r26, r1
    234c:	20 d0       	rcall	.+64     	; 0x238e <__ultoa_invert+0x84>
    234e:	09 f4       	brne	.+2      	; 0x2352 <__ultoa_invert+0x48>
    2350:	68 94       	set
    2352:	3f 91       	pop	r19
    2354:	2a e0       	ldi	r18, 0x0A	; 10
    2356:	26 9f       	mul	r18, r22
    2358:	11 24       	eor	r1, r1
    235a:	30 19       	sub	r19, r0
    235c:	30 5d       	subi	r19, 0xD0	; 208
    235e:	31 93       	st	Z+, r19
    2360:	de f6       	brtc	.-74     	; 0x2318 <__ultoa_invert+0xe>
    2362:	cf 01       	movw	r24, r30
    2364:	08 95       	ret
    2366:	46 2f       	mov	r20, r22
    2368:	47 70       	andi	r20, 0x07	; 7
    236a:	40 5d       	subi	r20, 0xD0	; 208
    236c:	41 93       	st	Z+, r20
    236e:	b3 e0       	ldi	r27, 0x03	; 3
    2370:	0f d0       	rcall	.+30     	; 0x2390 <__ultoa_invert+0x86>
    2372:	c9 f7       	brne	.-14     	; 0x2366 <__ultoa_invert+0x5c>
    2374:	f6 cf       	rjmp	.-20     	; 0x2362 <__ultoa_invert+0x58>
    2376:	46 2f       	mov	r20, r22
    2378:	4f 70       	andi	r20, 0x0F	; 15
    237a:	40 5d       	subi	r20, 0xD0	; 208
    237c:	4a 33       	cpi	r20, 0x3A	; 58
    237e:	18 f0       	brcs	.+6      	; 0x2386 <__ultoa_invert+0x7c>
    2380:	49 5d       	subi	r20, 0xD9	; 217
    2382:	31 fd       	sbrc	r19, 1
    2384:	40 52       	subi	r20, 0x20	; 32
    2386:	41 93       	st	Z+, r20
    2388:	02 d0       	rcall	.+4      	; 0x238e <__ultoa_invert+0x84>
    238a:	a9 f7       	brne	.-22     	; 0x2376 <__ultoa_invert+0x6c>
    238c:	ea cf       	rjmp	.-44     	; 0x2362 <__ultoa_invert+0x58>
    238e:	b4 e0       	ldi	r27, 0x04	; 4
    2390:	a6 95       	lsr	r26
    2392:	97 95       	ror	r25
    2394:	87 95       	ror	r24
    2396:	77 95       	ror	r23
    2398:	67 95       	ror	r22
    239a:	ba 95       	dec	r27
    239c:	c9 f7       	brne	.-14     	; 0x2390 <__ultoa_invert+0x86>
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	61 05       	cpc	r22, r1
    23a2:	71 05       	cpc	r23, r1
    23a4:	08 95       	ret
    23a6:	9b 01       	movw	r18, r22
    23a8:	ac 01       	movw	r20, r24
    23aa:	0a 2e       	mov	r0, r26
    23ac:	06 94       	lsr	r0
    23ae:	57 95       	ror	r21
    23b0:	47 95       	ror	r20
    23b2:	37 95       	ror	r19
    23b4:	27 95       	ror	r18
    23b6:	ba 95       	dec	r27
    23b8:	c9 f7       	brne	.-14     	; 0x23ac <__ultoa_invert+0xa2>
    23ba:	62 0f       	add	r22, r18
    23bc:	73 1f       	adc	r23, r19
    23be:	84 1f       	adc	r24, r20
    23c0:	95 1f       	adc	r25, r21
    23c2:	a0 1d       	adc	r26, r0
    23c4:	08 95       	ret

000023c6 <eeprom_read_block>:
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22

000023ca <eeprom_read_blraw>:
    23ca:	fc 01       	movw	r30, r24
    23cc:	f9 99       	sbic	0x1f, 1	; 31
    23ce:	fe cf       	rjmp	.-4      	; 0x23cc <eeprom_read_blraw+0x2>
    23d0:	06 c0       	rjmp	.+12     	; 0x23de <eeprom_read_blraw+0x14>
    23d2:	f2 bd       	out	0x22, r31	; 34
    23d4:	e1 bd       	out	0x21, r30	; 33
    23d6:	f8 9a       	sbi	0x1f, 0	; 31
    23d8:	31 96       	adiw	r30, 0x01	; 1
    23da:	00 b4       	in	r0, 0x20	; 32
    23dc:	0d 92       	st	X+, r0
    23de:	41 50       	subi	r20, 0x01	; 1
    23e0:	50 40       	sbci	r21, 0x00	; 0
    23e2:	b8 f7       	brcc	.-18     	; 0x23d2 <eeprom_read_blraw+0x8>
    23e4:	08 95       	ret

000023e6 <eeprom_update_block>:
    23e6:	dc 01       	movw	r26, r24
    23e8:	a4 0f       	add	r26, r20
    23ea:	b5 1f       	adc	r27, r21
    23ec:	41 50       	subi	r20, 0x01	; 1
    23ee:	50 40       	sbci	r21, 0x00	; 0
    23f0:	40 f0       	brcs	.+16     	; 0x2402 <eeprom_update_block+0x1c>
    23f2:	cb 01       	movw	r24, r22
    23f4:	84 0f       	add	r24, r20
    23f6:	95 1f       	adc	r25, r21
    23f8:	2e 91       	ld	r18, -X
    23fa:	05 d0       	rcall	.+10     	; 0x2406 <eeprom_update_r18>
    23fc:	41 50       	subi	r20, 0x01	; 1
    23fe:	50 40       	sbci	r21, 0x00	; 0
    2400:	d8 f7       	brcc	.-10     	; 0x23f8 <eeprom_update_block+0x12>
    2402:	08 95       	ret

00002404 <eeprom_update_byte>:
    2404:	26 2f       	mov	r18, r22

00002406 <eeprom_update_r18>:
    2406:	f9 99       	sbic	0x1f, 1	; 31
    2408:	fe cf       	rjmp	.-4      	; 0x2406 <eeprom_update_r18>
    240a:	92 bd       	out	0x22, r25	; 34
    240c:	81 bd       	out	0x21, r24	; 33
    240e:	f8 9a       	sbi	0x1f, 0	; 31
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	00 b4       	in	r0, 0x20	; 32
    2414:	02 16       	cp	r0, r18
    2416:	39 f0       	breq	.+14     	; 0x2426 <eeprom_update_r18+0x20>
    2418:	1f ba       	out	0x1f, r1	; 31
    241a:	20 bd       	out	0x20, r18	; 32
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	fa 9a       	sbi	0x1f, 2	; 31
    2422:	f9 9a       	sbi	0x1f, 1	; 31
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	08 95       	ret

00002428 <_exit>:
    2428:	f8 94       	cli

0000242a <__stop_program>:
    242a:	ff cf       	rjmp	.-2      	; 0x242a <__stop_program>
